
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EmailRecord
 * 
 */
export type EmailRecord = $Result.DefaultSelection<Prisma.$EmailRecordPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model GameConfig
 * 
 */
export type GameConfig = $Result.DefaultSelection<Prisma.$GameConfigPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model TaskConfig
 * 
 */
export type TaskConfig = $Result.DefaultSelection<Prisma.$TaskConfigPayload>
/**
 * Model TaskSelection
 * 
 */
export type TaskSelection = $Result.DefaultSelection<Prisma.$TaskSelectionPayload>
/**
 * Model TaskResult
 * 
 */
export type TaskResult = $Result.DefaultSelection<Prisma.$TaskResultPayload>
/**
 * Model TaskSubmission
 * 
 */
export type TaskSubmission = $Result.DefaultSelection<Prisma.$TaskSubmissionPayload>
/**
 * Model VoteContent
 * 
 */
export type VoteContent = $Result.DefaultSelection<Prisma.$VoteContentPayload>
/**
 * Model VoteItem
 * 
 */
export type VoteItem = $Result.DefaultSelection<Prisma.$VoteItemPayload>
/**
 * Model VoteSubmission
 * 
 */
export type VoteSubmission = $Result.DefaultSelection<Prisma.$VoteSubmissionPayload>
/**
 * Model PredictionRound
 * 
 */
export type PredictionRound = $Result.DefaultSelection<Prisma.$PredictionRoundPayload>
/**
 * Model PredictionConfig
 * 
 */
export type PredictionConfig = $Result.DefaultSelection<Prisma.$PredictionConfigPayload>
/**
 * Model PredictionQuestion
 * 
 */
export type PredictionQuestion = $Result.DefaultSelection<Prisma.$PredictionQuestionPayload>
/**
 * Model PredictionResult
 * 
 */
export type PredictionResult = $Result.DefaultSelection<Prisma.$PredictionResultPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SessionStatus: {
  Registered: 'Registered',
  Active: 'Active',
  Eliminated: 'Eliminated',
  Completed: 'Completed'
};

export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus]


export const TaskSubmissionType: {
  TextAnswer: 'TextAnswer',
  ImageUpload: 'ImageUpload',
  SocialLink: 'SocialLink'
};

export type TaskSubmissionType = (typeof TaskSubmissionType)[keyof typeof TaskSubmissionType]


export const VoteOptionsType: {
  W: 'W',
  L: 'L'
};

export type VoteOptionsType = (typeof VoteOptionsType)[keyof typeof VoteOptionsType]


export const PredictionOutcome: {
  Hit: 'Hit',
  Miss: 'Miss',
  TBD: 'TBD',
  NoAnswer: 'NoAnswer'
};

export type PredictionOutcome = (typeof PredictionOutcome)[keyof typeof PredictionOutcome]


export const SignalType: {
  Volume: 'Volume',
  Mentions: 'Mentions',
  Sentiment: 'Sentiment'
};

export type SignalType = (typeof SignalType)[keyof typeof SignalType]


export const SignalTolerance: {
  Low: 'Low',
  Mid: 'Mid',
  High: 'High'
};

export type SignalTolerance = (typeof SignalTolerance)[keyof typeof SignalTolerance]

}

export type SessionStatus = $Enums.SessionStatus

export const SessionStatus: typeof $Enums.SessionStatus

export type TaskSubmissionType = $Enums.TaskSubmissionType

export const TaskSubmissionType: typeof $Enums.TaskSubmissionType

export type VoteOptionsType = $Enums.VoteOptionsType

export const VoteOptionsType: typeof $Enums.VoteOptionsType

export type PredictionOutcome = $Enums.PredictionOutcome

export const PredictionOutcome: typeof $Enums.PredictionOutcome

export type SignalType = $Enums.SignalType

export const SignalType: typeof $Enums.SignalType

export type SignalTolerance = $Enums.SignalTolerance

export const SignalTolerance: typeof $Enums.SignalTolerance

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Events
 * const events = await prisma.event.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Events
   * const events = await prisma.event.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailRecord`: Exposes CRUD operations for the **EmailRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailRecords
    * const emailRecords = await prisma.emailRecord.findMany()
    * ```
    */
  get emailRecord(): Prisma.EmailRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameConfig`: Exposes CRUD operations for the **GameConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameConfigs
    * const gameConfigs = await prisma.gameConfig.findMany()
    * ```
    */
  get gameConfig(): Prisma.GameConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskConfig`: Exposes CRUD operations for the **TaskConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskConfigs
    * const taskConfigs = await prisma.taskConfig.findMany()
    * ```
    */
  get taskConfig(): Prisma.TaskConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskSelection`: Exposes CRUD operations for the **TaskSelection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskSelections
    * const taskSelections = await prisma.taskSelection.findMany()
    * ```
    */
  get taskSelection(): Prisma.TaskSelectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskResult`: Exposes CRUD operations for the **TaskResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskResults
    * const taskResults = await prisma.taskResult.findMany()
    * ```
    */
  get taskResult(): Prisma.TaskResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskSubmission`: Exposes CRUD operations for the **TaskSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskSubmissions
    * const taskSubmissions = await prisma.taskSubmission.findMany()
    * ```
    */
  get taskSubmission(): Prisma.TaskSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voteContent`: Exposes CRUD operations for the **VoteContent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoteContents
    * const voteContents = await prisma.voteContent.findMany()
    * ```
    */
  get voteContent(): Prisma.VoteContentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voteItem`: Exposes CRUD operations for the **VoteItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoteItems
    * const voteItems = await prisma.voteItem.findMany()
    * ```
    */
  get voteItem(): Prisma.VoteItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voteSubmission`: Exposes CRUD operations for the **VoteSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoteSubmissions
    * const voteSubmissions = await prisma.voteSubmission.findMany()
    * ```
    */
  get voteSubmission(): Prisma.VoteSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.predictionRound`: Exposes CRUD operations for the **PredictionRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredictionRounds
    * const predictionRounds = await prisma.predictionRound.findMany()
    * ```
    */
  get predictionRound(): Prisma.PredictionRoundDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.predictionConfig`: Exposes CRUD operations for the **PredictionConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredictionConfigs
    * const predictionConfigs = await prisma.predictionConfig.findMany()
    * ```
    */
  get predictionConfig(): Prisma.PredictionConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.predictionQuestion`: Exposes CRUD operations for the **PredictionQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredictionQuestions
    * const predictionQuestions = await prisma.predictionQuestion.findMany()
    * ```
    */
  get predictionQuestion(): Prisma.PredictionQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.predictionResult`: Exposes CRUD operations for the **PredictionResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredictionResults
    * const predictionResults = await prisma.predictionResult.findMany()
    * ```
    */
  get predictionResult(): Prisma.PredictionResultDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Event: 'Event',
    EmailRecord: 'EmailRecord',
    UserSession: 'UserSession',
    Game: 'Game',
    GameConfig: 'GameConfig',
    Task: 'Task',
    TaskConfig: 'TaskConfig',
    TaskSelection: 'TaskSelection',
    TaskResult: 'TaskResult',
    TaskSubmission: 'TaskSubmission',
    VoteContent: 'VoteContent',
    VoteItem: 'VoteItem',
    VoteSubmission: 'VoteSubmission',
    PredictionRound: 'PredictionRound',
    PredictionConfig: 'PredictionConfig',
    PredictionQuestion: 'PredictionQuestion',
    PredictionResult: 'PredictionResult'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "event" | "emailRecord" | "userSession" | "game" | "gameConfig" | "task" | "taskConfig" | "taskSelection" | "taskResult" | "taskSubmission" | "voteContent" | "voteItem" | "voteSubmission" | "predictionRound" | "predictionConfig" | "predictionQuestion" | "predictionResult"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EmailRecord: {
        payload: Prisma.$EmailRecordPayload<ExtArgs>
        fields: Prisma.EmailRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          findFirst: {
            args: Prisma.EmailRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          findMany: {
            args: Prisma.EmailRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>[]
          }
          create: {
            args: Prisma.EmailRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          createMany: {
            args: Prisma.EmailRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>[]
          }
          delete: {
            args: Prisma.EmailRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          update: {
            args: Prisma.EmailRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          deleteMany: {
            args: Prisma.EmailRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>[]
          }
          upsert: {
            args: Prisma.EmailRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailRecordPayload>
          }
          aggregate: {
            args: Prisma.EmailRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailRecord>
          }
          groupBy: {
            args: Prisma.EmailRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailRecordCountArgs<ExtArgs>
            result: $Utils.Optional<EmailRecordCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      GameConfig: {
        payload: Prisma.$GameConfigPayload<ExtArgs>
        fields: Prisma.GameConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          findFirst: {
            args: Prisma.GameConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          findMany: {
            args: Prisma.GameConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>[]
          }
          create: {
            args: Prisma.GameConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          createMany: {
            args: Prisma.GameConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>[]
          }
          delete: {
            args: Prisma.GameConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          update: {
            args: Prisma.GameConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          deleteMany: {
            args: Prisma.GameConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>[]
          }
          upsert: {
            args: Prisma.GameConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameConfigPayload>
          }
          aggregate: {
            args: Prisma.GameConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameConfig>
          }
          groupBy: {
            args: Prisma.GameConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameConfigCountArgs<ExtArgs>
            result: $Utils.Optional<GameConfigCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      TaskConfig: {
        payload: Prisma.$TaskConfigPayload<ExtArgs>
        fields: Prisma.TaskConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          findFirst: {
            args: Prisma.TaskConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          findMany: {
            args: Prisma.TaskConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>[]
          }
          create: {
            args: Prisma.TaskConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          createMany: {
            args: Prisma.TaskConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>[]
          }
          delete: {
            args: Prisma.TaskConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          update: {
            args: Prisma.TaskConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          deleteMany: {
            args: Prisma.TaskConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>[]
          }
          upsert: {
            args: Prisma.TaskConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskConfigPayload>
          }
          aggregate: {
            args: Prisma.TaskConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskConfig>
          }
          groupBy: {
            args: Prisma.TaskConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskConfigCountArgs<ExtArgs>
            result: $Utils.Optional<TaskConfigCountAggregateOutputType> | number
          }
        }
      }
      TaskSelection: {
        payload: Prisma.$TaskSelectionPayload<ExtArgs>
        fields: Prisma.TaskSelectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskSelectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskSelectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          findFirst: {
            args: Prisma.TaskSelectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskSelectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          findMany: {
            args: Prisma.TaskSelectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>[]
          }
          create: {
            args: Prisma.TaskSelectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          createMany: {
            args: Prisma.TaskSelectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskSelectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>[]
          }
          delete: {
            args: Prisma.TaskSelectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          update: {
            args: Prisma.TaskSelectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          deleteMany: {
            args: Prisma.TaskSelectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskSelectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskSelectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>[]
          }
          upsert: {
            args: Prisma.TaskSelectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSelectionPayload>
          }
          aggregate: {
            args: Prisma.TaskSelectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskSelection>
          }
          groupBy: {
            args: Prisma.TaskSelectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskSelectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskSelectionCountArgs<ExtArgs>
            result: $Utils.Optional<TaskSelectionCountAggregateOutputType> | number
          }
        }
      }
      TaskResult: {
        payload: Prisma.$TaskResultPayload<ExtArgs>
        fields: Prisma.TaskResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          findFirst: {
            args: Prisma.TaskResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          findMany: {
            args: Prisma.TaskResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          create: {
            args: Prisma.TaskResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          createMany: {
            args: Prisma.TaskResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          delete: {
            args: Prisma.TaskResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          update: {
            args: Prisma.TaskResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          deleteMany: {
            args: Prisma.TaskResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>[]
          }
          upsert: {
            args: Prisma.TaskResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskResultPayload>
          }
          aggregate: {
            args: Prisma.TaskResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskResult>
          }
          groupBy: {
            args: Prisma.TaskResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskResultCountArgs<ExtArgs>
            result: $Utils.Optional<TaskResultCountAggregateOutputType> | number
          }
        }
      }
      TaskSubmission: {
        payload: Prisma.$TaskSubmissionPayload<ExtArgs>
        fields: Prisma.TaskSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          findFirst: {
            args: Prisma.TaskSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          findMany: {
            args: Prisma.TaskSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>[]
          }
          create: {
            args: Prisma.TaskSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          createMany: {
            args: Prisma.TaskSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>[]
          }
          delete: {
            args: Prisma.TaskSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          update: {
            args: Prisma.TaskSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.TaskSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.TaskSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskSubmissionPayload>
          }
          aggregate: {
            args: Prisma.TaskSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskSubmission>
          }
          groupBy: {
            args: Prisma.TaskSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<TaskSubmissionCountAggregateOutputType> | number
          }
        }
      }
      VoteContent: {
        payload: Prisma.$VoteContentPayload<ExtArgs>
        fields: Prisma.VoteContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteContentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteContentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          findFirst: {
            args: Prisma.VoteContentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteContentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          findMany: {
            args: Prisma.VoteContentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>[]
          }
          create: {
            args: Prisma.VoteContentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          createMany: {
            args: Prisma.VoteContentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteContentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>[]
          }
          delete: {
            args: Prisma.VoteContentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          update: {
            args: Prisma.VoteContentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          deleteMany: {
            args: Prisma.VoteContentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteContentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoteContentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>[]
          }
          upsert: {
            args: Prisma.VoteContentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteContentPayload>
          }
          aggregate: {
            args: Prisma.VoteContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoteContent>
          }
          groupBy: {
            args: Prisma.VoteContentGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteContentCountArgs<ExtArgs>
            result: $Utils.Optional<VoteContentCountAggregateOutputType> | number
          }
        }
      }
      VoteItem: {
        payload: Prisma.$VoteItemPayload<ExtArgs>
        fields: Prisma.VoteItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          findFirst: {
            args: Prisma.VoteItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          findMany: {
            args: Prisma.VoteItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>[]
          }
          create: {
            args: Prisma.VoteItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          createMany: {
            args: Prisma.VoteItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>[]
          }
          delete: {
            args: Prisma.VoteItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          update: {
            args: Prisma.VoteItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          deleteMany: {
            args: Prisma.VoteItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoteItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>[]
          }
          upsert: {
            args: Prisma.VoteItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteItemPayload>
          }
          aggregate: {
            args: Prisma.VoteItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoteItem>
          }
          groupBy: {
            args: Prisma.VoteItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteItemCountArgs<ExtArgs>
            result: $Utils.Optional<VoteItemCountAggregateOutputType> | number
          }
        }
      }
      VoteSubmission: {
        payload: Prisma.$VoteSubmissionPayload<ExtArgs>
        fields: Prisma.VoteSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          findFirst: {
            args: Prisma.VoteSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          findMany: {
            args: Prisma.VoteSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>[]
          }
          create: {
            args: Prisma.VoteSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          createMany: {
            args: Prisma.VoteSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>[]
          }
          delete: {
            args: Prisma.VoteSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          update: {
            args: Prisma.VoteSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.VoteSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoteSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.VoteSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoteSubmissionPayload>
          }
          aggregate: {
            args: Prisma.VoteSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoteSubmission>
          }
          groupBy: {
            args: Prisma.VoteSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<VoteSubmissionCountAggregateOutputType> | number
          }
        }
      }
      PredictionRound: {
        payload: Prisma.$PredictionRoundPayload<ExtArgs>
        fields: Prisma.PredictionRoundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredictionRoundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredictionRoundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          findFirst: {
            args: Prisma.PredictionRoundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredictionRoundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          findMany: {
            args: Prisma.PredictionRoundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>[]
          }
          create: {
            args: Prisma.PredictionRoundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          createMany: {
            args: Prisma.PredictionRoundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredictionRoundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>[]
          }
          delete: {
            args: Prisma.PredictionRoundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          update: {
            args: Prisma.PredictionRoundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          deleteMany: {
            args: Prisma.PredictionRoundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredictionRoundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PredictionRoundUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>[]
          }
          upsert: {
            args: Prisma.PredictionRoundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionRoundPayload>
          }
          aggregate: {
            args: Prisma.PredictionRoundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredictionRound>
          }
          groupBy: {
            args: Prisma.PredictionRoundGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredictionRoundGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredictionRoundCountArgs<ExtArgs>
            result: $Utils.Optional<PredictionRoundCountAggregateOutputType> | number
          }
        }
      }
      PredictionConfig: {
        payload: Prisma.$PredictionConfigPayload<ExtArgs>
        fields: Prisma.PredictionConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredictionConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredictionConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          findFirst: {
            args: Prisma.PredictionConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredictionConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          findMany: {
            args: Prisma.PredictionConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>[]
          }
          create: {
            args: Prisma.PredictionConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          createMany: {
            args: Prisma.PredictionConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredictionConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>[]
          }
          delete: {
            args: Prisma.PredictionConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          update: {
            args: Prisma.PredictionConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          deleteMany: {
            args: Prisma.PredictionConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredictionConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PredictionConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>[]
          }
          upsert: {
            args: Prisma.PredictionConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionConfigPayload>
          }
          aggregate: {
            args: Prisma.PredictionConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredictionConfig>
          }
          groupBy: {
            args: Prisma.PredictionConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredictionConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredictionConfigCountArgs<ExtArgs>
            result: $Utils.Optional<PredictionConfigCountAggregateOutputType> | number
          }
        }
      }
      PredictionQuestion: {
        payload: Prisma.$PredictionQuestionPayload<ExtArgs>
        fields: Prisma.PredictionQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredictionQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredictionQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          findFirst: {
            args: Prisma.PredictionQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredictionQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          findMany: {
            args: Prisma.PredictionQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>[]
          }
          create: {
            args: Prisma.PredictionQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          createMany: {
            args: Prisma.PredictionQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredictionQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>[]
          }
          delete: {
            args: Prisma.PredictionQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          update: {
            args: Prisma.PredictionQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          deleteMany: {
            args: Prisma.PredictionQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredictionQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PredictionQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>[]
          }
          upsert: {
            args: Prisma.PredictionQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionQuestionPayload>
          }
          aggregate: {
            args: Prisma.PredictionQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredictionQuestion>
          }
          groupBy: {
            args: Prisma.PredictionQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredictionQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredictionQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<PredictionQuestionCountAggregateOutputType> | number
          }
        }
      }
      PredictionResult: {
        payload: Prisma.$PredictionResultPayload<ExtArgs>
        fields: Prisma.PredictionResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredictionResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredictionResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          findFirst: {
            args: Prisma.PredictionResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredictionResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          findMany: {
            args: Prisma.PredictionResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>[]
          }
          create: {
            args: Prisma.PredictionResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          createMany: {
            args: Prisma.PredictionResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredictionResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>[]
          }
          delete: {
            args: Prisma.PredictionResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          update: {
            args: Prisma.PredictionResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          deleteMany: {
            args: Prisma.PredictionResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredictionResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PredictionResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>[]
          }
          upsert: {
            args: Prisma.PredictionResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredictionResultPayload>
          }
          aggregate: {
            args: Prisma.PredictionResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredictionResult>
          }
          groupBy: {
            args: Prisma.PredictionResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredictionResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredictionResultCountArgs<ExtArgs>
            result: $Utils.Optional<PredictionResultCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    event?: EventOmit
    emailRecord?: EmailRecordOmit
    userSession?: UserSessionOmit
    game?: GameOmit
    gameConfig?: GameConfigOmit
    task?: TaskOmit
    taskConfig?: TaskConfigOmit
    taskSelection?: TaskSelectionOmit
    taskResult?: TaskResultOmit
    taskSubmission?: TaskSubmissionOmit
    voteContent?: VoteContentOmit
    voteItem?: VoteItemOmit
    voteSubmission?: VoteSubmissionOmit
    predictionRound?: PredictionRoundOmit
    predictionConfig?: PredictionConfigOmit
    predictionQuestion?: PredictionQuestionOmit
    predictionResult?: PredictionResultOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    attendees: number
    game: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendees?: boolean | EventCountOutputTypeCountAttendeesArgs
    game?: boolean | EventCountOutputTypeCountGameArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailRecordWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type EmailRecordCountOutputType
   */

  export type EmailRecordCountOutputType = {
    events: number
    sessions: number
  }

  export type EmailRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EmailRecordCountOutputTypeCountEventsArgs
    sessions?: boolean | EmailRecordCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * EmailRecordCountOutputType without action
   */
  export type EmailRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecordCountOutputType
     */
    select?: EmailRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailRecordCountOutputType without action
   */
  export type EmailRecordCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * EmailRecordCountOutputType without action
   */
  export type EmailRecordCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }


  /**
   * Count Type UserSessionCountOutputType
   */

  export type UserSessionCountOutputType = {
    tasks: number
    votes: number
    predictions: number
  }

  export type UserSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | UserSessionCountOutputTypeCountTasksArgs
    votes?: boolean | UserSessionCountOutputTypeCountVotesArgs
    predictions?: boolean | UserSessionCountOutputTypeCountPredictionsArgs
  }

  // Custom InputTypes
  /**
   * UserSessionCountOutputType without action
   */
  export type UserSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSessionCountOutputType
     */
    select?: UserSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserSessionCountOutputType without action
   */
  export type UserSessionCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSubmissionWhereInput
  }

  /**
   * UserSessionCountOutputType without action
   */
  export type UserSessionCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteSubmissionWhereInput
  }

  /**
   * UserSessionCountOutputType without action
   */
  export type UserSessionCountOutputTypeCountPredictionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionResultWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    playerSessions: number
    tasks: number
    taskResult: number
    predictionRounds: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playerSessions?: boolean | GameCountOutputTypeCountPlayerSessionsArgs
    tasks?: boolean | GameCountOutputTypeCountTasksArgs
    taskResult?: boolean | GameCountOutputTypeCountTaskResultArgs
    predictionRounds?: boolean | GameCountOutputTypeCountPredictionRoundsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountPlayerSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSelectionWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountTaskResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskResultWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountPredictionRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionRoundWhereInput
  }


  /**
   * Count Type GameConfigCountOutputType
   */

  export type GameConfigCountOutputType = {
    Games: number
  }

  export type GameConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Games?: boolean | GameConfigCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * GameConfigCountOutputType without action
   */
  export type GameConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfigCountOutputType
     */
    select?: GameConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameConfigCountOutputType without action
   */
  export type GameConfigCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    selected: number
    submissions: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selected?: boolean | TaskCountOutputTypeCountSelectedArgs
    submissions?: boolean | TaskCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountSelectedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSelectionWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSubmissionWhereInput
  }


  /**
   * Count Type TaskConfigCountOutputType
   */

  export type TaskConfigCountOutputType = {
    task: number
  }

  export type TaskConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskConfigCountOutputTypeCountTaskArgs
  }

  // Custom InputTypes
  /**
   * TaskConfigCountOutputType without action
   */
  export type TaskConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfigCountOutputType
     */
    select?: TaskConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskConfigCountOutputType without action
   */
  export type TaskConfigCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskSelectionCountOutputType
   */

  export type TaskSelectionCountOutputType = {
    task: number
  }

  export type TaskSelectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskSelectionCountOutputTypeCountTaskArgs
  }

  // Custom InputTypes
  /**
   * TaskSelectionCountOutputType without action
   */
  export type TaskSelectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelectionCountOutputType
     */
    select?: TaskSelectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskSelectionCountOutputType without action
   */
  export type TaskSelectionCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskResultCountOutputType
   */

  export type TaskResultCountOutputType = {
    submissions: number
  }

  export type TaskResultCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | TaskResultCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * TaskResultCountOutputType without action
   */
  export type TaskResultCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResultCountOutputType
     */
    select?: TaskResultCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskResultCountOutputType without action
   */
  export type TaskResultCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSubmissionWhereInput
  }


  /**
   * Count Type VoteContentCountOutputType
   */

  export type VoteContentCountOutputType = {
    items: number
  }

  export type VoteContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | VoteContentCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * VoteContentCountOutputType without action
   */
  export type VoteContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContentCountOutputType
     */
    select?: VoteContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VoteContentCountOutputType without action
   */
  export type VoteContentCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteItemWhereInput
  }


  /**
   * Count Type VoteItemCountOutputType
   */

  export type VoteItemCountOutputType = {
    submissions: number
  }

  export type VoteItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | VoteItemCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * VoteItemCountOutputType without action
   */
  export type VoteItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItemCountOutputType
     */
    select?: VoteItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VoteItemCountOutputType without action
   */
  export type VoteItemCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteSubmissionWhereInput
  }


  /**
   * Count Type PredictionRoundCountOutputType
   */

  export type PredictionRoundCountOutputType = {
    results: number
  }

  export type PredictionRoundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    results?: boolean | PredictionRoundCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * PredictionRoundCountOutputType without action
   */
  export type PredictionRoundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRoundCountOutputType
     */
    select?: PredictionRoundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PredictionRoundCountOutputType without action
   */
  export type PredictionRoundCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionResultWhereInput
  }


  /**
   * Count Type PredictionConfigCountOutputType
   */

  export type PredictionConfigCountOutputType = {
    questions: number
  }

  export type PredictionConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | PredictionConfigCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * PredictionConfigCountOutputType without action
   */
  export type PredictionConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfigCountOutputType
     */
    select?: PredictionConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PredictionConfigCountOutputType without action
   */
  export type PredictionConfigCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionQuestionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    link: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    link: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    link: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    link?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    link?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    link?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    link: string | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    game?: boolean | Event$gameArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    link?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "link", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    game?: boolean | Event$gameArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      attendees: Prisma.$EmailRecordPayload<ExtArgs>[]
      game: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      link: string | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendees<T extends Event$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    game<T extends Event$gameArgs<ExtArgs> = {}>(args?: Subset<T, Event$gameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly link: FieldRef<"Event", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data?: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.attendees
   */
  export type Event$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    where?: EmailRecordWhereInput
    orderBy?: EmailRecordOrderByWithRelationInput | EmailRecordOrderByWithRelationInput[]
    cursor?: EmailRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailRecordScalarFieldEnum | EmailRecordScalarFieldEnum[]
  }

  /**
   * Event.game
   */
  export type Event$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model EmailRecord
   */

  export type AggregateEmailRecord = {
    _count: EmailRecordCountAggregateOutputType | null
    _min: EmailRecordMinAggregateOutputType | null
    _max: EmailRecordMaxAggregateOutputType | null
  }

  export type EmailRecordMinAggregateOutputType = {
    id: string | null
    address: string | null
    createdAt: Date | null
  }

  export type EmailRecordMaxAggregateOutputType = {
    id: string | null
    address: string | null
    createdAt: Date | null
  }

  export type EmailRecordCountAggregateOutputType = {
    id: number
    address: number
    createdAt: number
    _all: number
  }


  export type EmailRecordMinAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
  }

  export type EmailRecordMaxAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
  }

  export type EmailRecordCountAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
    _all?: true
  }

  export type EmailRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailRecord to aggregate.
     */
    where?: EmailRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailRecords to fetch.
     */
    orderBy?: EmailRecordOrderByWithRelationInput | EmailRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailRecords
    **/
    _count?: true | EmailRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailRecordMaxAggregateInputType
  }

  export type GetEmailRecordAggregateType<T extends EmailRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailRecord[P]>
      : GetScalarType<T[P], AggregateEmailRecord[P]>
  }




  export type EmailRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailRecordWhereInput
    orderBy?: EmailRecordOrderByWithAggregationInput | EmailRecordOrderByWithAggregationInput[]
    by: EmailRecordScalarFieldEnum[] | EmailRecordScalarFieldEnum
    having?: EmailRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailRecordCountAggregateInputType | true
    _min?: EmailRecordMinAggregateInputType
    _max?: EmailRecordMaxAggregateInputType
  }

  export type EmailRecordGroupByOutputType = {
    id: string
    address: string
    createdAt: Date
    _count: EmailRecordCountAggregateOutputType | null
    _min: EmailRecordMinAggregateOutputType | null
    _max: EmailRecordMaxAggregateOutputType | null
  }

  type GetEmailRecordGroupByPayload<T extends EmailRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailRecordGroupByOutputType[P]>
            : GetScalarType<T[P], EmailRecordGroupByOutputType[P]>
        }
      >
    >


  export type EmailRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    createdAt?: boolean
    events?: boolean | EmailRecord$eventsArgs<ExtArgs>
    sessions?: boolean | EmailRecord$sessionsArgs<ExtArgs>
    _count?: boolean | EmailRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailRecord"]>

  export type EmailRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["emailRecord"]>

  export type EmailRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["emailRecord"]>

  export type EmailRecordSelectScalar = {
    id?: boolean
    address?: boolean
    createdAt?: boolean
  }

  export type EmailRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "createdAt", ExtArgs["result"]["emailRecord"]>
  export type EmailRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EmailRecord$eventsArgs<ExtArgs>
    sessions?: boolean | EmailRecord$sessionsArgs<ExtArgs>
    _count?: boolean | EmailRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EmailRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmailRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailRecord"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      createdAt: Date
    }, ExtArgs["result"]["emailRecord"]>
    composites: {}
  }

  type EmailRecordGetPayload<S extends boolean | null | undefined | EmailRecordDefaultArgs> = $Result.GetResult<Prisma.$EmailRecordPayload, S>

  type EmailRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailRecordCountAggregateInputType | true
    }

  export interface EmailRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailRecord'], meta: { name: 'EmailRecord' } }
    /**
     * Find zero or one EmailRecord that matches the filter.
     * @param {EmailRecordFindUniqueArgs} args - Arguments to find a EmailRecord
     * @example
     * // Get one EmailRecord
     * const emailRecord = await prisma.emailRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailRecordFindUniqueArgs>(args: SelectSubset<T, EmailRecordFindUniqueArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailRecordFindUniqueOrThrowArgs} args - Arguments to find a EmailRecord
     * @example
     * // Get one EmailRecord
     * const emailRecord = await prisma.emailRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordFindFirstArgs} args - Arguments to find a EmailRecord
     * @example
     * // Get one EmailRecord
     * const emailRecord = await prisma.emailRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailRecordFindFirstArgs>(args?: SelectSubset<T, EmailRecordFindFirstArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordFindFirstOrThrowArgs} args - Arguments to find a EmailRecord
     * @example
     * // Get one EmailRecord
     * const emailRecord = await prisma.emailRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailRecords
     * const emailRecords = await prisma.emailRecord.findMany()
     * 
     * // Get first 10 EmailRecords
     * const emailRecords = await prisma.emailRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailRecordWithIdOnly = await prisma.emailRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailRecordFindManyArgs>(args?: SelectSubset<T, EmailRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailRecord.
     * @param {EmailRecordCreateArgs} args - Arguments to create a EmailRecord.
     * @example
     * // Create one EmailRecord
     * const EmailRecord = await prisma.emailRecord.create({
     *   data: {
     *     // ... data to create a EmailRecord
     *   }
     * })
     * 
     */
    create<T extends EmailRecordCreateArgs>(args: SelectSubset<T, EmailRecordCreateArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailRecords.
     * @param {EmailRecordCreateManyArgs} args - Arguments to create many EmailRecords.
     * @example
     * // Create many EmailRecords
     * const emailRecord = await prisma.emailRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailRecordCreateManyArgs>(args?: SelectSubset<T, EmailRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailRecords and returns the data saved in the database.
     * @param {EmailRecordCreateManyAndReturnArgs} args - Arguments to create many EmailRecords.
     * @example
     * // Create many EmailRecords
     * const emailRecord = await prisma.emailRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailRecords and only return the `id`
     * const emailRecordWithIdOnly = await prisma.emailRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailRecord.
     * @param {EmailRecordDeleteArgs} args - Arguments to delete one EmailRecord.
     * @example
     * // Delete one EmailRecord
     * const EmailRecord = await prisma.emailRecord.delete({
     *   where: {
     *     // ... filter to delete one EmailRecord
     *   }
     * })
     * 
     */
    delete<T extends EmailRecordDeleteArgs>(args: SelectSubset<T, EmailRecordDeleteArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailRecord.
     * @param {EmailRecordUpdateArgs} args - Arguments to update one EmailRecord.
     * @example
     * // Update one EmailRecord
     * const emailRecord = await prisma.emailRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailRecordUpdateArgs>(args: SelectSubset<T, EmailRecordUpdateArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailRecords.
     * @param {EmailRecordDeleteManyArgs} args - Arguments to filter EmailRecords to delete.
     * @example
     * // Delete a few EmailRecords
     * const { count } = await prisma.emailRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailRecordDeleteManyArgs>(args?: SelectSubset<T, EmailRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailRecords
     * const emailRecord = await prisma.emailRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailRecordUpdateManyArgs>(args: SelectSubset<T, EmailRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailRecords and returns the data updated in the database.
     * @param {EmailRecordUpdateManyAndReturnArgs} args - Arguments to update many EmailRecords.
     * @example
     * // Update many EmailRecords
     * const emailRecord = await prisma.emailRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailRecords and only return the `id`
     * const emailRecordWithIdOnly = await prisma.emailRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailRecord.
     * @param {EmailRecordUpsertArgs} args - Arguments to update or create a EmailRecord.
     * @example
     * // Update or create a EmailRecord
     * const emailRecord = await prisma.emailRecord.upsert({
     *   create: {
     *     // ... data to create a EmailRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailRecord we want to update
     *   }
     * })
     */
    upsert<T extends EmailRecordUpsertArgs>(args: SelectSubset<T, EmailRecordUpsertArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordCountArgs} args - Arguments to filter EmailRecords to count.
     * @example
     * // Count the number of EmailRecords
     * const count = await prisma.emailRecord.count({
     *   where: {
     *     // ... the filter for the EmailRecords we want to count
     *   }
     * })
    **/
    count<T extends EmailRecordCountArgs>(
      args?: Subset<T, EmailRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailRecordAggregateArgs>(args: Subset<T, EmailRecordAggregateArgs>): Prisma.PrismaPromise<GetEmailRecordAggregateType<T>>

    /**
     * Group by EmailRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailRecordGroupByArgs['orderBy'] }
        : { orderBy?: EmailRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailRecord model
   */
  readonly fields: EmailRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends EmailRecord$eventsArgs<ExtArgs> = {}>(args?: Subset<T, EmailRecord$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends EmailRecord$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, EmailRecord$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailRecord model
   */
  interface EmailRecordFieldRefs {
    readonly id: FieldRef<"EmailRecord", 'String'>
    readonly address: FieldRef<"EmailRecord", 'String'>
    readonly createdAt: FieldRef<"EmailRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailRecord findUnique
   */
  export type EmailRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailRecord to fetch.
     */
    where: EmailRecordWhereUniqueInput
  }

  /**
   * EmailRecord findUniqueOrThrow
   */
  export type EmailRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailRecord to fetch.
     */
    where: EmailRecordWhereUniqueInput
  }

  /**
   * EmailRecord findFirst
   */
  export type EmailRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailRecord to fetch.
     */
    where?: EmailRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailRecords to fetch.
     */
    orderBy?: EmailRecordOrderByWithRelationInput | EmailRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailRecords.
     */
    cursor?: EmailRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailRecords.
     */
    distinct?: EmailRecordScalarFieldEnum | EmailRecordScalarFieldEnum[]
  }

  /**
   * EmailRecord findFirstOrThrow
   */
  export type EmailRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailRecord to fetch.
     */
    where?: EmailRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailRecords to fetch.
     */
    orderBy?: EmailRecordOrderByWithRelationInput | EmailRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailRecords.
     */
    cursor?: EmailRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailRecords.
     */
    distinct?: EmailRecordScalarFieldEnum | EmailRecordScalarFieldEnum[]
  }

  /**
   * EmailRecord findMany
   */
  export type EmailRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailRecords to fetch.
     */
    where?: EmailRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailRecords to fetch.
     */
    orderBy?: EmailRecordOrderByWithRelationInput | EmailRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailRecords.
     */
    cursor?: EmailRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailRecords.
     */
    skip?: number
    distinct?: EmailRecordScalarFieldEnum | EmailRecordScalarFieldEnum[]
  }

  /**
   * EmailRecord create
   */
  export type EmailRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailRecord.
     */
    data: XOR<EmailRecordCreateInput, EmailRecordUncheckedCreateInput>
  }

  /**
   * EmailRecord createMany
   */
  export type EmailRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailRecords.
     */
    data: EmailRecordCreateManyInput | EmailRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailRecord createManyAndReturn
   */
  export type EmailRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * The data used to create many EmailRecords.
     */
    data: EmailRecordCreateManyInput | EmailRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailRecord update
   */
  export type EmailRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailRecord.
     */
    data: XOR<EmailRecordUpdateInput, EmailRecordUncheckedUpdateInput>
    /**
     * Choose, which EmailRecord to update.
     */
    where: EmailRecordWhereUniqueInput
  }

  /**
   * EmailRecord updateMany
   */
  export type EmailRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailRecords.
     */
    data: XOR<EmailRecordUpdateManyMutationInput, EmailRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmailRecords to update
     */
    where?: EmailRecordWhereInput
    /**
     * Limit how many EmailRecords to update.
     */
    limit?: number
  }

  /**
   * EmailRecord updateManyAndReturn
   */
  export type EmailRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * The data used to update EmailRecords.
     */
    data: XOR<EmailRecordUpdateManyMutationInput, EmailRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmailRecords to update
     */
    where?: EmailRecordWhereInput
    /**
     * Limit how many EmailRecords to update.
     */
    limit?: number
  }

  /**
   * EmailRecord upsert
   */
  export type EmailRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailRecord to update in case it exists.
     */
    where: EmailRecordWhereUniqueInput
    /**
     * In case the EmailRecord found by the `where` argument doesn't exist, create a new EmailRecord with this data.
     */
    create: XOR<EmailRecordCreateInput, EmailRecordUncheckedCreateInput>
    /**
     * In case the EmailRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailRecordUpdateInput, EmailRecordUncheckedUpdateInput>
  }

  /**
   * EmailRecord delete
   */
  export type EmailRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
    /**
     * Filter which EmailRecord to delete.
     */
    where: EmailRecordWhereUniqueInput
  }

  /**
   * EmailRecord deleteMany
   */
  export type EmailRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailRecords to delete
     */
    where?: EmailRecordWhereInput
    /**
     * Limit how many EmailRecords to delete.
     */
    limit?: number
  }

  /**
   * EmailRecord.events
   */
  export type EmailRecord$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * EmailRecord.sessions
   */
  export type EmailRecord$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * EmailRecord without action
   */
  export type EmailRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailRecord
     */
    select?: EmailRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailRecord
     */
    omit?: EmailRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailRecordInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _avg: UserSessionAvgAggregateOutputType | null
    _sum: UserSessionSumAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type UserSessionSumAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: number | null
    emailId: string | null
    lastActive: Date | null
    status: $Enums.SessionStatus | null
    gameId: number | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: number | null
    emailId: string | null
    lastActive: Date | null
    status: $Enums.SessionStatus | null
    gameId: number | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    emailId: number
    lastActive: number
    status: number
    gameId: number
    _all: number
  }


  export type UserSessionAvgAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type UserSessionSumAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type UserSessionMinAggregateInputType = {
    id?: true
    emailId?: true
    lastActive?: true
    status?: true
    gameId?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    emailId?: true
    lastActive?: true
    status?: true
    gameId?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    emailId?: true
    lastActive?: true
    status?: true
    gameId?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _avg?: UserSessionAvgAggregateInputType
    _sum?: UserSessionSumAggregateInputType
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: number
    emailId: string
    lastActive: Date
    status: $Enums.SessionStatus
    gameId: number
    _count: UserSessionCountAggregateOutputType | null
    _avg: UserSessionAvgAggregateOutputType | null
    _sum: UserSessionSumAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    emailId?: boolean
    lastActive?: boolean
    status?: boolean
    gameId?: boolean
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    tasks?: boolean | UserSession$tasksArgs<ExtArgs>
    votes?: boolean | UserSession$votesArgs<ExtArgs>
    predictions?: boolean | UserSession$predictionsArgs<ExtArgs>
    _count?: boolean | UserSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    emailId?: boolean
    lastActive?: boolean
    status?: boolean
    gameId?: boolean
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    emailId?: boolean
    lastActive?: boolean
    status?: boolean
    gameId?: boolean
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    emailId?: boolean
    lastActive?: boolean
    status?: boolean
    gameId?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "emailId" | "lastActive" | "status" | "gameId", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    tasks?: boolean | UserSession$tasksArgs<ExtArgs>
    votes?: boolean | UserSession$votesArgs<ExtArgs>
    predictions?: boolean | UserSession$predictionsArgs<ExtArgs>
    _count?: boolean | UserSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    email?: boolean | EmailRecordDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      email: Prisma.$EmailRecordPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
      tasks: Prisma.$TaskSubmissionPayload<ExtArgs>[]
      votes: Prisma.$VoteSubmissionPayload<ExtArgs>[]
      predictions: Prisma.$PredictionResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      emailId: string
      lastActive: Date
      status: $Enums.SessionStatus
      gameId: number
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    email<T extends EmailRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailRecordDefaultArgs<ExtArgs>>): Prisma__EmailRecordClient<$Result.GetResult<Prisma.$EmailRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends UserSession$tasksArgs<ExtArgs> = {}>(args?: Subset<T, UserSession$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votes<T extends UserSession$votesArgs<ExtArgs> = {}>(args?: Subset<T, UserSession$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    predictions<T extends UserSession$predictionsArgs<ExtArgs> = {}>(args?: Subset<T, UserSession$predictionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'Int'>
    readonly emailId: FieldRef<"UserSession", 'String'>
    readonly lastActive: FieldRef<"UserSession", 'DateTime'>
    readonly status: FieldRef<"UserSession", 'SessionStatus'>
    readonly gameId: FieldRef<"UserSession", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession.tasks
   */
  export type UserSession$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    where?: TaskSubmissionWhereInput
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    cursor?: TaskSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * UserSession.votes
   */
  export type UserSession$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    where?: VoteSubmissionWhereInput
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    cursor?: VoteSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteSubmissionScalarFieldEnum | VoteSubmissionScalarFieldEnum[]
  }

  /**
   * UserSession.predictions
   */
  export type UserSession$predictionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    where?: PredictionResultWhereInput
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    cursor?: PredictionResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredictionResultScalarFieldEnum | PredictionResultScalarFieldEnum[]
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    configId: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    configId: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    eventId: string | null
    configId: number | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    eventId: string | null
    configId: number | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    eventId: number
    configId: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    configId?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    configId?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    eventId?: true
    configId?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    eventId?: true
    configId?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    eventId?: true
    configId?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    eventId: string
    configId: number
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    configId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
    playerSessions?: boolean | Game$playerSessionsArgs<ExtArgs>
    tasks?: boolean | Game$tasksArgs<ExtArgs>
    taskResult?: boolean | Game$taskResultArgs<ExtArgs>
    predictionRounds?: boolean | Game$predictionRoundsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    configId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    configId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    eventId?: boolean
    configId?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "configId", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
    playerSessions?: boolean | Game$playerSessionsArgs<ExtArgs>
    tasks?: boolean | Game$tasksArgs<ExtArgs>
    taskResult?: boolean | Game$taskResultArgs<ExtArgs>
    predictionRounds?: boolean | Game$predictionRoundsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
  }
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    config?: boolean | GameConfigDefaultArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      config: Prisma.$GameConfigPayload<ExtArgs>
      playerSessions: Prisma.$UserSessionPayload<ExtArgs>[]
      tasks: Prisma.$TaskSelectionPayload<ExtArgs>[]
      taskResult: Prisma.$TaskResultPayload<ExtArgs>[]
      predictionRounds: Prisma.$PredictionRoundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: string
      configId: number
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    config<T extends GameConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameConfigDefaultArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    playerSessions<T extends Game$playerSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Game$playerSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends Game$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Game$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    taskResult<T extends Game$taskResultArgs<ExtArgs> = {}>(args?: Subset<T, Game$taskResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    predictionRounds<T extends Game$predictionRoundsArgs<ExtArgs> = {}>(args?: Subset<T, Game$predictionRoundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly eventId: FieldRef<"Game", 'String'>
    readonly configId: FieldRef<"Game", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.playerSessions
   */
  export type Game$playerSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * Game.tasks
   */
  export type Game$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    where?: TaskSelectionWhereInput
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    cursor?: TaskSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskSelectionScalarFieldEnum | TaskSelectionScalarFieldEnum[]
  }

  /**
   * Game.taskResult
   */
  export type Game$taskResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    where?: TaskResultWhereInput
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    cursor?: TaskResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * Game.predictionRounds
   */
  export type Game$predictionRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    where?: PredictionRoundWhereInput
    orderBy?: PredictionRoundOrderByWithRelationInput | PredictionRoundOrderByWithRelationInput[]
    cursor?: PredictionRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredictionRoundScalarFieldEnum | PredictionRoundScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model GameConfig
   */

  export type AggregateGameConfig = {
    _count: GameConfigCountAggregateOutputType | null
    _avg: GameConfigAvgAggregateOutputType | null
    _sum: GameConfigSumAggregateOutputType | null
    _min: GameConfigMinAggregateOutputType | null
    _max: GameConfigMaxAggregateOutputType | null
  }

  export type GameConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type GameConfigSumAggregateOutputType = {
    id: number | null
  }

  export type GameConfigMinAggregateOutputType = {
    id: number | null
    duration: Date | null
  }

  export type GameConfigMaxAggregateOutputType = {
    id: number | null
    duration: Date | null
  }

  export type GameConfigCountAggregateOutputType = {
    id: number
    duration: number
    _all: number
  }


  export type GameConfigAvgAggregateInputType = {
    id?: true
  }

  export type GameConfigSumAggregateInputType = {
    id?: true
  }

  export type GameConfigMinAggregateInputType = {
    id?: true
    duration?: true
  }

  export type GameConfigMaxAggregateInputType = {
    id?: true
    duration?: true
  }

  export type GameConfigCountAggregateInputType = {
    id?: true
    duration?: true
    _all?: true
  }

  export type GameConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameConfig to aggregate.
     */
    where?: GameConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameConfigs to fetch.
     */
    orderBy?: GameConfigOrderByWithRelationInput | GameConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameConfigs
    **/
    _count?: true | GameConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameConfigMaxAggregateInputType
  }

  export type GetGameConfigAggregateType<T extends GameConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateGameConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameConfig[P]>
      : GetScalarType<T[P], AggregateGameConfig[P]>
  }




  export type GameConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameConfigWhereInput
    orderBy?: GameConfigOrderByWithAggregationInput | GameConfigOrderByWithAggregationInput[]
    by: GameConfigScalarFieldEnum[] | GameConfigScalarFieldEnum
    having?: GameConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameConfigCountAggregateInputType | true
    _avg?: GameConfigAvgAggregateInputType
    _sum?: GameConfigSumAggregateInputType
    _min?: GameConfigMinAggregateInputType
    _max?: GameConfigMaxAggregateInputType
  }

  export type GameConfigGroupByOutputType = {
    id: number
    duration: Date
    _count: GameConfigCountAggregateOutputType | null
    _avg: GameConfigAvgAggregateOutputType | null
    _sum: GameConfigSumAggregateOutputType | null
    _min: GameConfigMinAggregateOutputType | null
    _max: GameConfigMaxAggregateOutputType | null
  }

  type GetGameConfigGroupByPayload<T extends GameConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameConfigGroupByOutputType[P]>
            : GetScalarType<T[P], GameConfigGroupByOutputType[P]>
        }
      >
    >


  export type GameConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    Games?: boolean | GameConfig$GamesArgs<ExtArgs>
    _count?: boolean | GameConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameConfig"]>

  export type GameConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
  }, ExtArgs["result"]["gameConfig"]>

  export type GameConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
  }, ExtArgs["result"]["gameConfig"]>

  export type GameConfigSelectScalar = {
    id?: boolean
    duration?: boolean
  }

  export type GameConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "duration", ExtArgs["result"]["gameConfig"]>
  export type GameConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Games?: boolean | GameConfig$GamesArgs<ExtArgs>
    _count?: boolean | GameConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameConfig"
    objects: {
      Games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      duration: Date
    }, ExtArgs["result"]["gameConfig"]>
    composites: {}
  }

  type GameConfigGetPayload<S extends boolean | null | undefined | GameConfigDefaultArgs> = $Result.GetResult<Prisma.$GameConfigPayload, S>

  type GameConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameConfigCountAggregateInputType | true
    }

  export interface GameConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameConfig'], meta: { name: 'GameConfig' } }
    /**
     * Find zero or one GameConfig that matches the filter.
     * @param {GameConfigFindUniqueArgs} args - Arguments to find a GameConfig
     * @example
     * // Get one GameConfig
     * const gameConfig = await prisma.gameConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameConfigFindUniqueArgs>(args: SelectSubset<T, GameConfigFindUniqueArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameConfigFindUniqueOrThrowArgs} args - Arguments to find a GameConfig
     * @example
     * // Get one GameConfig
     * const gameConfig = await prisma.gameConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, GameConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigFindFirstArgs} args - Arguments to find a GameConfig
     * @example
     * // Get one GameConfig
     * const gameConfig = await prisma.gameConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameConfigFindFirstArgs>(args?: SelectSubset<T, GameConfigFindFirstArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigFindFirstOrThrowArgs} args - Arguments to find a GameConfig
     * @example
     * // Get one GameConfig
     * const gameConfig = await prisma.gameConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, GameConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameConfigs
     * const gameConfigs = await prisma.gameConfig.findMany()
     * 
     * // Get first 10 GameConfigs
     * const gameConfigs = await prisma.gameConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameConfigWithIdOnly = await prisma.gameConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameConfigFindManyArgs>(args?: SelectSubset<T, GameConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameConfig.
     * @param {GameConfigCreateArgs} args - Arguments to create a GameConfig.
     * @example
     * // Create one GameConfig
     * const GameConfig = await prisma.gameConfig.create({
     *   data: {
     *     // ... data to create a GameConfig
     *   }
     * })
     * 
     */
    create<T extends GameConfigCreateArgs>(args: SelectSubset<T, GameConfigCreateArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameConfigs.
     * @param {GameConfigCreateManyArgs} args - Arguments to create many GameConfigs.
     * @example
     * // Create many GameConfigs
     * const gameConfig = await prisma.gameConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameConfigCreateManyArgs>(args?: SelectSubset<T, GameConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameConfigs and returns the data saved in the database.
     * @param {GameConfigCreateManyAndReturnArgs} args - Arguments to create many GameConfigs.
     * @example
     * // Create many GameConfigs
     * const gameConfig = await prisma.gameConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameConfigs and only return the `id`
     * const gameConfigWithIdOnly = await prisma.gameConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, GameConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameConfig.
     * @param {GameConfigDeleteArgs} args - Arguments to delete one GameConfig.
     * @example
     * // Delete one GameConfig
     * const GameConfig = await prisma.gameConfig.delete({
     *   where: {
     *     // ... filter to delete one GameConfig
     *   }
     * })
     * 
     */
    delete<T extends GameConfigDeleteArgs>(args: SelectSubset<T, GameConfigDeleteArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameConfig.
     * @param {GameConfigUpdateArgs} args - Arguments to update one GameConfig.
     * @example
     * // Update one GameConfig
     * const gameConfig = await prisma.gameConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameConfigUpdateArgs>(args: SelectSubset<T, GameConfigUpdateArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameConfigs.
     * @param {GameConfigDeleteManyArgs} args - Arguments to filter GameConfigs to delete.
     * @example
     * // Delete a few GameConfigs
     * const { count } = await prisma.gameConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameConfigDeleteManyArgs>(args?: SelectSubset<T, GameConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameConfigs
     * const gameConfig = await prisma.gameConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameConfigUpdateManyArgs>(args: SelectSubset<T, GameConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameConfigs and returns the data updated in the database.
     * @param {GameConfigUpdateManyAndReturnArgs} args - Arguments to update many GameConfigs.
     * @example
     * // Update many GameConfigs
     * const gameConfig = await prisma.gameConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameConfigs and only return the `id`
     * const gameConfigWithIdOnly = await prisma.gameConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, GameConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameConfig.
     * @param {GameConfigUpsertArgs} args - Arguments to update or create a GameConfig.
     * @example
     * // Update or create a GameConfig
     * const gameConfig = await prisma.gameConfig.upsert({
     *   create: {
     *     // ... data to create a GameConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameConfig we want to update
     *   }
     * })
     */
    upsert<T extends GameConfigUpsertArgs>(args: SelectSubset<T, GameConfigUpsertArgs<ExtArgs>>): Prisma__GameConfigClient<$Result.GetResult<Prisma.$GameConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigCountArgs} args - Arguments to filter GameConfigs to count.
     * @example
     * // Count the number of GameConfigs
     * const count = await prisma.gameConfig.count({
     *   where: {
     *     // ... the filter for the GameConfigs we want to count
     *   }
     * })
    **/
    count<T extends GameConfigCountArgs>(
      args?: Subset<T, GameConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameConfigAggregateArgs>(args: Subset<T, GameConfigAggregateArgs>): Prisma.PrismaPromise<GetGameConfigAggregateType<T>>

    /**
     * Group by GameConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameConfigGroupByArgs['orderBy'] }
        : { orderBy?: GameConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameConfig model
   */
  readonly fields: GameConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Games<T extends GameConfig$GamesArgs<ExtArgs> = {}>(args?: Subset<T, GameConfig$GamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameConfig model
   */
  interface GameConfigFieldRefs {
    readonly id: FieldRef<"GameConfig", 'Int'>
    readonly duration: FieldRef<"GameConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameConfig findUnique
   */
  export type GameConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter, which GameConfig to fetch.
     */
    where: GameConfigWhereUniqueInput
  }

  /**
   * GameConfig findUniqueOrThrow
   */
  export type GameConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter, which GameConfig to fetch.
     */
    where: GameConfigWhereUniqueInput
  }

  /**
   * GameConfig findFirst
   */
  export type GameConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter, which GameConfig to fetch.
     */
    where?: GameConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameConfigs to fetch.
     */
    orderBy?: GameConfigOrderByWithRelationInput | GameConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameConfigs.
     */
    cursor?: GameConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameConfigs.
     */
    distinct?: GameConfigScalarFieldEnum | GameConfigScalarFieldEnum[]
  }

  /**
   * GameConfig findFirstOrThrow
   */
  export type GameConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter, which GameConfig to fetch.
     */
    where?: GameConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameConfigs to fetch.
     */
    orderBy?: GameConfigOrderByWithRelationInput | GameConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameConfigs.
     */
    cursor?: GameConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameConfigs.
     */
    distinct?: GameConfigScalarFieldEnum | GameConfigScalarFieldEnum[]
  }

  /**
   * GameConfig findMany
   */
  export type GameConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter, which GameConfigs to fetch.
     */
    where?: GameConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameConfigs to fetch.
     */
    orderBy?: GameConfigOrderByWithRelationInput | GameConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameConfigs.
     */
    cursor?: GameConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameConfigs.
     */
    skip?: number
    distinct?: GameConfigScalarFieldEnum | GameConfigScalarFieldEnum[]
  }

  /**
   * GameConfig create
   */
  export type GameConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a GameConfig.
     */
    data: XOR<GameConfigCreateInput, GameConfigUncheckedCreateInput>
  }

  /**
   * GameConfig createMany
   */
  export type GameConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameConfigs.
     */
    data: GameConfigCreateManyInput | GameConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameConfig createManyAndReturn
   */
  export type GameConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * The data used to create many GameConfigs.
     */
    data: GameConfigCreateManyInput | GameConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameConfig update
   */
  export type GameConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a GameConfig.
     */
    data: XOR<GameConfigUpdateInput, GameConfigUncheckedUpdateInput>
    /**
     * Choose, which GameConfig to update.
     */
    where: GameConfigWhereUniqueInput
  }

  /**
   * GameConfig updateMany
   */
  export type GameConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameConfigs.
     */
    data: XOR<GameConfigUpdateManyMutationInput, GameConfigUncheckedUpdateManyInput>
    /**
     * Filter which GameConfigs to update
     */
    where?: GameConfigWhereInput
    /**
     * Limit how many GameConfigs to update.
     */
    limit?: number
  }

  /**
   * GameConfig updateManyAndReturn
   */
  export type GameConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * The data used to update GameConfigs.
     */
    data: XOR<GameConfigUpdateManyMutationInput, GameConfigUncheckedUpdateManyInput>
    /**
     * Filter which GameConfigs to update
     */
    where?: GameConfigWhereInput
    /**
     * Limit how many GameConfigs to update.
     */
    limit?: number
  }

  /**
   * GameConfig upsert
   */
  export type GameConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the GameConfig to update in case it exists.
     */
    where: GameConfigWhereUniqueInput
    /**
     * In case the GameConfig found by the `where` argument doesn't exist, create a new GameConfig with this data.
     */
    create: XOR<GameConfigCreateInput, GameConfigUncheckedCreateInput>
    /**
     * In case the GameConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameConfigUpdateInput, GameConfigUncheckedUpdateInput>
  }

  /**
   * GameConfig delete
   */
  export type GameConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
    /**
     * Filter which GameConfig to delete.
     */
    where: GameConfigWhereUniqueInput
  }

  /**
   * GameConfig deleteMany
   */
  export type GameConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameConfigs to delete
     */
    where?: GameConfigWhereInput
    /**
     * Limit how many GameConfigs to delete.
     */
    limit?: number
  }

  /**
   * GameConfig.Games
   */
  export type GameConfig$GamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * GameConfig without action
   */
  export type GameConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameConfig
     */
    select?: GameConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameConfig
     */
    omit?: GameConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameConfigInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    configId: number | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    configId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    configId: number | null
    prompt: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    configId: number | null
    prompt: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    configId: number
    prompt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    configId?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    configId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    configId?: true
    prompt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    configId?: true
    prompt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    configId?: true
    prompt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: number
    configId: number
    prompt: string
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    prompt?: boolean
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
    selected?: boolean | Task$selectedArgs<ExtArgs>
    submissions?: boolean | Task$submissionsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    prompt?: boolean
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    prompt?: boolean
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    configId?: boolean
    prompt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "configId" | "prompt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
    selected?: boolean | Task$selectedArgs<ExtArgs>
    submissions?: boolean | Task$submissionsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | TaskConfigDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      config: Prisma.$TaskConfigPayload<ExtArgs>
      selected: Prisma.$TaskSelectionPayload<ExtArgs>[]
      submissions: Prisma.$TaskSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      configId: number
      prompt: string
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    config<T extends TaskConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskConfigDefaultArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    selected<T extends Task$selectedArgs<ExtArgs> = {}>(args?: Subset<T, Task$selectedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Task$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Task$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'Int'>
    readonly configId: FieldRef<"Task", 'Int'>
    readonly prompt: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.selected
   */
  export type Task$selectedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    where?: TaskSelectionWhereInput
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    cursor?: TaskSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskSelectionScalarFieldEnum | TaskSelectionScalarFieldEnum[]
  }

  /**
   * Task.submissions
   */
  export type Task$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    where?: TaskSubmissionWhereInput
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    cursor?: TaskSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model TaskConfig
   */

  export type AggregateTaskConfig = {
    _count: TaskConfigCountAggregateOutputType | null
    _avg: TaskConfigAvgAggregateOutputType | null
    _sum: TaskConfigSumAggregateOutputType | null
    _min: TaskConfigMinAggregateOutputType | null
    _max: TaskConfigMaxAggregateOutputType | null
  }

  export type TaskConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type TaskConfigSumAggregateOutputType = {
    id: number | null
  }

  export type TaskConfigMinAggregateOutputType = {
    id: number | null
    duration: Date | null
    submissionType: $Enums.TaskSubmissionType | null
  }

  export type TaskConfigMaxAggregateOutputType = {
    id: number | null
    duration: Date | null
    submissionType: $Enums.TaskSubmissionType | null
  }

  export type TaskConfigCountAggregateOutputType = {
    id: number
    duration: number
    submissionType: number
    _all: number
  }


  export type TaskConfigAvgAggregateInputType = {
    id?: true
  }

  export type TaskConfigSumAggregateInputType = {
    id?: true
  }

  export type TaskConfigMinAggregateInputType = {
    id?: true
    duration?: true
    submissionType?: true
  }

  export type TaskConfigMaxAggregateInputType = {
    id?: true
    duration?: true
    submissionType?: true
  }

  export type TaskConfigCountAggregateInputType = {
    id?: true
    duration?: true
    submissionType?: true
    _all?: true
  }

  export type TaskConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskConfig to aggregate.
     */
    where?: TaskConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskConfigs to fetch.
     */
    orderBy?: TaskConfigOrderByWithRelationInput | TaskConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskConfigs
    **/
    _count?: true | TaskConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskConfigMaxAggregateInputType
  }

  export type GetTaskConfigAggregateType<T extends TaskConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskConfig[P]>
      : GetScalarType<T[P], AggregateTaskConfig[P]>
  }




  export type TaskConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskConfigWhereInput
    orderBy?: TaskConfigOrderByWithAggregationInput | TaskConfigOrderByWithAggregationInput[]
    by: TaskConfigScalarFieldEnum[] | TaskConfigScalarFieldEnum
    having?: TaskConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskConfigCountAggregateInputType | true
    _avg?: TaskConfigAvgAggregateInputType
    _sum?: TaskConfigSumAggregateInputType
    _min?: TaskConfigMinAggregateInputType
    _max?: TaskConfigMaxAggregateInputType
  }

  export type TaskConfigGroupByOutputType = {
    id: number
    duration: Date
    submissionType: $Enums.TaskSubmissionType
    _count: TaskConfigCountAggregateOutputType | null
    _avg: TaskConfigAvgAggregateOutputType | null
    _sum: TaskConfigSumAggregateOutputType | null
    _min: TaskConfigMinAggregateOutputType | null
    _max: TaskConfigMaxAggregateOutputType | null
  }

  type GetTaskConfigGroupByPayload<T extends TaskConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskConfigGroupByOutputType[P]>
            : GetScalarType<T[P], TaskConfigGroupByOutputType[P]>
        }
      >
    >


  export type TaskConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    submissionType?: boolean
    task?: boolean | TaskConfig$taskArgs<ExtArgs>
    _count?: boolean | TaskConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskConfig"]>

  export type TaskConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    submissionType?: boolean
  }, ExtArgs["result"]["taskConfig"]>

  export type TaskConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    submissionType?: boolean
  }, ExtArgs["result"]["taskConfig"]>

  export type TaskConfigSelectScalar = {
    id?: boolean
    duration?: boolean
    submissionType?: boolean
  }

  export type TaskConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "duration" | "submissionType", ExtArgs["result"]["taskConfig"]>
  export type TaskConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskConfig$taskArgs<ExtArgs>
    _count?: boolean | TaskConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TaskConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TaskConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskConfig"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      duration: Date
      submissionType: $Enums.TaskSubmissionType
    }, ExtArgs["result"]["taskConfig"]>
    composites: {}
  }

  type TaskConfigGetPayload<S extends boolean | null | undefined | TaskConfigDefaultArgs> = $Result.GetResult<Prisma.$TaskConfigPayload, S>

  type TaskConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskConfigCountAggregateInputType | true
    }

  export interface TaskConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskConfig'], meta: { name: 'TaskConfig' } }
    /**
     * Find zero or one TaskConfig that matches the filter.
     * @param {TaskConfigFindUniqueArgs} args - Arguments to find a TaskConfig
     * @example
     * // Get one TaskConfig
     * const taskConfig = await prisma.taskConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskConfigFindUniqueArgs>(args: SelectSubset<T, TaskConfigFindUniqueArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskConfigFindUniqueOrThrowArgs} args - Arguments to find a TaskConfig
     * @example
     * // Get one TaskConfig
     * const taskConfig = await prisma.taskConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigFindFirstArgs} args - Arguments to find a TaskConfig
     * @example
     * // Get one TaskConfig
     * const taskConfig = await prisma.taskConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskConfigFindFirstArgs>(args?: SelectSubset<T, TaskConfigFindFirstArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigFindFirstOrThrowArgs} args - Arguments to find a TaskConfig
     * @example
     * // Get one TaskConfig
     * const taskConfig = await prisma.taskConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskConfigs
     * const taskConfigs = await prisma.taskConfig.findMany()
     * 
     * // Get first 10 TaskConfigs
     * const taskConfigs = await prisma.taskConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskConfigWithIdOnly = await prisma.taskConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskConfigFindManyArgs>(args?: SelectSubset<T, TaskConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskConfig.
     * @param {TaskConfigCreateArgs} args - Arguments to create a TaskConfig.
     * @example
     * // Create one TaskConfig
     * const TaskConfig = await prisma.taskConfig.create({
     *   data: {
     *     // ... data to create a TaskConfig
     *   }
     * })
     * 
     */
    create<T extends TaskConfigCreateArgs>(args: SelectSubset<T, TaskConfigCreateArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskConfigs.
     * @param {TaskConfigCreateManyArgs} args - Arguments to create many TaskConfigs.
     * @example
     * // Create many TaskConfigs
     * const taskConfig = await prisma.taskConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskConfigCreateManyArgs>(args?: SelectSubset<T, TaskConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskConfigs and returns the data saved in the database.
     * @param {TaskConfigCreateManyAndReturnArgs} args - Arguments to create many TaskConfigs.
     * @example
     * // Create many TaskConfigs
     * const taskConfig = await prisma.taskConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskConfigs and only return the `id`
     * const taskConfigWithIdOnly = await prisma.taskConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskConfig.
     * @param {TaskConfigDeleteArgs} args - Arguments to delete one TaskConfig.
     * @example
     * // Delete one TaskConfig
     * const TaskConfig = await prisma.taskConfig.delete({
     *   where: {
     *     // ... filter to delete one TaskConfig
     *   }
     * })
     * 
     */
    delete<T extends TaskConfigDeleteArgs>(args: SelectSubset<T, TaskConfigDeleteArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskConfig.
     * @param {TaskConfigUpdateArgs} args - Arguments to update one TaskConfig.
     * @example
     * // Update one TaskConfig
     * const taskConfig = await prisma.taskConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskConfigUpdateArgs>(args: SelectSubset<T, TaskConfigUpdateArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskConfigs.
     * @param {TaskConfigDeleteManyArgs} args - Arguments to filter TaskConfigs to delete.
     * @example
     * // Delete a few TaskConfigs
     * const { count } = await prisma.taskConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskConfigDeleteManyArgs>(args?: SelectSubset<T, TaskConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskConfigs
     * const taskConfig = await prisma.taskConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskConfigUpdateManyArgs>(args: SelectSubset<T, TaskConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskConfigs and returns the data updated in the database.
     * @param {TaskConfigUpdateManyAndReturnArgs} args - Arguments to update many TaskConfigs.
     * @example
     * // Update many TaskConfigs
     * const taskConfig = await prisma.taskConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskConfigs and only return the `id`
     * const taskConfigWithIdOnly = await prisma.taskConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskConfig.
     * @param {TaskConfigUpsertArgs} args - Arguments to update or create a TaskConfig.
     * @example
     * // Update or create a TaskConfig
     * const taskConfig = await prisma.taskConfig.upsert({
     *   create: {
     *     // ... data to create a TaskConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskConfig we want to update
     *   }
     * })
     */
    upsert<T extends TaskConfigUpsertArgs>(args: SelectSubset<T, TaskConfigUpsertArgs<ExtArgs>>): Prisma__TaskConfigClient<$Result.GetResult<Prisma.$TaskConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigCountArgs} args - Arguments to filter TaskConfigs to count.
     * @example
     * // Count the number of TaskConfigs
     * const count = await prisma.taskConfig.count({
     *   where: {
     *     // ... the filter for the TaskConfigs we want to count
     *   }
     * })
    **/
    count<T extends TaskConfigCountArgs>(
      args?: Subset<T, TaskConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskConfigAggregateArgs>(args: Subset<T, TaskConfigAggregateArgs>): Prisma.PrismaPromise<GetTaskConfigAggregateType<T>>

    /**
     * Group by TaskConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskConfigGroupByArgs['orderBy'] }
        : { orderBy?: TaskConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskConfig model
   */
  readonly fields: TaskConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskConfig$taskArgs<ExtArgs> = {}>(args?: Subset<T, TaskConfig$taskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskConfig model
   */
  interface TaskConfigFieldRefs {
    readonly id: FieldRef<"TaskConfig", 'Int'>
    readonly duration: FieldRef<"TaskConfig", 'DateTime'>
    readonly submissionType: FieldRef<"TaskConfig", 'TaskSubmissionType'>
  }
    

  // Custom InputTypes
  /**
   * TaskConfig findUnique
   */
  export type TaskConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter, which TaskConfig to fetch.
     */
    where: TaskConfigWhereUniqueInput
  }

  /**
   * TaskConfig findUniqueOrThrow
   */
  export type TaskConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter, which TaskConfig to fetch.
     */
    where: TaskConfigWhereUniqueInput
  }

  /**
   * TaskConfig findFirst
   */
  export type TaskConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter, which TaskConfig to fetch.
     */
    where?: TaskConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskConfigs to fetch.
     */
    orderBy?: TaskConfigOrderByWithRelationInput | TaskConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskConfigs.
     */
    cursor?: TaskConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskConfigs.
     */
    distinct?: TaskConfigScalarFieldEnum | TaskConfigScalarFieldEnum[]
  }

  /**
   * TaskConfig findFirstOrThrow
   */
  export type TaskConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter, which TaskConfig to fetch.
     */
    where?: TaskConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskConfigs to fetch.
     */
    orderBy?: TaskConfigOrderByWithRelationInput | TaskConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskConfigs.
     */
    cursor?: TaskConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskConfigs.
     */
    distinct?: TaskConfigScalarFieldEnum | TaskConfigScalarFieldEnum[]
  }

  /**
   * TaskConfig findMany
   */
  export type TaskConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter, which TaskConfigs to fetch.
     */
    where?: TaskConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskConfigs to fetch.
     */
    orderBy?: TaskConfigOrderByWithRelationInput | TaskConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskConfigs.
     */
    cursor?: TaskConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskConfigs.
     */
    skip?: number
    distinct?: TaskConfigScalarFieldEnum | TaskConfigScalarFieldEnum[]
  }

  /**
   * TaskConfig create
   */
  export type TaskConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskConfig.
     */
    data: XOR<TaskConfigCreateInput, TaskConfigUncheckedCreateInput>
  }

  /**
   * TaskConfig createMany
   */
  export type TaskConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskConfigs.
     */
    data: TaskConfigCreateManyInput | TaskConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskConfig createManyAndReturn
   */
  export type TaskConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * The data used to create many TaskConfigs.
     */
    data: TaskConfigCreateManyInput | TaskConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskConfig update
   */
  export type TaskConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskConfig.
     */
    data: XOR<TaskConfigUpdateInput, TaskConfigUncheckedUpdateInput>
    /**
     * Choose, which TaskConfig to update.
     */
    where: TaskConfigWhereUniqueInput
  }

  /**
   * TaskConfig updateMany
   */
  export type TaskConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskConfigs.
     */
    data: XOR<TaskConfigUpdateManyMutationInput, TaskConfigUncheckedUpdateManyInput>
    /**
     * Filter which TaskConfigs to update
     */
    where?: TaskConfigWhereInput
    /**
     * Limit how many TaskConfigs to update.
     */
    limit?: number
  }

  /**
   * TaskConfig updateManyAndReturn
   */
  export type TaskConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * The data used to update TaskConfigs.
     */
    data: XOR<TaskConfigUpdateManyMutationInput, TaskConfigUncheckedUpdateManyInput>
    /**
     * Filter which TaskConfigs to update
     */
    where?: TaskConfigWhereInput
    /**
     * Limit how many TaskConfigs to update.
     */
    limit?: number
  }

  /**
   * TaskConfig upsert
   */
  export type TaskConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskConfig to update in case it exists.
     */
    where: TaskConfigWhereUniqueInput
    /**
     * In case the TaskConfig found by the `where` argument doesn't exist, create a new TaskConfig with this data.
     */
    create: XOR<TaskConfigCreateInput, TaskConfigUncheckedCreateInput>
    /**
     * In case the TaskConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskConfigUpdateInput, TaskConfigUncheckedUpdateInput>
  }

  /**
   * TaskConfig delete
   */
  export type TaskConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
    /**
     * Filter which TaskConfig to delete.
     */
    where: TaskConfigWhereUniqueInput
  }

  /**
   * TaskConfig deleteMany
   */
  export type TaskConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskConfigs to delete
     */
    where?: TaskConfigWhereInput
    /**
     * Limit how many TaskConfigs to delete.
     */
    limit?: number
  }

  /**
   * TaskConfig.task
   */
  export type TaskConfig$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * TaskConfig without action
   */
  export type TaskConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskConfig
     */
    select?: TaskConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskConfig
     */
    omit?: TaskConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskConfigInclude<ExtArgs> | null
  }


  /**
   * Model TaskSelection
   */

  export type AggregateTaskSelection = {
    _count: TaskSelectionCountAggregateOutputType | null
    _avg: TaskSelectionAvgAggregateOutputType | null
    _sum: TaskSelectionSumAggregateOutputType | null
    _min: TaskSelectionMinAggregateOutputType | null
    _max: TaskSelectionMaxAggregateOutputType | null
  }

  export type TaskSelectionAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskSelectionSumAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskSelectionMinAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskSelectionMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskSelectionCountAggregateOutputType = {
    id: number
    gameId: number
    _all: number
  }


  export type TaskSelectionAvgAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskSelectionSumAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskSelectionMinAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskSelectionMaxAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskSelectionCountAggregateInputType = {
    id?: true
    gameId?: true
    _all?: true
  }

  export type TaskSelectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskSelection to aggregate.
     */
    where?: TaskSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSelections to fetch.
     */
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskSelections
    **/
    _count?: true | TaskSelectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskSelectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSelectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskSelectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskSelectionMaxAggregateInputType
  }

  export type GetTaskSelectionAggregateType<T extends TaskSelectionAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskSelection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskSelection[P]>
      : GetScalarType<T[P], AggregateTaskSelection[P]>
  }




  export type TaskSelectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSelectionWhereInput
    orderBy?: TaskSelectionOrderByWithAggregationInput | TaskSelectionOrderByWithAggregationInput[]
    by: TaskSelectionScalarFieldEnum[] | TaskSelectionScalarFieldEnum
    having?: TaskSelectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskSelectionCountAggregateInputType | true
    _avg?: TaskSelectionAvgAggregateInputType
    _sum?: TaskSelectionSumAggregateInputType
    _min?: TaskSelectionMinAggregateInputType
    _max?: TaskSelectionMaxAggregateInputType
  }

  export type TaskSelectionGroupByOutputType = {
    id: number
    gameId: number
    _count: TaskSelectionCountAggregateOutputType | null
    _avg: TaskSelectionAvgAggregateOutputType | null
    _sum: TaskSelectionSumAggregateOutputType | null
    _min: TaskSelectionMinAggregateOutputType | null
    _max: TaskSelectionMaxAggregateOutputType | null
  }

  type GetTaskSelectionGroupByPayload<T extends TaskSelectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskSelectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskSelectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskSelectionGroupByOutputType[P]>
            : GetScalarType<T[P], TaskSelectionGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    task?: boolean | TaskSelection$taskArgs<ExtArgs>
    _count?: boolean | TaskSelectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSelection"]>

  export type TaskSelectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSelection"]>

  export type TaskSelectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSelection"]>

  export type TaskSelectionSelectScalar = {
    id?: boolean
    gameId?: boolean
  }

  export type TaskSelectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId", ExtArgs["result"]["taskSelection"]>
  export type TaskSelectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    task?: boolean | TaskSelection$taskArgs<ExtArgs>
    _count?: boolean | TaskSelectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskSelectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type TaskSelectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $TaskSelectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskSelection"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
    }, ExtArgs["result"]["taskSelection"]>
    composites: {}
  }

  type TaskSelectionGetPayload<S extends boolean | null | undefined | TaskSelectionDefaultArgs> = $Result.GetResult<Prisma.$TaskSelectionPayload, S>

  type TaskSelectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskSelectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskSelectionCountAggregateInputType | true
    }

  export interface TaskSelectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskSelection'], meta: { name: 'TaskSelection' } }
    /**
     * Find zero or one TaskSelection that matches the filter.
     * @param {TaskSelectionFindUniqueArgs} args - Arguments to find a TaskSelection
     * @example
     * // Get one TaskSelection
     * const taskSelection = await prisma.taskSelection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskSelectionFindUniqueArgs>(args: SelectSubset<T, TaskSelectionFindUniqueArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskSelection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskSelectionFindUniqueOrThrowArgs} args - Arguments to find a TaskSelection
     * @example
     * // Get one TaskSelection
     * const taskSelection = await prisma.taskSelection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskSelectionFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskSelectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskSelection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionFindFirstArgs} args - Arguments to find a TaskSelection
     * @example
     * // Get one TaskSelection
     * const taskSelection = await prisma.taskSelection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskSelectionFindFirstArgs>(args?: SelectSubset<T, TaskSelectionFindFirstArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskSelection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionFindFirstOrThrowArgs} args - Arguments to find a TaskSelection
     * @example
     * // Get one TaskSelection
     * const taskSelection = await prisma.taskSelection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskSelectionFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskSelectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskSelections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskSelections
     * const taskSelections = await prisma.taskSelection.findMany()
     * 
     * // Get first 10 TaskSelections
     * const taskSelections = await prisma.taskSelection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskSelectionWithIdOnly = await prisma.taskSelection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskSelectionFindManyArgs>(args?: SelectSubset<T, TaskSelectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskSelection.
     * @param {TaskSelectionCreateArgs} args - Arguments to create a TaskSelection.
     * @example
     * // Create one TaskSelection
     * const TaskSelection = await prisma.taskSelection.create({
     *   data: {
     *     // ... data to create a TaskSelection
     *   }
     * })
     * 
     */
    create<T extends TaskSelectionCreateArgs>(args: SelectSubset<T, TaskSelectionCreateArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskSelections.
     * @param {TaskSelectionCreateManyArgs} args - Arguments to create many TaskSelections.
     * @example
     * // Create many TaskSelections
     * const taskSelection = await prisma.taskSelection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskSelectionCreateManyArgs>(args?: SelectSubset<T, TaskSelectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskSelections and returns the data saved in the database.
     * @param {TaskSelectionCreateManyAndReturnArgs} args - Arguments to create many TaskSelections.
     * @example
     * // Create many TaskSelections
     * const taskSelection = await prisma.taskSelection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskSelections and only return the `id`
     * const taskSelectionWithIdOnly = await prisma.taskSelection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskSelectionCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskSelectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskSelection.
     * @param {TaskSelectionDeleteArgs} args - Arguments to delete one TaskSelection.
     * @example
     * // Delete one TaskSelection
     * const TaskSelection = await prisma.taskSelection.delete({
     *   where: {
     *     // ... filter to delete one TaskSelection
     *   }
     * })
     * 
     */
    delete<T extends TaskSelectionDeleteArgs>(args: SelectSubset<T, TaskSelectionDeleteArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskSelection.
     * @param {TaskSelectionUpdateArgs} args - Arguments to update one TaskSelection.
     * @example
     * // Update one TaskSelection
     * const taskSelection = await prisma.taskSelection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskSelectionUpdateArgs>(args: SelectSubset<T, TaskSelectionUpdateArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskSelections.
     * @param {TaskSelectionDeleteManyArgs} args - Arguments to filter TaskSelections to delete.
     * @example
     * // Delete a few TaskSelections
     * const { count } = await prisma.taskSelection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskSelectionDeleteManyArgs>(args?: SelectSubset<T, TaskSelectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskSelections
     * const taskSelection = await prisma.taskSelection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskSelectionUpdateManyArgs>(args: SelectSubset<T, TaskSelectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskSelections and returns the data updated in the database.
     * @param {TaskSelectionUpdateManyAndReturnArgs} args - Arguments to update many TaskSelections.
     * @example
     * // Update many TaskSelections
     * const taskSelection = await prisma.taskSelection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskSelections and only return the `id`
     * const taskSelectionWithIdOnly = await prisma.taskSelection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskSelectionUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskSelectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskSelection.
     * @param {TaskSelectionUpsertArgs} args - Arguments to update or create a TaskSelection.
     * @example
     * // Update or create a TaskSelection
     * const taskSelection = await prisma.taskSelection.upsert({
     *   create: {
     *     // ... data to create a TaskSelection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskSelection we want to update
     *   }
     * })
     */
    upsert<T extends TaskSelectionUpsertArgs>(args: SelectSubset<T, TaskSelectionUpsertArgs<ExtArgs>>): Prisma__TaskSelectionClient<$Result.GetResult<Prisma.$TaskSelectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionCountArgs} args - Arguments to filter TaskSelections to count.
     * @example
     * // Count the number of TaskSelections
     * const count = await prisma.taskSelection.count({
     *   where: {
     *     // ... the filter for the TaskSelections we want to count
     *   }
     * })
    **/
    count<T extends TaskSelectionCountArgs>(
      args?: Subset<T, TaskSelectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskSelectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskSelectionAggregateArgs>(args: Subset<T, TaskSelectionAggregateArgs>): Prisma.PrismaPromise<GetTaskSelectionAggregateType<T>>

    /**
     * Group by TaskSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSelectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskSelectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskSelectionGroupByArgs['orderBy'] }
        : { orderBy?: TaskSelectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskSelectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskSelectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskSelection model
   */
  readonly fields: TaskSelectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskSelection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskSelectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends TaskSelection$taskArgs<ExtArgs> = {}>(args?: Subset<T, TaskSelection$taskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskSelection model
   */
  interface TaskSelectionFieldRefs {
    readonly id: FieldRef<"TaskSelection", 'Int'>
    readonly gameId: FieldRef<"TaskSelection", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TaskSelection findUnique
   */
  export type TaskSelectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSelection to fetch.
     */
    where: TaskSelectionWhereUniqueInput
  }

  /**
   * TaskSelection findUniqueOrThrow
   */
  export type TaskSelectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSelection to fetch.
     */
    where: TaskSelectionWhereUniqueInput
  }

  /**
   * TaskSelection findFirst
   */
  export type TaskSelectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSelection to fetch.
     */
    where?: TaskSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSelections to fetch.
     */
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskSelections.
     */
    cursor?: TaskSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskSelections.
     */
    distinct?: TaskSelectionScalarFieldEnum | TaskSelectionScalarFieldEnum[]
  }

  /**
   * TaskSelection findFirstOrThrow
   */
  export type TaskSelectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSelection to fetch.
     */
    where?: TaskSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSelections to fetch.
     */
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskSelections.
     */
    cursor?: TaskSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskSelections.
     */
    distinct?: TaskSelectionScalarFieldEnum | TaskSelectionScalarFieldEnum[]
  }

  /**
   * TaskSelection findMany
   */
  export type TaskSelectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSelections to fetch.
     */
    where?: TaskSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSelections to fetch.
     */
    orderBy?: TaskSelectionOrderByWithRelationInput | TaskSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskSelections.
     */
    cursor?: TaskSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSelections.
     */
    skip?: number
    distinct?: TaskSelectionScalarFieldEnum | TaskSelectionScalarFieldEnum[]
  }

  /**
   * TaskSelection create
   */
  export type TaskSelectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskSelection.
     */
    data: XOR<TaskSelectionCreateInput, TaskSelectionUncheckedCreateInput>
  }

  /**
   * TaskSelection createMany
   */
  export type TaskSelectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskSelections.
     */
    data: TaskSelectionCreateManyInput | TaskSelectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskSelection createManyAndReturn
   */
  export type TaskSelectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * The data used to create many TaskSelections.
     */
    data: TaskSelectionCreateManyInput | TaskSelectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskSelection update
   */
  export type TaskSelectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskSelection.
     */
    data: XOR<TaskSelectionUpdateInput, TaskSelectionUncheckedUpdateInput>
    /**
     * Choose, which TaskSelection to update.
     */
    where: TaskSelectionWhereUniqueInput
  }

  /**
   * TaskSelection updateMany
   */
  export type TaskSelectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskSelections.
     */
    data: XOR<TaskSelectionUpdateManyMutationInput, TaskSelectionUncheckedUpdateManyInput>
    /**
     * Filter which TaskSelections to update
     */
    where?: TaskSelectionWhereInput
    /**
     * Limit how many TaskSelections to update.
     */
    limit?: number
  }

  /**
   * TaskSelection updateManyAndReturn
   */
  export type TaskSelectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * The data used to update TaskSelections.
     */
    data: XOR<TaskSelectionUpdateManyMutationInput, TaskSelectionUncheckedUpdateManyInput>
    /**
     * Filter which TaskSelections to update
     */
    where?: TaskSelectionWhereInput
    /**
     * Limit how many TaskSelections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskSelection upsert
   */
  export type TaskSelectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskSelection to update in case it exists.
     */
    where: TaskSelectionWhereUniqueInput
    /**
     * In case the TaskSelection found by the `where` argument doesn't exist, create a new TaskSelection with this data.
     */
    create: XOR<TaskSelectionCreateInput, TaskSelectionUncheckedCreateInput>
    /**
     * In case the TaskSelection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskSelectionUpdateInput, TaskSelectionUncheckedUpdateInput>
  }

  /**
   * TaskSelection delete
   */
  export type TaskSelectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
    /**
     * Filter which TaskSelection to delete.
     */
    where: TaskSelectionWhereUniqueInput
  }

  /**
   * TaskSelection deleteMany
   */
  export type TaskSelectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskSelections to delete
     */
    where?: TaskSelectionWhereInput
    /**
     * Limit how many TaskSelections to delete.
     */
    limit?: number
  }

  /**
   * TaskSelection.task
   */
  export type TaskSelection$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * TaskSelection without action
   */
  export type TaskSelectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSelection
     */
    select?: TaskSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSelection
     */
    omit?: TaskSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSelectionInclude<ExtArgs> | null
  }


  /**
   * Model TaskResult
   */

  export type AggregateTaskResult = {
    _count: TaskResultCountAggregateOutputType | null
    _avg: TaskResultAvgAggregateOutputType | null
    _sum: TaskResultSumAggregateOutputType | null
    _min: TaskResultMinAggregateOutputType | null
    _max: TaskResultMaxAggregateOutputType | null
  }

  export type TaskResultAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskResultSumAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskResultMinAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskResultMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type TaskResultCountAggregateOutputType = {
    id: number
    gameId: number
    _all: number
  }


  export type TaskResultAvgAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskResultSumAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskResultMinAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskResultMaxAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type TaskResultCountAggregateInputType = {
    id?: true
    gameId?: true
    _all?: true
  }

  export type TaskResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskResult to aggregate.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskResults
    **/
    _count?: true | TaskResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskResultMaxAggregateInputType
  }

  export type GetTaskResultAggregateType<T extends TaskResultAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskResult[P]>
      : GetScalarType<T[P], AggregateTaskResult[P]>
  }




  export type TaskResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskResultWhereInput
    orderBy?: TaskResultOrderByWithAggregationInput | TaskResultOrderByWithAggregationInput[]
    by: TaskResultScalarFieldEnum[] | TaskResultScalarFieldEnum
    having?: TaskResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskResultCountAggregateInputType | true
    _avg?: TaskResultAvgAggregateInputType
    _sum?: TaskResultSumAggregateInputType
    _min?: TaskResultMinAggregateInputType
    _max?: TaskResultMaxAggregateInputType
  }

  export type TaskResultGroupByOutputType = {
    id: number
    gameId: number
    _count: TaskResultCountAggregateOutputType | null
    _avg: TaskResultAvgAggregateOutputType | null
    _sum: TaskResultSumAggregateOutputType | null
    _min: TaskResultMinAggregateOutputType | null
    _max: TaskResultMaxAggregateOutputType | null
  }

  type GetTaskResultGroupByPayload<T extends TaskResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskResultGroupByOutputType[P]>
            : GetScalarType<T[P], TaskResultGroupByOutputType[P]>
        }
      >
    >


  export type TaskResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    submissions?: boolean | TaskResult$submissionsArgs<ExtArgs>
    _count?: boolean | TaskResultCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskResult"]>

  export type TaskResultSelectScalar = {
    id?: boolean
    gameId?: boolean
  }

  export type TaskResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId", ExtArgs["result"]["taskResult"]>
  export type TaskResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    submissions?: boolean | TaskResult$submissionsArgs<ExtArgs>
    _count?: boolean | TaskResultCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type TaskResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $TaskResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskResult"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      submissions: Prisma.$TaskSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
    }, ExtArgs["result"]["taskResult"]>
    composites: {}
  }

  type TaskResultGetPayload<S extends boolean | null | undefined | TaskResultDefaultArgs> = $Result.GetResult<Prisma.$TaskResultPayload, S>

  type TaskResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskResultCountAggregateInputType | true
    }

  export interface TaskResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskResult'], meta: { name: 'TaskResult' } }
    /**
     * Find zero or one TaskResult that matches the filter.
     * @param {TaskResultFindUniqueArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskResultFindUniqueArgs>(args: SelectSubset<T, TaskResultFindUniqueArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskResultFindUniqueOrThrowArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskResultFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindFirstArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskResultFindFirstArgs>(args?: SelectSubset<T, TaskResultFindFirstArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindFirstOrThrowArgs} args - Arguments to find a TaskResult
     * @example
     * // Get one TaskResult
     * const taskResult = await prisma.taskResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskResultFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskResults
     * const taskResults = await prisma.taskResult.findMany()
     * 
     * // Get first 10 TaskResults
     * const taskResults = await prisma.taskResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskResultFindManyArgs>(args?: SelectSubset<T, TaskResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskResult.
     * @param {TaskResultCreateArgs} args - Arguments to create a TaskResult.
     * @example
     * // Create one TaskResult
     * const TaskResult = await prisma.taskResult.create({
     *   data: {
     *     // ... data to create a TaskResult
     *   }
     * })
     * 
     */
    create<T extends TaskResultCreateArgs>(args: SelectSubset<T, TaskResultCreateArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskResults.
     * @param {TaskResultCreateManyArgs} args - Arguments to create many TaskResults.
     * @example
     * // Create many TaskResults
     * const taskResult = await prisma.taskResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskResultCreateManyArgs>(args?: SelectSubset<T, TaskResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskResults and returns the data saved in the database.
     * @param {TaskResultCreateManyAndReturnArgs} args - Arguments to create many TaskResults.
     * @example
     * // Create many TaskResults
     * const taskResult = await prisma.taskResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskResults and only return the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskResultCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskResult.
     * @param {TaskResultDeleteArgs} args - Arguments to delete one TaskResult.
     * @example
     * // Delete one TaskResult
     * const TaskResult = await prisma.taskResult.delete({
     *   where: {
     *     // ... filter to delete one TaskResult
     *   }
     * })
     * 
     */
    delete<T extends TaskResultDeleteArgs>(args: SelectSubset<T, TaskResultDeleteArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskResult.
     * @param {TaskResultUpdateArgs} args - Arguments to update one TaskResult.
     * @example
     * // Update one TaskResult
     * const taskResult = await prisma.taskResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskResultUpdateArgs>(args: SelectSubset<T, TaskResultUpdateArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskResults.
     * @param {TaskResultDeleteManyArgs} args - Arguments to filter TaskResults to delete.
     * @example
     * // Delete a few TaskResults
     * const { count } = await prisma.taskResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskResultDeleteManyArgs>(args?: SelectSubset<T, TaskResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskResults
     * const taskResult = await prisma.taskResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskResultUpdateManyArgs>(args: SelectSubset<T, TaskResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskResults and returns the data updated in the database.
     * @param {TaskResultUpdateManyAndReturnArgs} args - Arguments to update many TaskResults.
     * @example
     * // Update many TaskResults
     * const taskResult = await prisma.taskResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskResults and only return the `id`
     * const taskResultWithIdOnly = await prisma.taskResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskResultUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskResult.
     * @param {TaskResultUpsertArgs} args - Arguments to update or create a TaskResult.
     * @example
     * // Update or create a TaskResult
     * const taskResult = await prisma.taskResult.upsert({
     *   create: {
     *     // ... data to create a TaskResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskResult we want to update
     *   }
     * })
     */
    upsert<T extends TaskResultUpsertArgs>(args: SelectSubset<T, TaskResultUpsertArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultCountArgs} args - Arguments to filter TaskResults to count.
     * @example
     * // Count the number of TaskResults
     * const count = await prisma.taskResult.count({
     *   where: {
     *     // ... the filter for the TaskResults we want to count
     *   }
     * })
    **/
    count<T extends TaskResultCountArgs>(
      args?: Subset<T, TaskResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskResultAggregateArgs>(args: Subset<T, TaskResultAggregateArgs>): Prisma.PrismaPromise<GetTaskResultAggregateType<T>>

    /**
     * Group by TaskResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskResultGroupByArgs['orderBy'] }
        : { orderBy?: TaskResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskResult model
   */
  readonly fields: TaskResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends TaskResult$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, TaskResult$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskResult model
   */
  interface TaskResultFieldRefs {
    readonly id: FieldRef<"TaskResult", 'Int'>
    readonly gameId: FieldRef<"TaskResult", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TaskResult findUnique
   */
  export type TaskResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult findUniqueOrThrow
   */
  export type TaskResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult findFirst
   */
  export type TaskResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskResults.
     */
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult findFirstOrThrow
   */
  export type TaskResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter, which TaskResult to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskResults.
     */
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult findMany
   */
  export type TaskResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter, which TaskResults to fetch.
     */
    where?: TaskResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskResults to fetch.
     */
    orderBy?: TaskResultOrderByWithRelationInput | TaskResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskResults.
     */
    cursor?: TaskResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskResults.
     */
    skip?: number
    distinct?: TaskResultScalarFieldEnum | TaskResultScalarFieldEnum[]
  }

  /**
   * TaskResult create
   */
  export type TaskResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskResult.
     */
    data: XOR<TaskResultCreateInput, TaskResultUncheckedCreateInput>
  }

  /**
   * TaskResult createMany
   */
  export type TaskResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskResults.
     */
    data: TaskResultCreateManyInput | TaskResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskResult createManyAndReturn
   */
  export type TaskResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data used to create many TaskResults.
     */
    data: TaskResultCreateManyInput | TaskResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskResult update
   */
  export type TaskResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskResult.
     */
    data: XOR<TaskResultUpdateInput, TaskResultUncheckedUpdateInput>
    /**
     * Choose, which TaskResult to update.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult updateMany
   */
  export type TaskResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskResults.
     */
    data: XOR<TaskResultUpdateManyMutationInput, TaskResultUncheckedUpdateManyInput>
    /**
     * Filter which TaskResults to update
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to update.
     */
    limit?: number
  }

  /**
   * TaskResult updateManyAndReturn
   */
  export type TaskResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * The data used to update TaskResults.
     */
    data: XOR<TaskResultUpdateManyMutationInput, TaskResultUncheckedUpdateManyInput>
    /**
     * Filter which TaskResults to update
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskResult upsert
   */
  export type TaskResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskResult to update in case it exists.
     */
    where: TaskResultWhereUniqueInput
    /**
     * In case the TaskResult found by the `where` argument doesn't exist, create a new TaskResult with this data.
     */
    create: XOR<TaskResultCreateInput, TaskResultUncheckedCreateInput>
    /**
     * In case the TaskResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskResultUpdateInput, TaskResultUncheckedUpdateInput>
  }

  /**
   * TaskResult delete
   */
  export type TaskResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
    /**
     * Filter which TaskResult to delete.
     */
    where: TaskResultWhereUniqueInput
  }

  /**
   * TaskResult deleteMany
   */
  export type TaskResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskResults to delete
     */
    where?: TaskResultWhereInput
    /**
     * Limit how many TaskResults to delete.
     */
    limit?: number
  }

  /**
   * TaskResult.submissions
   */
  export type TaskResult$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    where?: TaskSubmissionWhereInput
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    cursor?: TaskSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * TaskResult without action
   */
  export type TaskResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskResult
     */
    select?: TaskResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskResult
     */
    omit?: TaskResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskResultInclude<ExtArgs> | null
  }


  /**
   * Model TaskSubmission
   */

  export type AggregateTaskSubmission = {
    _count: TaskSubmissionCountAggregateOutputType | null
    _avg: TaskSubmissionAvgAggregateOutputType | null
    _sum: TaskSubmissionSumAggregateOutputType | null
    _min: TaskSubmissionMinAggregateOutputType | null
    _max: TaskSubmissionMaxAggregateOutputType | null
  }

  export type TaskSubmissionAvgAggregateOutputType = {
    userSessionId: number | null
    taskId: number | null
    taskResultId: number | null
  }

  export type TaskSubmissionSumAggregateOutputType = {
    userSessionId: number | null
    taskId: number | null
    taskResultId: number | null
  }

  export type TaskSubmissionMinAggregateOutputType = {
    userSessionId: number | null
    taskId: number | null
    taskResultId: number | null
    submittedAt: Date | null
  }

  export type TaskSubmissionMaxAggregateOutputType = {
    userSessionId: number | null
    taskId: number | null
    taskResultId: number | null
    submittedAt: Date | null
  }

  export type TaskSubmissionCountAggregateOutputType = {
    userSessionId: number
    taskId: number
    taskResultId: number
    submittedAt: number
    _all: number
  }


  export type TaskSubmissionAvgAggregateInputType = {
    userSessionId?: true
    taskId?: true
    taskResultId?: true
  }

  export type TaskSubmissionSumAggregateInputType = {
    userSessionId?: true
    taskId?: true
    taskResultId?: true
  }

  export type TaskSubmissionMinAggregateInputType = {
    userSessionId?: true
    taskId?: true
    taskResultId?: true
    submittedAt?: true
  }

  export type TaskSubmissionMaxAggregateInputType = {
    userSessionId?: true
    taskId?: true
    taskResultId?: true
    submittedAt?: true
  }

  export type TaskSubmissionCountAggregateInputType = {
    userSessionId?: true
    taskId?: true
    taskResultId?: true
    submittedAt?: true
    _all?: true
  }

  export type TaskSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskSubmission to aggregate.
     */
    where?: TaskSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSubmissions to fetch.
     */
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskSubmissions
    **/
    _count?: true | TaskSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskSubmissionMaxAggregateInputType
  }

  export type GetTaskSubmissionAggregateType<T extends TaskSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskSubmission[P]>
      : GetScalarType<T[P], AggregateTaskSubmission[P]>
  }




  export type TaskSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskSubmissionWhereInput
    orderBy?: TaskSubmissionOrderByWithAggregationInput | TaskSubmissionOrderByWithAggregationInput[]
    by: TaskSubmissionScalarFieldEnum[] | TaskSubmissionScalarFieldEnum
    having?: TaskSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskSubmissionCountAggregateInputType | true
    _avg?: TaskSubmissionAvgAggregateInputType
    _sum?: TaskSubmissionSumAggregateInputType
    _min?: TaskSubmissionMinAggregateInputType
    _max?: TaskSubmissionMaxAggregateInputType
  }

  export type TaskSubmissionGroupByOutputType = {
    userSessionId: number
    taskId: number
    taskResultId: number
    submittedAt: Date
    _count: TaskSubmissionCountAggregateOutputType | null
    _avg: TaskSubmissionAvgAggregateOutputType | null
    _sum: TaskSubmissionSumAggregateOutputType | null
    _min: TaskSubmissionMinAggregateOutputType | null
    _max: TaskSubmissionMaxAggregateOutputType | null
  }

  type GetTaskSubmissionGroupByPayload<T extends TaskSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], TaskSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type TaskSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    taskId?: boolean
    taskResultId?: boolean
    submittedAt?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSubmission"]>

  export type TaskSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    taskId?: boolean
    taskResultId?: boolean
    submittedAt?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSubmission"]>

  export type TaskSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    taskId?: boolean
    taskResultId?: boolean
    submittedAt?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskSubmission"]>

  export type TaskSubmissionSelectScalar = {
    userSessionId?: boolean
    taskId?: boolean
    taskResultId?: boolean
    submittedAt?: boolean
  }

  export type TaskSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userSessionId" | "taskId" | "taskResultId" | "submittedAt", ExtArgs["result"]["taskSubmission"]>
  export type TaskSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }
  export type TaskSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }
  export type TaskSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    taskResult?: boolean | TaskResultDefaultArgs<ExtArgs>
  }

  export type $TaskSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskSubmission"
    objects: {
      userSession: Prisma.$UserSessionPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
      taskResult: Prisma.$TaskResultPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userSessionId: number
      taskId: number
      taskResultId: number
      submittedAt: Date
    }, ExtArgs["result"]["taskSubmission"]>
    composites: {}
  }

  type TaskSubmissionGetPayload<S extends boolean | null | undefined | TaskSubmissionDefaultArgs> = $Result.GetResult<Prisma.$TaskSubmissionPayload, S>

  type TaskSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskSubmissionCountAggregateInputType | true
    }

  export interface TaskSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskSubmission'], meta: { name: 'TaskSubmission' } }
    /**
     * Find zero or one TaskSubmission that matches the filter.
     * @param {TaskSubmissionFindUniqueArgs} args - Arguments to find a TaskSubmission
     * @example
     * // Get one TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskSubmissionFindUniqueArgs>(args: SelectSubset<T, TaskSubmissionFindUniqueArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskSubmissionFindUniqueOrThrowArgs} args - Arguments to find a TaskSubmission
     * @example
     * // Get one TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionFindFirstArgs} args - Arguments to find a TaskSubmission
     * @example
     * // Get one TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskSubmissionFindFirstArgs>(args?: SelectSubset<T, TaskSubmissionFindFirstArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionFindFirstOrThrowArgs} args - Arguments to find a TaskSubmission
     * @example
     * // Get one TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskSubmissions
     * const taskSubmissions = await prisma.taskSubmission.findMany()
     * 
     * // Get first 10 TaskSubmissions
     * const taskSubmissions = await prisma.taskSubmission.findMany({ take: 10 })
     * 
     * // Only select the `userSessionId`
     * const taskSubmissionWithUserSessionIdOnly = await prisma.taskSubmission.findMany({ select: { userSessionId: true } })
     * 
     */
    findMany<T extends TaskSubmissionFindManyArgs>(args?: SelectSubset<T, TaskSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskSubmission.
     * @param {TaskSubmissionCreateArgs} args - Arguments to create a TaskSubmission.
     * @example
     * // Create one TaskSubmission
     * const TaskSubmission = await prisma.taskSubmission.create({
     *   data: {
     *     // ... data to create a TaskSubmission
     *   }
     * })
     * 
     */
    create<T extends TaskSubmissionCreateArgs>(args: SelectSubset<T, TaskSubmissionCreateArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskSubmissions.
     * @param {TaskSubmissionCreateManyArgs} args - Arguments to create many TaskSubmissions.
     * @example
     * // Create many TaskSubmissions
     * const taskSubmission = await prisma.taskSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskSubmissionCreateManyArgs>(args?: SelectSubset<T, TaskSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskSubmissions and returns the data saved in the database.
     * @param {TaskSubmissionCreateManyAndReturnArgs} args - Arguments to create many TaskSubmissions.
     * @example
     * // Create many TaskSubmissions
     * const taskSubmission = await prisma.taskSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskSubmissions and only return the `userSessionId`
     * const taskSubmissionWithUserSessionIdOnly = await prisma.taskSubmission.createManyAndReturn({
     *   select: { userSessionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskSubmission.
     * @param {TaskSubmissionDeleteArgs} args - Arguments to delete one TaskSubmission.
     * @example
     * // Delete one TaskSubmission
     * const TaskSubmission = await prisma.taskSubmission.delete({
     *   where: {
     *     // ... filter to delete one TaskSubmission
     *   }
     * })
     * 
     */
    delete<T extends TaskSubmissionDeleteArgs>(args: SelectSubset<T, TaskSubmissionDeleteArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskSubmission.
     * @param {TaskSubmissionUpdateArgs} args - Arguments to update one TaskSubmission.
     * @example
     * // Update one TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskSubmissionUpdateArgs>(args: SelectSubset<T, TaskSubmissionUpdateArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskSubmissions.
     * @param {TaskSubmissionDeleteManyArgs} args - Arguments to filter TaskSubmissions to delete.
     * @example
     * // Delete a few TaskSubmissions
     * const { count } = await prisma.taskSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskSubmissionDeleteManyArgs>(args?: SelectSubset<T, TaskSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskSubmissions
     * const taskSubmission = await prisma.taskSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskSubmissionUpdateManyArgs>(args: SelectSubset<T, TaskSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskSubmissions and returns the data updated in the database.
     * @param {TaskSubmissionUpdateManyAndReturnArgs} args - Arguments to update many TaskSubmissions.
     * @example
     * // Update many TaskSubmissions
     * const taskSubmission = await prisma.taskSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskSubmissions and only return the `userSessionId`
     * const taskSubmissionWithUserSessionIdOnly = await prisma.taskSubmission.updateManyAndReturn({
     *   select: { userSessionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskSubmission.
     * @param {TaskSubmissionUpsertArgs} args - Arguments to update or create a TaskSubmission.
     * @example
     * // Update or create a TaskSubmission
     * const taskSubmission = await prisma.taskSubmission.upsert({
     *   create: {
     *     // ... data to create a TaskSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskSubmission we want to update
     *   }
     * })
     */
    upsert<T extends TaskSubmissionUpsertArgs>(args: SelectSubset<T, TaskSubmissionUpsertArgs<ExtArgs>>): Prisma__TaskSubmissionClient<$Result.GetResult<Prisma.$TaskSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionCountArgs} args - Arguments to filter TaskSubmissions to count.
     * @example
     * // Count the number of TaskSubmissions
     * const count = await prisma.taskSubmission.count({
     *   where: {
     *     // ... the filter for the TaskSubmissions we want to count
     *   }
     * })
    **/
    count<T extends TaskSubmissionCountArgs>(
      args?: Subset<T, TaskSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskSubmissionAggregateArgs>(args: Subset<T, TaskSubmissionAggregateArgs>): Prisma.PrismaPromise<GetTaskSubmissionAggregateType<T>>

    /**
     * Group by TaskSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: TaskSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskSubmission model
   */
  readonly fields: TaskSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userSession<T extends UserSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSessionDefaultArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    taskResult<T extends TaskResultDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskResultDefaultArgs<ExtArgs>>): Prisma__TaskResultClient<$Result.GetResult<Prisma.$TaskResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskSubmission model
   */
  interface TaskSubmissionFieldRefs {
    readonly userSessionId: FieldRef<"TaskSubmission", 'Int'>
    readonly taskId: FieldRef<"TaskSubmission", 'Int'>
    readonly taskResultId: FieldRef<"TaskSubmission", 'Int'>
    readonly submittedAt: FieldRef<"TaskSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TaskSubmission findUnique
   */
  export type TaskSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSubmission to fetch.
     */
    where: TaskSubmissionWhereUniqueInput
  }

  /**
   * TaskSubmission findUniqueOrThrow
   */
  export type TaskSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSubmission to fetch.
     */
    where: TaskSubmissionWhereUniqueInput
  }

  /**
   * TaskSubmission findFirst
   */
  export type TaskSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSubmission to fetch.
     */
    where?: TaskSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSubmissions to fetch.
     */
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskSubmissions.
     */
    cursor?: TaskSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskSubmissions.
     */
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * TaskSubmission findFirstOrThrow
   */
  export type TaskSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSubmission to fetch.
     */
    where?: TaskSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSubmissions to fetch.
     */
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskSubmissions.
     */
    cursor?: TaskSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskSubmissions.
     */
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * TaskSubmission findMany
   */
  export type TaskSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which TaskSubmissions to fetch.
     */
    where?: TaskSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskSubmissions to fetch.
     */
    orderBy?: TaskSubmissionOrderByWithRelationInput | TaskSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskSubmissions.
     */
    cursor?: TaskSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskSubmissions.
     */
    skip?: number
    distinct?: TaskSubmissionScalarFieldEnum | TaskSubmissionScalarFieldEnum[]
  }

  /**
   * TaskSubmission create
   */
  export type TaskSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskSubmission.
     */
    data: XOR<TaskSubmissionCreateInput, TaskSubmissionUncheckedCreateInput>
  }

  /**
   * TaskSubmission createMany
   */
  export type TaskSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskSubmissions.
     */
    data: TaskSubmissionCreateManyInput | TaskSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskSubmission createManyAndReturn
   */
  export type TaskSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many TaskSubmissions.
     */
    data: TaskSubmissionCreateManyInput | TaskSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskSubmission update
   */
  export type TaskSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskSubmission.
     */
    data: XOR<TaskSubmissionUpdateInput, TaskSubmissionUncheckedUpdateInput>
    /**
     * Choose, which TaskSubmission to update.
     */
    where: TaskSubmissionWhereUniqueInput
  }

  /**
   * TaskSubmission updateMany
   */
  export type TaskSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskSubmissions.
     */
    data: XOR<TaskSubmissionUpdateManyMutationInput, TaskSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which TaskSubmissions to update
     */
    where?: TaskSubmissionWhereInput
    /**
     * Limit how many TaskSubmissions to update.
     */
    limit?: number
  }

  /**
   * TaskSubmission updateManyAndReturn
   */
  export type TaskSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update TaskSubmissions.
     */
    data: XOR<TaskSubmissionUpdateManyMutationInput, TaskSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which TaskSubmissions to update
     */
    where?: TaskSubmissionWhereInput
    /**
     * Limit how many TaskSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskSubmission upsert
   */
  export type TaskSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskSubmission to update in case it exists.
     */
    where: TaskSubmissionWhereUniqueInput
    /**
     * In case the TaskSubmission found by the `where` argument doesn't exist, create a new TaskSubmission with this data.
     */
    create: XOR<TaskSubmissionCreateInput, TaskSubmissionUncheckedCreateInput>
    /**
     * In case the TaskSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskSubmissionUpdateInput, TaskSubmissionUncheckedUpdateInput>
  }

  /**
   * TaskSubmission delete
   */
  export type TaskSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
    /**
     * Filter which TaskSubmission to delete.
     */
    where: TaskSubmissionWhereUniqueInput
  }

  /**
   * TaskSubmission deleteMany
   */
  export type TaskSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskSubmissions to delete
     */
    where?: TaskSubmissionWhereInput
    /**
     * Limit how many TaskSubmissions to delete.
     */
    limit?: number
  }

  /**
   * TaskSubmission without action
   */
  export type TaskSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskSubmission
     */
    select?: TaskSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskSubmission
     */
    omit?: TaskSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model VoteContent
   */

  export type AggregateVoteContent = {
    _count: VoteContentCountAggregateOutputType | null
    _avg: VoteContentAvgAggregateOutputType | null
    _sum: VoteContentSumAggregateOutputType | null
    _min: VoteContentMinAggregateOutputType | null
    _max: VoteContentMaxAggregateOutputType | null
  }

  export type VoteContentAvgAggregateOutputType = {
    id: number | null
  }

  export type VoteContentSumAggregateOutputType = {
    id: number | null
  }

  export type VoteContentMinAggregateOutputType = {
    id: number | null
    question: string | null
  }

  export type VoteContentMaxAggregateOutputType = {
    id: number | null
    question: string | null
  }

  export type VoteContentCountAggregateOutputType = {
    id: number
    question: number
    _all: number
  }


  export type VoteContentAvgAggregateInputType = {
    id?: true
  }

  export type VoteContentSumAggregateInputType = {
    id?: true
  }

  export type VoteContentMinAggregateInputType = {
    id?: true
    question?: true
  }

  export type VoteContentMaxAggregateInputType = {
    id?: true
    question?: true
  }

  export type VoteContentCountAggregateInputType = {
    id?: true
    question?: true
    _all?: true
  }

  export type VoteContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteContent to aggregate.
     */
    where?: VoteContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteContents to fetch.
     */
    orderBy?: VoteContentOrderByWithRelationInput | VoteContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoteContents
    **/
    _count?: true | VoteContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteContentMaxAggregateInputType
  }

  export type GetVoteContentAggregateType<T extends VoteContentAggregateArgs> = {
        [P in keyof T & keyof AggregateVoteContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoteContent[P]>
      : GetScalarType<T[P], AggregateVoteContent[P]>
  }




  export type VoteContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteContentWhereInput
    orderBy?: VoteContentOrderByWithAggregationInput | VoteContentOrderByWithAggregationInput[]
    by: VoteContentScalarFieldEnum[] | VoteContentScalarFieldEnum
    having?: VoteContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteContentCountAggregateInputType | true
    _avg?: VoteContentAvgAggregateInputType
    _sum?: VoteContentSumAggregateInputType
    _min?: VoteContentMinAggregateInputType
    _max?: VoteContentMaxAggregateInputType
  }

  export type VoteContentGroupByOutputType = {
    id: number
    question: string
    _count: VoteContentCountAggregateOutputType | null
    _avg: VoteContentAvgAggregateOutputType | null
    _sum: VoteContentSumAggregateOutputType | null
    _min: VoteContentMinAggregateOutputType | null
    _max: VoteContentMaxAggregateOutputType | null
  }

  type GetVoteContentGroupByPayload<T extends VoteContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteContentGroupByOutputType[P]>
            : GetScalarType<T[P], VoteContentGroupByOutputType[P]>
        }
      >
    >


  export type VoteContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    items?: boolean | VoteContent$itemsArgs<ExtArgs>
    _count?: boolean | VoteContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteContent"]>

  export type VoteContentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
  }, ExtArgs["result"]["voteContent"]>

  export type VoteContentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
  }, ExtArgs["result"]["voteContent"]>

  export type VoteContentSelectScalar = {
    id?: boolean
    question?: boolean
  }

  export type VoteContentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question", ExtArgs["result"]["voteContent"]>
  export type VoteContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | VoteContent$itemsArgs<ExtArgs>
    _count?: boolean | VoteContentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VoteContentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VoteContentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VoteContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoteContent"
    objects: {
      items: Prisma.$VoteItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
    }, ExtArgs["result"]["voteContent"]>
    composites: {}
  }

  type VoteContentGetPayload<S extends boolean | null | undefined | VoteContentDefaultArgs> = $Result.GetResult<Prisma.$VoteContentPayload, S>

  type VoteContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoteContentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoteContentCountAggregateInputType | true
    }

  export interface VoteContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoteContent'], meta: { name: 'VoteContent' } }
    /**
     * Find zero or one VoteContent that matches the filter.
     * @param {VoteContentFindUniqueArgs} args - Arguments to find a VoteContent
     * @example
     * // Get one VoteContent
     * const voteContent = await prisma.voteContent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteContentFindUniqueArgs>(args: SelectSubset<T, VoteContentFindUniqueArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VoteContent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoteContentFindUniqueOrThrowArgs} args - Arguments to find a VoteContent
     * @example
     * // Get one VoteContent
     * const voteContent = await prisma.voteContent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteContentFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteContent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentFindFirstArgs} args - Arguments to find a VoteContent
     * @example
     * // Get one VoteContent
     * const voteContent = await prisma.voteContent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteContentFindFirstArgs>(args?: SelectSubset<T, VoteContentFindFirstArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteContent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentFindFirstOrThrowArgs} args - Arguments to find a VoteContent
     * @example
     * // Get one VoteContent
     * const voteContent = await prisma.voteContent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteContentFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteContentFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VoteContents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoteContents
     * const voteContents = await prisma.voteContent.findMany()
     * 
     * // Get first 10 VoteContents
     * const voteContents = await prisma.voteContent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteContentWithIdOnly = await prisma.voteContent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteContentFindManyArgs>(args?: SelectSubset<T, VoteContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VoteContent.
     * @param {VoteContentCreateArgs} args - Arguments to create a VoteContent.
     * @example
     * // Create one VoteContent
     * const VoteContent = await prisma.voteContent.create({
     *   data: {
     *     // ... data to create a VoteContent
     *   }
     * })
     * 
     */
    create<T extends VoteContentCreateArgs>(args: SelectSubset<T, VoteContentCreateArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VoteContents.
     * @param {VoteContentCreateManyArgs} args - Arguments to create many VoteContents.
     * @example
     * // Create many VoteContents
     * const voteContent = await prisma.voteContent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteContentCreateManyArgs>(args?: SelectSubset<T, VoteContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoteContents and returns the data saved in the database.
     * @param {VoteContentCreateManyAndReturnArgs} args - Arguments to create many VoteContents.
     * @example
     * // Create many VoteContents
     * const voteContent = await prisma.voteContent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoteContents and only return the `id`
     * const voteContentWithIdOnly = await prisma.voteContent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteContentCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VoteContent.
     * @param {VoteContentDeleteArgs} args - Arguments to delete one VoteContent.
     * @example
     * // Delete one VoteContent
     * const VoteContent = await prisma.voteContent.delete({
     *   where: {
     *     // ... filter to delete one VoteContent
     *   }
     * })
     * 
     */
    delete<T extends VoteContentDeleteArgs>(args: SelectSubset<T, VoteContentDeleteArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VoteContent.
     * @param {VoteContentUpdateArgs} args - Arguments to update one VoteContent.
     * @example
     * // Update one VoteContent
     * const voteContent = await prisma.voteContent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteContentUpdateArgs>(args: SelectSubset<T, VoteContentUpdateArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VoteContents.
     * @param {VoteContentDeleteManyArgs} args - Arguments to filter VoteContents to delete.
     * @example
     * // Delete a few VoteContents
     * const { count } = await prisma.voteContent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteContentDeleteManyArgs>(args?: SelectSubset<T, VoteContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoteContents
     * const voteContent = await prisma.voteContent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteContentUpdateManyArgs>(args: SelectSubset<T, VoteContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteContents and returns the data updated in the database.
     * @param {VoteContentUpdateManyAndReturnArgs} args - Arguments to update many VoteContents.
     * @example
     * // Update many VoteContents
     * const voteContent = await prisma.voteContent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoteContents and only return the `id`
     * const voteContentWithIdOnly = await prisma.voteContent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoteContentUpdateManyAndReturnArgs>(args: SelectSubset<T, VoteContentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VoteContent.
     * @param {VoteContentUpsertArgs} args - Arguments to update or create a VoteContent.
     * @example
     * // Update or create a VoteContent
     * const voteContent = await prisma.voteContent.upsert({
     *   create: {
     *     // ... data to create a VoteContent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoteContent we want to update
     *   }
     * })
     */
    upsert<T extends VoteContentUpsertArgs>(args: SelectSubset<T, VoteContentUpsertArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VoteContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentCountArgs} args - Arguments to filter VoteContents to count.
     * @example
     * // Count the number of VoteContents
     * const count = await prisma.voteContent.count({
     *   where: {
     *     // ... the filter for the VoteContents we want to count
     *   }
     * })
    **/
    count<T extends VoteContentCountArgs>(
      args?: Subset<T, VoteContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoteContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteContentAggregateArgs>(args: Subset<T, VoteContentAggregateArgs>): Prisma.PrismaPromise<GetVoteContentAggregateType<T>>

    /**
     * Group by VoteContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteContentGroupByArgs['orderBy'] }
        : { orderBy?: VoteContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoteContent model
   */
  readonly fields: VoteContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoteContent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends VoteContent$itemsArgs<ExtArgs> = {}>(args?: Subset<T, VoteContent$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoteContent model
   */
  interface VoteContentFieldRefs {
    readonly id: FieldRef<"VoteContent", 'Int'>
    readonly question: FieldRef<"VoteContent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VoteContent findUnique
   */
  export type VoteContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter, which VoteContent to fetch.
     */
    where: VoteContentWhereUniqueInput
  }

  /**
   * VoteContent findUniqueOrThrow
   */
  export type VoteContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter, which VoteContent to fetch.
     */
    where: VoteContentWhereUniqueInput
  }

  /**
   * VoteContent findFirst
   */
  export type VoteContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter, which VoteContent to fetch.
     */
    where?: VoteContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteContents to fetch.
     */
    orderBy?: VoteContentOrderByWithRelationInput | VoteContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteContents.
     */
    cursor?: VoteContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteContents.
     */
    distinct?: VoteContentScalarFieldEnum | VoteContentScalarFieldEnum[]
  }

  /**
   * VoteContent findFirstOrThrow
   */
  export type VoteContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter, which VoteContent to fetch.
     */
    where?: VoteContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteContents to fetch.
     */
    orderBy?: VoteContentOrderByWithRelationInput | VoteContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteContents.
     */
    cursor?: VoteContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteContents.
     */
    distinct?: VoteContentScalarFieldEnum | VoteContentScalarFieldEnum[]
  }

  /**
   * VoteContent findMany
   */
  export type VoteContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter, which VoteContents to fetch.
     */
    where?: VoteContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteContents to fetch.
     */
    orderBy?: VoteContentOrderByWithRelationInput | VoteContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoteContents.
     */
    cursor?: VoteContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteContents.
     */
    skip?: number
    distinct?: VoteContentScalarFieldEnum | VoteContentScalarFieldEnum[]
  }

  /**
   * VoteContent create
   */
  export type VoteContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * The data needed to create a VoteContent.
     */
    data: XOR<VoteContentCreateInput, VoteContentUncheckedCreateInput>
  }

  /**
   * VoteContent createMany
   */
  export type VoteContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoteContents.
     */
    data: VoteContentCreateManyInput | VoteContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoteContent createManyAndReturn
   */
  export type VoteContentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * The data used to create many VoteContents.
     */
    data: VoteContentCreateManyInput | VoteContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoteContent update
   */
  export type VoteContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * The data needed to update a VoteContent.
     */
    data: XOR<VoteContentUpdateInput, VoteContentUncheckedUpdateInput>
    /**
     * Choose, which VoteContent to update.
     */
    where: VoteContentWhereUniqueInput
  }

  /**
   * VoteContent updateMany
   */
  export type VoteContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoteContents.
     */
    data: XOR<VoteContentUpdateManyMutationInput, VoteContentUncheckedUpdateManyInput>
    /**
     * Filter which VoteContents to update
     */
    where?: VoteContentWhereInput
    /**
     * Limit how many VoteContents to update.
     */
    limit?: number
  }

  /**
   * VoteContent updateManyAndReturn
   */
  export type VoteContentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * The data used to update VoteContents.
     */
    data: XOR<VoteContentUpdateManyMutationInput, VoteContentUncheckedUpdateManyInput>
    /**
     * Filter which VoteContents to update
     */
    where?: VoteContentWhereInput
    /**
     * Limit how many VoteContents to update.
     */
    limit?: number
  }

  /**
   * VoteContent upsert
   */
  export type VoteContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * The filter to search for the VoteContent to update in case it exists.
     */
    where: VoteContentWhereUniqueInput
    /**
     * In case the VoteContent found by the `where` argument doesn't exist, create a new VoteContent with this data.
     */
    create: XOR<VoteContentCreateInput, VoteContentUncheckedCreateInput>
    /**
     * In case the VoteContent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteContentUpdateInput, VoteContentUncheckedUpdateInput>
  }

  /**
   * VoteContent delete
   */
  export type VoteContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
    /**
     * Filter which VoteContent to delete.
     */
    where: VoteContentWhereUniqueInput
  }

  /**
   * VoteContent deleteMany
   */
  export type VoteContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteContents to delete
     */
    where?: VoteContentWhereInput
    /**
     * Limit how many VoteContents to delete.
     */
    limit?: number
  }

  /**
   * VoteContent.items
   */
  export type VoteContent$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    where?: VoteItemWhereInput
    orderBy?: VoteItemOrderByWithRelationInput | VoteItemOrderByWithRelationInput[]
    cursor?: VoteItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteItemScalarFieldEnum | VoteItemScalarFieldEnum[]
  }

  /**
   * VoteContent without action
   */
  export type VoteContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteContent
     */
    select?: VoteContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteContent
     */
    omit?: VoteContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteContentInclude<ExtArgs> | null
  }


  /**
   * Model VoteItem
   */

  export type AggregateVoteItem = {
    _count: VoteItemCountAggregateOutputType | null
    _avg: VoteItemAvgAggregateOutputType | null
    _sum: VoteItemSumAggregateOutputType | null
    _min: VoteItemMinAggregateOutputType | null
    _max: VoteItemMaxAggregateOutputType | null
  }

  export type VoteItemAvgAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type VoteItemSumAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type VoteItemMinAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type VoteItemMaxAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type VoteItemCountAggregateOutputType = {
    id: number
    contentId: number
    _all: number
  }


  export type VoteItemAvgAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type VoteItemSumAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type VoteItemMinAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type VoteItemMaxAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type VoteItemCountAggregateInputType = {
    id?: true
    contentId?: true
    _all?: true
  }

  export type VoteItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteItem to aggregate.
     */
    where?: VoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteItems to fetch.
     */
    orderBy?: VoteItemOrderByWithRelationInput | VoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoteItems
    **/
    _count?: true | VoteItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteItemMaxAggregateInputType
  }

  export type GetVoteItemAggregateType<T extends VoteItemAggregateArgs> = {
        [P in keyof T & keyof AggregateVoteItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoteItem[P]>
      : GetScalarType<T[P], AggregateVoteItem[P]>
  }




  export type VoteItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteItemWhereInput
    orderBy?: VoteItemOrderByWithAggregationInput | VoteItemOrderByWithAggregationInput[]
    by: VoteItemScalarFieldEnum[] | VoteItemScalarFieldEnum
    having?: VoteItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteItemCountAggregateInputType | true
    _avg?: VoteItemAvgAggregateInputType
    _sum?: VoteItemSumAggregateInputType
    _min?: VoteItemMinAggregateInputType
    _max?: VoteItemMaxAggregateInputType
  }

  export type VoteItemGroupByOutputType = {
    id: number
    contentId: number
    _count: VoteItemCountAggregateOutputType | null
    _avg: VoteItemAvgAggregateOutputType | null
    _sum: VoteItemSumAggregateOutputType | null
    _min: VoteItemMinAggregateOutputType | null
    _max: VoteItemMaxAggregateOutputType | null
  }

  type GetVoteItemGroupByPayload<T extends VoteItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteItemGroupByOutputType[P]>
            : GetScalarType<T[P], VoteItemGroupByOutputType[P]>
        }
      >
    >


  export type VoteItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentId?: boolean
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
    submissions?: boolean | VoteItem$submissionsArgs<ExtArgs>
    _count?: boolean | VoteItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteItem"]>

  export type VoteItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentId?: boolean
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteItem"]>

  export type VoteItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentId?: boolean
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteItem"]>

  export type VoteItemSelectScalar = {
    id?: boolean
    contentId?: boolean
  }

  export type VoteItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contentId", ExtArgs["result"]["voteItem"]>
  export type VoteItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
    submissions?: boolean | VoteItem$submissionsArgs<ExtArgs>
    _count?: boolean | VoteItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VoteItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
  }
  export type VoteItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | VoteContentDefaultArgs<ExtArgs>
  }

  export type $VoteItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoteItem"
    objects: {
      content: Prisma.$VoteContentPayload<ExtArgs>
      submissions: Prisma.$VoteSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contentId: number
    }, ExtArgs["result"]["voteItem"]>
    composites: {}
  }

  type VoteItemGetPayload<S extends boolean | null | undefined | VoteItemDefaultArgs> = $Result.GetResult<Prisma.$VoteItemPayload, S>

  type VoteItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoteItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoteItemCountAggregateInputType | true
    }

  export interface VoteItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoteItem'], meta: { name: 'VoteItem' } }
    /**
     * Find zero or one VoteItem that matches the filter.
     * @param {VoteItemFindUniqueArgs} args - Arguments to find a VoteItem
     * @example
     * // Get one VoteItem
     * const voteItem = await prisma.voteItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteItemFindUniqueArgs>(args: SelectSubset<T, VoteItemFindUniqueArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VoteItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoteItemFindUniqueOrThrowArgs} args - Arguments to find a VoteItem
     * @example
     * // Get one VoteItem
     * const voteItem = await prisma.voteItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteItemFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemFindFirstArgs} args - Arguments to find a VoteItem
     * @example
     * // Get one VoteItem
     * const voteItem = await prisma.voteItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteItemFindFirstArgs>(args?: SelectSubset<T, VoteItemFindFirstArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemFindFirstOrThrowArgs} args - Arguments to find a VoteItem
     * @example
     * // Get one VoteItem
     * const voteItem = await prisma.voteItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteItemFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VoteItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoteItems
     * const voteItems = await prisma.voteItem.findMany()
     * 
     * // Get first 10 VoteItems
     * const voteItems = await prisma.voteItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteItemWithIdOnly = await prisma.voteItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteItemFindManyArgs>(args?: SelectSubset<T, VoteItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VoteItem.
     * @param {VoteItemCreateArgs} args - Arguments to create a VoteItem.
     * @example
     * // Create one VoteItem
     * const VoteItem = await prisma.voteItem.create({
     *   data: {
     *     // ... data to create a VoteItem
     *   }
     * })
     * 
     */
    create<T extends VoteItemCreateArgs>(args: SelectSubset<T, VoteItemCreateArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VoteItems.
     * @param {VoteItemCreateManyArgs} args - Arguments to create many VoteItems.
     * @example
     * // Create many VoteItems
     * const voteItem = await prisma.voteItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteItemCreateManyArgs>(args?: SelectSubset<T, VoteItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoteItems and returns the data saved in the database.
     * @param {VoteItemCreateManyAndReturnArgs} args - Arguments to create many VoteItems.
     * @example
     * // Create many VoteItems
     * const voteItem = await prisma.voteItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoteItems and only return the `id`
     * const voteItemWithIdOnly = await prisma.voteItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteItemCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VoteItem.
     * @param {VoteItemDeleteArgs} args - Arguments to delete one VoteItem.
     * @example
     * // Delete one VoteItem
     * const VoteItem = await prisma.voteItem.delete({
     *   where: {
     *     // ... filter to delete one VoteItem
     *   }
     * })
     * 
     */
    delete<T extends VoteItemDeleteArgs>(args: SelectSubset<T, VoteItemDeleteArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VoteItem.
     * @param {VoteItemUpdateArgs} args - Arguments to update one VoteItem.
     * @example
     * // Update one VoteItem
     * const voteItem = await prisma.voteItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteItemUpdateArgs>(args: SelectSubset<T, VoteItemUpdateArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VoteItems.
     * @param {VoteItemDeleteManyArgs} args - Arguments to filter VoteItems to delete.
     * @example
     * // Delete a few VoteItems
     * const { count } = await prisma.voteItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteItemDeleteManyArgs>(args?: SelectSubset<T, VoteItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoteItems
     * const voteItem = await prisma.voteItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteItemUpdateManyArgs>(args: SelectSubset<T, VoteItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteItems and returns the data updated in the database.
     * @param {VoteItemUpdateManyAndReturnArgs} args - Arguments to update many VoteItems.
     * @example
     * // Update many VoteItems
     * const voteItem = await prisma.voteItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoteItems and only return the `id`
     * const voteItemWithIdOnly = await prisma.voteItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoteItemUpdateManyAndReturnArgs>(args: SelectSubset<T, VoteItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VoteItem.
     * @param {VoteItemUpsertArgs} args - Arguments to update or create a VoteItem.
     * @example
     * // Update or create a VoteItem
     * const voteItem = await prisma.voteItem.upsert({
     *   create: {
     *     // ... data to create a VoteItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoteItem we want to update
     *   }
     * })
     */
    upsert<T extends VoteItemUpsertArgs>(args: SelectSubset<T, VoteItemUpsertArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VoteItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemCountArgs} args - Arguments to filter VoteItems to count.
     * @example
     * // Count the number of VoteItems
     * const count = await prisma.voteItem.count({
     *   where: {
     *     // ... the filter for the VoteItems we want to count
     *   }
     * })
    **/
    count<T extends VoteItemCountArgs>(
      args?: Subset<T, VoteItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoteItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteItemAggregateArgs>(args: Subset<T, VoteItemAggregateArgs>): Prisma.PrismaPromise<GetVoteItemAggregateType<T>>

    /**
     * Group by VoteItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteItemGroupByArgs['orderBy'] }
        : { orderBy?: VoteItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoteItem model
   */
  readonly fields: VoteItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoteItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends VoteContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VoteContentDefaultArgs<ExtArgs>>): Prisma__VoteContentClient<$Result.GetResult<Prisma.$VoteContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends VoteItem$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, VoteItem$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoteItem model
   */
  interface VoteItemFieldRefs {
    readonly id: FieldRef<"VoteItem", 'Int'>
    readonly contentId: FieldRef<"VoteItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VoteItem findUnique
   */
  export type VoteItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter, which VoteItem to fetch.
     */
    where: VoteItemWhereUniqueInput
  }

  /**
   * VoteItem findUniqueOrThrow
   */
  export type VoteItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter, which VoteItem to fetch.
     */
    where: VoteItemWhereUniqueInput
  }

  /**
   * VoteItem findFirst
   */
  export type VoteItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter, which VoteItem to fetch.
     */
    where?: VoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteItems to fetch.
     */
    orderBy?: VoteItemOrderByWithRelationInput | VoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteItems.
     */
    cursor?: VoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteItems.
     */
    distinct?: VoteItemScalarFieldEnum | VoteItemScalarFieldEnum[]
  }

  /**
   * VoteItem findFirstOrThrow
   */
  export type VoteItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter, which VoteItem to fetch.
     */
    where?: VoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteItems to fetch.
     */
    orderBy?: VoteItemOrderByWithRelationInput | VoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteItems.
     */
    cursor?: VoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteItems.
     */
    distinct?: VoteItemScalarFieldEnum | VoteItemScalarFieldEnum[]
  }

  /**
   * VoteItem findMany
   */
  export type VoteItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter, which VoteItems to fetch.
     */
    where?: VoteItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteItems to fetch.
     */
    orderBy?: VoteItemOrderByWithRelationInput | VoteItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoteItems.
     */
    cursor?: VoteItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteItems.
     */
    skip?: number
    distinct?: VoteItemScalarFieldEnum | VoteItemScalarFieldEnum[]
  }

  /**
   * VoteItem create
   */
  export type VoteItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * The data needed to create a VoteItem.
     */
    data: XOR<VoteItemCreateInput, VoteItemUncheckedCreateInput>
  }

  /**
   * VoteItem createMany
   */
  export type VoteItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoteItems.
     */
    data: VoteItemCreateManyInput | VoteItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoteItem createManyAndReturn
   */
  export type VoteItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * The data used to create many VoteItems.
     */
    data: VoteItemCreateManyInput | VoteItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoteItem update
   */
  export type VoteItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * The data needed to update a VoteItem.
     */
    data: XOR<VoteItemUpdateInput, VoteItemUncheckedUpdateInput>
    /**
     * Choose, which VoteItem to update.
     */
    where: VoteItemWhereUniqueInput
  }

  /**
   * VoteItem updateMany
   */
  export type VoteItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoteItems.
     */
    data: XOR<VoteItemUpdateManyMutationInput, VoteItemUncheckedUpdateManyInput>
    /**
     * Filter which VoteItems to update
     */
    where?: VoteItemWhereInput
    /**
     * Limit how many VoteItems to update.
     */
    limit?: number
  }

  /**
   * VoteItem updateManyAndReturn
   */
  export type VoteItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * The data used to update VoteItems.
     */
    data: XOR<VoteItemUpdateManyMutationInput, VoteItemUncheckedUpdateManyInput>
    /**
     * Filter which VoteItems to update
     */
    where?: VoteItemWhereInput
    /**
     * Limit how many VoteItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoteItem upsert
   */
  export type VoteItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * The filter to search for the VoteItem to update in case it exists.
     */
    where: VoteItemWhereUniqueInput
    /**
     * In case the VoteItem found by the `where` argument doesn't exist, create a new VoteItem with this data.
     */
    create: XOR<VoteItemCreateInput, VoteItemUncheckedCreateInput>
    /**
     * In case the VoteItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteItemUpdateInput, VoteItemUncheckedUpdateInput>
  }

  /**
   * VoteItem delete
   */
  export type VoteItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
    /**
     * Filter which VoteItem to delete.
     */
    where: VoteItemWhereUniqueInput
  }

  /**
   * VoteItem deleteMany
   */
  export type VoteItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteItems to delete
     */
    where?: VoteItemWhereInput
    /**
     * Limit how many VoteItems to delete.
     */
    limit?: number
  }

  /**
   * VoteItem.submissions
   */
  export type VoteItem$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    where?: VoteSubmissionWhereInput
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    cursor?: VoteSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteSubmissionScalarFieldEnum | VoteSubmissionScalarFieldEnum[]
  }

  /**
   * VoteItem without action
   */
  export type VoteItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteItem
     */
    select?: VoteItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteItem
     */
    omit?: VoteItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteItemInclude<ExtArgs> | null
  }


  /**
   * Model VoteSubmission
   */

  export type AggregateVoteSubmission = {
    _count: VoteSubmissionCountAggregateOutputType | null
    _avg: VoteSubmissionAvgAggregateOutputType | null
    _sum: VoteSubmissionSumAggregateOutputType | null
    _min: VoteSubmissionMinAggregateOutputType | null
    _max: VoteSubmissionMaxAggregateOutputType | null
  }

  export type VoteSubmissionAvgAggregateOutputType = {
    userSessionId: number | null
    itemId: number | null
  }

  export type VoteSubmissionSumAggregateOutputType = {
    userSessionId: number | null
    itemId: number | null
  }

  export type VoteSubmissionMinAggregateOutputType = {
    userSessionId: number | null
    itemId: number | null
    vote: $Enums.VoteOptionsType | null
  }

  export type VoteSubmissionMaxAggregateOutputType = {
    userSessionId: number | null
    itemId: number | null
    vote: $Enums.VoteOptionsType | null
  }

  export type VoteSubmissionCountAggregateOutputType = {
    userSessionId: number
    itemId: number
    vote: number
    _all: number
  }


  export type VoteSubmissionAvgAggregateInputType = {
    userSessionId?: true
    itemId?: true
  }

  export type VoteSubmissionSumAggregateInputType = {
    userSessionId?: true
    itemId?: true
  }

  export type VoteSubmissionMinAggregateInputType = {
    userSessionId?: true
    itemId?: true
    vote?: true
  }

  export type VoteSubmissionMaxAggregateInputType = {
    userSessionId?: true
    itemId?: true
    vote?: true
  }

  export type VoteSubmissionCountAggregateInputType = {
    userSessionId?: true
    itemId?: true
    vote?: true
    _all?: true
  }

  export type VoteSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteSubmission to aggregate.
     */
    where?: VoteSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteSubmissions to fetch.
     */
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoteSubmissions
    **/
    _count?: true | VoteSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteSubmissionMaxAggregateInputType
  }

  export type GetVoteSubmissionAggregateType<T extends VoteSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateVoteSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoteSubmission[P]>
      : GetScalarType<T[P], AggregateVoteSubmission[P]>
  }




  export type VoteSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteSubmissionWhereInput
    orderBy?: VoteSubmissionOrderByWithAggregationInput | VoteSubmissionOrderByWithAggregationInput[]
    by: VoteSubmissionScalarFieldEnum[] | VoteSubmissionScalarFieldEnum
    having?: VoteSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteSubmissionCountAggregateInputType | true
    _avg?: VoteSubmissionAvgAggregateInputType
    _sum?: VoteSubmissionSumAggregateInputType
    _min?: VoteSubmissionMinAggregateInputType
    _max?: VoteSubmissionMaxAggregateInputType
  }

  export type VoteSubmissionGroupByOutputType = {
    userSessionId: number
    itemId: number
    vote: $Enums.VoteOptionsType
    _count: VoteSubmissionCountAggregateOutputType | null
    _avg: VoteSubmissionAvgAggregateOutputType | null
    _sum: VoteSubmissionSumAggregateOutputType | null
    _min: VoteSubmissionMinAggregateOutputType | null
    _max: VoteSubmissionMaxAggregateOutputType | null
  }

  type GetVoteSubmissionGroupByPayload<T extends VoteSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], VoteSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type VoteSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    itemId?: boolean
    vote?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteSubmission"]>

  export type VoteSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    itemId?: boolean
    vote?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteSubmission"]>

  export type VoteSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    itemId?: boolean
    vote?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voteSubmission"]>

  export type VoteSubmissionSelectScalar = {
    userSessionId?: boolean
    itemId?: boolean
    vote?: boolean
  }

  export type VoteSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userSessionId" | "itemId" | "vote", ExtArgs["result"]["voteSubmission"]>
  export type VoteSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }
  export type VoteSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }
  export type VoteSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    item?: boolean | VoteItemDefaultArgs<ExtArgs>
  }

  export type $VoteSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoteSubmission"
    objects: {
      userSession: Prisma.$UserSessionPayload<ExtArgs>
      item: Prisma.$VoteItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userSessionId: number
      itemId: number
      vote: $Enums.VoteOptionsType
    }, ExtArgs["result"]["voteSubmission"]>
    composites: {}
  }

  type VoteSubmissionGetPayload<S extends boolean | null | undefined | VoteSubmissionDefaultArgs> = $Result.GetResult<Prisma.$VoteSubmissionPayload, S>

  type VoteSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoteSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoteSubmissionCountAggregateInputType | true
    }

  export interface VoteSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoteSubmission'], meta: { name: 'VoteSubmission' } }
    /**
     * Find zero or one VoteSubmission that matches the filter.
     * @param {VoteSubmissionFindUniqueArgs} args - Arguments to find a VoteSubmission
     * @example
     * // Get one VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteSubmissionFindUniqueArgs>(args: SelectSubset<T, VoteSubmissionFindUniqueArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VoteSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoteSubmissionFindUniqueOrThrowArgs} args - Arguments to find a VoteSubmission
     * @example
     * // Get one VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionFindFirstArgs} args - Arguments to find a VoteSubmission
     * @example
     * // Get one VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteSubmissionFindFirstArgs>(args?: SelectSubset<T, VoteSubmissionFindFirstArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoteSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionFindFirstOrThrowArgs} args - Arguments to find a VoteSubmission
     * @example
     * // Get one VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VoteSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoteSubmissions
     * const voteSubmissions = await prisma.voteSubmission.findMany()
     * 
     * // Get first 10 VoteSubmissions
     * const voteSubmissions = await prisma.voteSubmission.findMany({ take: 10 })
     * 
     * // Only select the `userSessionId`
     * const voteSubmissionWithUserSessionIdOnly = await prisma.voteSubmission.findMany({ select: { userSessionId: true } })
     * 
     */
    findMany<T extends VoteSubmissionFindManyArgs>(args?: SelectSubset<T, VoteSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VoteSubmission.
     * @param {VoteSubmissionCreateArgs} args - Arguments to create a VoteSubmission.
     * @example
     * // Create one VoteSubmission
     * const VoteSubmission = await prisma.voteSubmission.create({
     *   data: {
     *     // ... data to create a VoteSubmission
     *   }
     * })
     * 
     */
    create<T extends VoteSubmissionCreateArgs>(args: SelectSubset<T, VoteSubmissionCreateArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VoteSubmissions.
     * @param {VoteSubmissionCreateManyArgs} args - Arguments to create many VoteSubmissions.
     * @example
     * // Create many VoteSubmissions
     * const voteSubmission = await prisma.voteSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteSubmissionCreateManyArgs>(args?: SelectSubset<T, VoteSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoteSubmissions and returns the data saved in the database.
     * @param {VoteSubmissionCreateManyAndReturnArgs} args - Arguments to create many VoteSubmissions.
     * @example
     * // Create many VoteSubmissions
     * const voteSubmission = await prisma.voteSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoteSubmissions and only return the `userSessionId`
     * const voteSubmissionWithUserSessionIdOnly = await prisma.voteSubmission.createManyAndReturn({
     *   select: { userSessionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VoteSubmission.
     * @param {VoteSubmissionDeleteArgs} args - Arguments to delete one VoteSubmission.
     * @example
     * // Delete one VoteSubmission
     * const VoteSubmission = await prisma.voteSubmission.delete({
     *   where: {
     *     // ... filter to delete one VoteSubmission
     *   }
     * })
     * 
     */
    delete<T extends VoteSubmissionDeleteArgs>(args: SelectSubset<T, VoteSubmissionDeleteArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VoteSubmission.
     * @param {VoteSubmissionUpdateArgs} args - Arguments to update one VoteSubmission.
     * @example
     * // Update one VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteSubmissionUpdateArgs>(args: SelectSubset<T, VoteSubmissionUpdateArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VoteSubmissions.
     * @param {VoteSubmissionDeleteManyArgs} args - Arguments to filter VoteSubmissions to delete.
     * @example
     * // Delete a few VoteSubmissions
     * const { count } = await prisma.voteSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteSubmissionDeleteManyArgs>(args?: SelectSubset<T, VoteSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoteSubmissions
     * const voteSubmission = await prisma.voteSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteSubmissionUpdateManyArgs>(args: SelectSubset<T, VoteSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoteSubmissions and returns the data updated in the database.
     * @param {VoteSubmissionUpdateManyAndReturnArgs} args - Arguments to update many VoteSubmissions.
     * @example
     * // Update many VoteSubmissions
     * const voteSubmission = await prisma.voteSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoteSubmissions and only return the `userSessionId`
     * const voteSubmissionWithUserSessionIdOnly = await prisma.voteSubmission.updateManyAndReturn({
     *   select: { userSessionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoteSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, VoteSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VoteSubmission.
     * @param {VoteSubmissionUpsertArgs} args - Arguments to update or create a VoteSubmission.
     * @example
     * // Update or create a VoteSubmission
     * const voteSubmission = await prisma.voteSubmission.upsert({
     *   create: {
     *     // ... data to create a VoteSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoteSubmission we want to update
     *   }
     * })
     */
    upsert<T extends VoteSubmissionUpsertArgs>(args: SelectSubset<T, VoteSubmissionUpsertArgs<ExtArgs>>): Prisma__VoteSubmissionClient<$Result.GetResult<Prisma.$VoteSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VoteSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionCountArgs} args - Arguments to filter VoteSubmissions to count.
     * @example
     * // Count the number of VoteSubmissions
     * const count = await prisma.voteSubmission.count({
     *   where: {
     *     // ... the filter for the VoteSubmissions we want to count
     *   }
     * })
    **/
    count<T extends VoteSubmissionCountArgs>(
      args?: Subset<T, VoteSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoteSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteSubmissionAggregateArgs>(args: Subset<T, VoteSubmissionAggregateArgs>): Prisma.PrismaPromise<GetVoteSubmissionAggregateType<T>>

    /**
     * Group by VoteSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: VoteSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoteSubmission model
   */
  readonly fields: VoteSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoteSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userSession<T extends UserSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSessionDefaultArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends VoteItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VoteItemDefaultArgs<ExtArgs>>): Prisma__VoteItemClient<$Result.GetResult<Prisma.$VoteItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoteSubmission model
   */
  interface VoteSubmissionFieldRefs {
    readonly userSessionId: FieldRef<"VoteSubmission", 'Int'>
    readonly itemId: FieldRef<"VoteSubmission", 'Int'>
    readonly vote: FieldRef<"VoteSubmission", 'VoteOptionsType'>
  }
    

  // Custom InputTypes
  /**
   * VoteSubmission findUnique
   */
  export type VoteSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which VoteSubmission to fetch.
     */
    where: VoteSubmissionWhereUniqueInput
  }

  /**
   * VoteSubmission findUniqueOrThrow
   */
  export type VoteSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which VoteSubmission to fetch.
     */
    where: VoteSubmissionWhereUniqueInput
  }

  /**
   * VoteSubmission findFirst
   */
  export type VoteSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which VoteSubmission to fetch.
     */
    where?: VoteSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteSubmissions to fetch.
     */
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteSubmissions.
     */
    cursor?: VoteSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteSubmissions.
     */
    distinct?: VoteSubmissionScalarFieldEnum | VoteSubmissionScalarFieldEnum[]
  }

  /**
   * VoteSubmission findFirstOrThrow
   */
  export type VoteSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which VoteSubmission to fetch.
     */
    where?: VoteSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteSubmissions to fetch.
     */
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoteSubmissions.
     */
    cursor?: VoteSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoteSubmissions.
     */
    distinct?: VoteSubmissionScalarFieldEnum | VoteSubmissionScalarFieldEnum[]
  }

  /**
   * VoteSubmission findMany
   */
  export type VoteSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which VoteSubmissions to fetch.
     */
    where?: VoteSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoteSubmissions to fetch.
     */
    orderBy?: VoteSubmissionOrderByWithRelationInput | VoteSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoteSubmissions.
     */
    cursor?: VoteSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoteSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoteSubmissions.
     */
    skip?: number
    distinct?: VoteSubmissionScalarFieldEnum | VoteSubmissionScalarFieldEnum[]
  }

  /**
   * VoteSubmission create
   */
  export type VoteSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a VoteSubmission.
     */
    data: XOR<VoteSubmissionCreateInput, VoteSubmissionUncheckedCreateInput>
  }

  /**
   * VoteSubmission createMany
   */
  export type VoteSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoteSubmissions.
     */
    data: VoteSubmissionCreateManyInput | VoteSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoteSubmission createManyAndReturn
   */
  export type VoteSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many VoteSubmissions.
     */
    data: VoteSubmissionCreateManyInput | VoteSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoteSubmission update
   */
  export type VoteSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a VoteSubmission.
     */
    data: XOR<VoteSubmissionUpdateInput, VoteSubmissionUncheckedUpdateInput>
    /**
     * Choose, which VoteSubmission to update.
     */
    where: VoteSubmissionWhereUniqueInput
  }

  /**
   * VoteSubmission updateMany
   */
  export type VoteSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoteSubmissions.
     */
    data: XOR<VoteSubmissionUpdateManyMutationInput, VoteSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which VoteSubmissions to update
     */
    where?: VoteSubmissionWhereInput
    /**
     * Limit how many VoteSubmissions to update.
     */
    limit?: number
  }

  /**
   * VoteSubmission updateManyAndReturn
   */
  export type VoteSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update VoteSubmissions.
     */
    data: XOR<VoteSubmissionUpdateManyMutationInput, VoteSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which VoteSubmissions to update
     */
    where?: VoteSubmissionWhereInput
    /**
     * Limit how many VoteSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoteSubmission upsert
   */
  export type VoteSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the VoteSubmission to update in case it exists.
     */
    where: VoteSubmissionWhereUniqueInput
    /**
     * In case the VoteSubmission found by the `where` argument doesn't exist, create a new VoteSubmission with this data.
     */
    create: XOR<VoteSubmissionCreateInput, VoteSubmissionUncheckedCreateInput>
    /**
     * In case the VoteSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteSubmissionUpdateInput, VoteSubmissionUncheckedUpdateInput>
  }

  /**
   * VoteSubmission delete
   */
  export type VoteSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
    /**
     * Filter which VoteSubmission to delete.
     */
    where: VoteSubmissionWhereUniqueInput
  }

  /**
   * VoteSubmission deleteMany
   */
  export type VoteSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoteSubmissions to delete
     */
    where?: VoteSubmissionWhereInput
    /**
     * Limit how many VoteSubmissions to delete.
     */
    limit?: number
  }

  /**
   * VoteSubmission without action
   */
  export type VoteSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoteSubmission
     */
    select?: VoteSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoteSubmission
     */
    omit?: VoteSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model PredictionRound
   */

  export type AggregatePredictionRound = {
    _count: PredictionRoundCountAggregateOutputType | null
    _avg: PredictionRoundAvgAggregateOutputType | null
    _sum: PredictionRoundSumAggregateOutputType | null
    _min: PredictionRoundMinAggregateOutputType | null
    _max: PredictionRoundMaxAggregateOutputType | null
  }

  export type PredictionRoundAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type PredictionRoundSumAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type PredictionRoundMinAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type PredictionRoundMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type PredictionRoundCountAggregateOutputType = {
    id: number
    gameId: number
    _all: number
  }


  export type PredictionRoundAvgAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type PredictionRoundSumAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type PredictionRoundMinAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type PredictionRoundMaxAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type PredictionRoundCountAggregateInputType = {
    id?: true
    gameId?: true
    _all?: true
  }

  export type PredictionRoundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionRound to aggregate.
     */
    where?: PredictionRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionRounds to fetch.
     */
    orderBy?: PredictionRoundOrderByWithRelationInput | PredictionRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredictionRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredictionRounds
    **/
    _count?: true | PredictionRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredictionRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredictionRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredictionRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredictionRoundMaxAggregateInputType
  }

  export type GetPredictionRoundAggregateType<T extends PredictionRoundAggregateArgs> = {
        [P in keyof T & keyof AggregatePredictionRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredictionRound[P]>
      : GetScalarType<T[P], AggregatePredictionRound[P]>
  }




  export type PredictionRoundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionRoundWhereInput
    orderBy?: PredictionRoundOrderByWithAggregationInput | PredictionRoundOrderByWithAggregationInput[]
    by: PredictionRoundScalarFieldEnum[] | PredictionRoundScalarFieldEnum
    having?: PredictionRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredictionRoundCountAggregateInputType | true
    _avg?: PredictionRoundAvgAggregateInputType
    _sum?: PredictionRoundSumAggregateInputType
    _min?: PredictionRoundMinAggregateInputType
    _max?: PredictionRoundMaxAggregateInputType
  }

  export type PredictionRoundGroupByOutputType = {
    id: number
    gameId: number
    _count: PredictionRoundCountAggregateOutputType | null
    _avg: PredictionRoundAvgAggregateOutputType | null
    _sum: PredictionRoundSumAggregateOutputType | null
    _min: PredictionRoundMinAggregateOutputType | null
    _max: PredictionRoundMaxAggregateOutputType | null
  }

  type GetPredictionRoundGroupByPayload<T extends PredictionRoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredictionRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredictionRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredictionRoundGroupByOutputType[P]>
            : GetScalarType<T[P], PredictionRoundGroupByOutputType[P]>
        }
      >
    >


  export type PredictionRoundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    results?: boolean | PredictionRound$resultsArgs<ExtArgs>
    _count?: boolean | PredictionRoundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionRound"]>

  export type PredictionRoundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionRound"]>

  export type PredictionRoundSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionRound"]>

  export type PredictionRoundSelectScalar = {
    id?: boolean
    gameId?: boolean
  }

  export type PredictionRoundOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId", ExtArgs["result"]["predictionRound"]>
  export type PredictionRoundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    results?: boolean | PredictionRound$resultsArgs<ExtArgs>
    _count?: boolean | PredictionRoundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PredictionRoundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type PredictionRoundIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $PredictionRoundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredictionRound"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      results: Prisma.$PredictionResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
    }, ExtArgs["result"]["predictionRound"]>
    composites: {}
  }

  type PredictionRoundGetPayload<S extends boolean | null | undefined | PredictionRoundDefaultArgs> = $Result.GetResult<Prisma.$PredictionRoundPayload, S>

  type PredictionRoundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PredictionRoundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PredictionRoundCountAggregateInputType | true
    }

  export interface PredictionRoundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredictionRound'], meta: { name: 'PredictionRound' } }
    /**
     * Find zero or one PredictionRound that matches the filter.
     * @param {PredictionRoundFindUniqueArgs} args - Arguments to find a PredictionRound
     * @example
     * // Get one PredictionRound
     * const predictionRound = await prisma.predictionRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredictionRoundFindUniqueArgs>(args: SelectSubset<T, PredictionRoundFindUniqueArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PredictionRound that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PredictionRoundFindUniqueOrThrowArgs} args - Arguments to find a PredictionRound
     * @example
     * // Get one PredictionRound
     * const predictionRound = await prisma.predictionRound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredictionRoundFindUniqueOrThrowArgs>(args: SelectSubset<T, PredictionRoundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundFindFirstArgs} args - Arguments to find a PredictionRound
     * @example
     * // Get one PredictionRound
     * const predictionRound = await prisma.predictionRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredictionRoundFindFirstArgs>(args?: SelectSubset<T, PredictionRoundFindFirstArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionRound that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundFindFirstOrThrowArgs} args - Arguments to find a PredictionRound
     * @example
     * // Get one PredictionRound
     * const predictionRound = await prisma.predictionRound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredictionRoundFindFirstOrThrowArgs>(args?: SelectSubset<T, PredictionRoundFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PredictionRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredictionRounds
     * const predictionRounds = await prisma.predictionRound.findMany()
     * 
     * // Get first 10 PredictionRounds
     * const predictionRounds = await prisma.predictionRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predictionRoundWithIdOnly = await prisma.predictionRound.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PredictionRoundFindManyArgs>(args?: SelectSubset<T, PredictionRoundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PredictionRound.
     * @param {PredictionRoundCreateArgs} args - Arguments to create a PredictionRound.
     * @example
     * // Create one PredictionRound
     * const PredictionRound = await prisma.predictionRound.create({
     *   data: {
     *     // ... data to create a PredictionRound
     *   }
     * })
     * 
     */
    create<T extends PredictionRoundCreateArgs>(args: SelectSubset<T, PredictionRoundCreateArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PredictionRounds.
     * @param {PredictionRoundCreateManyArgs} args - Arguments to create many PredictionRounds.
     * @example
     * // Create many PredictionRounds
     * const predictionRound = await prisma.predictionRound.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredictionRoundCreateManyArgs>(args?: SelectSubset<T, PredictionRoundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredictionRounds and returns the data saved in the database.
     * @param {PredictionRoundCreateManyAndReturnArgs} args - Arguments to create many PredictionRounds.
     * @example
     * // Create many PredictionRounds
     * const predictionRound = await prisma.predictionRound.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredictionRounds and only return the `id`
     * const predictionRoundWithIdOnly = await prisma.predictionRound.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredictionRoundCreateManyAndReturnArgs>(args?: SelectSubset<T, PredictionRoundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PredictionRound.
     * @param {PredictionRoundDeleteArgs} args - Arguments to delete one PredictionRound.
     * @example
     * // Delete one PredictionRound
     * const PredictionRound = await prisma.predictionRound.delete({
     *   where: {
     *     // ... filter to delete one PredictionRound
     *   }
     * })
     * 
     */
    delete<T extends PredictionRoundDeleteArgs>(args: SelectSubset<T, PredictionRoundDeleteArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PredictionRound.
     * @param {PredictionRoundUpdateArgs} args - Arguments to update one PredictionRound.
     * @example
     * // Update one PredictionRound
     * const predictionRound = await prisma.predictionRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredictionRoundUpdateArgs>(args: SelectSubset<T, PredictionRoundUpdateArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PredictionRounds.
     * @param {PredictionRoundDeleteManyArgs} args - Arguments to filter PredictionRounds to delete.
     * @example
     * // Delete a few PredictionRounds
     * const { count } = await prisma.predictionRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredictionRoundDeleteManyArgs>(args?: SelectSubset<T, PredictionRoundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredictionRounds
     * const predictionRound = await prisma.predictionRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredictionRoundUpdateManyArgs>(args: SelectSubset<T, PredictionRoundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionRounds and returns the data updated in the database.
     * @param {PredictionRoundUpdateManyAndReturnArgs} args - Arguments to update many PredictionRounds.
     * @example
     * // Update many PredictionRounds
     * const predictionRound = await prisma.predictionRound.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PredictionRounds and only return the `id`
     * const predictionRoundWithIdOnly = await prisma.predictionRound.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PredictionRoundUpdateManyAndReturnArgs>(args: SelectSubset<T, PredictionRoundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PredictionRound.
     * @param {PredictionRoundUpsertArgs} args - Arguments to update or create a PredictionRound.
     * @example
     * // Update or create a PredictionRound
     * const predictionRound = await prisma.predictionRound.upsert({
     *   create: {
     *     // ... data to create a PredictionRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredictionRound we want to update
     *   }
     * })
     */
    upsert<T extends PredictionRoundUpsertArgs>(args: SelectSubset<T, PredictionRoundUpsertArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PredictionRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundCountArgs} args - Arguments to filter PredictionRounds to count.
     * @example
     * // Count the number of PredictionRounds
     * const count = await prisma.predictionRound.count({
     *   where: {
     *     // ... the filter for the PredictionRounds we want to count
     *   }
     * })
    **/
    count<T extends PredictionRoundCountArgs>(
      args?: Subset<T, PredictionRoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredictionRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredictionRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredictionRoundAggregateArgs>(args: Subset<T, PredictionRoundAggregateArgs>): Prisma.PrismaPromise<GetPredictionRoundAggregateType<T>>

    /**
     * Group by PredictionRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredictionRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredictionRoundGroupByArgs['orderBy'] }
        : { orderBy?: PredictionRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredictionRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredictionRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredictionRound model
   */
  readonly fields: PredictionRoundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredictionRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredictionRoundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    results<T extends PredictionRound$resultsArgs<ExtArgs> = {}>(args?: Subset<T, PredictionRound$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredictionRound model
   */
  interface PredictionRoundFieldRefs {
    readonly id: FieldRef<"PredictionRound", 'Int'>
    readonly gameId: FieldRef<"PredictionRound", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PredictionRound findUnique
   */
  export type PredictionRoundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter, which PredictionRound to fetch.
     */
    where: PredictionRoundWhereUniqueInput
  }

  /**
   * PredictionRound findUniqueOrThrow
   */
  export type PredictionRoundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter, which PredictionRound to fetch.
     */
    where: PredictionRoundWhereUniqueInput
  }

  /**
   * PredictionRound findFirst
   */
  export type PredictionRoundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter, which PredictionRound to fetch.
     */
    where?: PredictionRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionRounds to fetch.
     */
    orderBy?: PredictionRoundOrderByWithRelationInput | PredictionRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionRounds.
     */
    cursor?: PredictionRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionRounds.
     */
    distinct?: PredictionRoundScalarFieldEnum | PredictionRoundScalarFieldEnum[]
  }

  /**
   * PredictionRound findFirstOrThrow
   */
  export type PredictionRoundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter, which PredictionRound to fetch.
     */
    where?: PredictionRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionRounds to fetch.
     */
    orderBy?: PredictionRoundOrderByWithRelationInput | PredictionRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionRounds.
     */
    cursor?: PredictionRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionRounds.
     */
    distinct?: PredictionRoundScalarFieldEnum | PredictionRoundScalarFieldEnum[]
  }

  /**
   * PredictionRound findMany
   */
  export type PredictionRoundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter, which PredictionRounds to fetch.
     */
    where?: PredictionRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionRounds to fetch.
     */
    orderBy?: PredictionRoundOrderByWithRelationInput | PredictionRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredictionRounds.
     */
    cursor?: PredictionRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionRounds.
     */
    skip?: number
    distinct?: PredictionRoundScalarFieldEnum | PredictionRoundScalarFieldEnum[]
  }

  /**
   * PredictionRound create
   */
  export type PredictionRoundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * The data needed to create a PredictionRound.
     */
    data: XOR<PredictionRoundCreateInput, PredictionRoundUncheckedCreateInput>
  }

  /**
   * PredictionRound createMany
   */
  export type PredictionRoundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredictionRounds.
     */
    data: PredictionRoundCreateManyInput | PredictionRoundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredictionRound createManyAndReturn
   */
  export type PredictionRoundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * The data used to create many PredictionRounds.
     */
    data: PredictionRoundCreateManyInput | PredictionRoundCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionRound update
   */
  export type PredictionRoundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * The data needed to update a PredictionRound.
     */
    data: XOR<PredictionRoundUpdateInput, PredictionRoundUncheckedUpdateInput>
    /**
     * Choose, which PredictionRound to update.
     */
    where: PredictionRoundWhereUniqueInput
  }

  /**
   * PredictionRound updateMany
   */
  export type PredictionRoundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredictionRounds.
     */
    data: XOR<PredictionRoundUpdateManyMutationInput, PredictionRoundUncheckedUpdateManyInput>
    /**
     * Filter which PredictionRounds to update
     */
    where?: PredictionRoundWhereInput
    /**
     * Limit how many PredictionRounds to update.
     */
    limit?: number
  }

  /**
   * PredictionRound updateManyAndReturn
   */
  export type PredictionRoundUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * The data used to update PredictionRounds.
     */
    data: XOR<PredictionRoundUpdateManyMutationInput, PredictionRoundUncheckedUpdateManyInput>
    /**
     * Filter which PredictionRounds to update
     */
    where?: PredictionRoundWhereInput
    /**
     * Limit how many PredictionRounds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionRound upsert
   */
  export type PredictionRoundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * The filter to search for the PredictionRound to update in case it exists.
     */
    where: PredictionRoundWhereUniqueInput
    /**
     * In case the PredictionRound found by the `where` argument doesn't exist, create a new PredictionRound with this data.
     */
    create: XOR<PredictionRoundCreateInput, PredictionRoundUncheckedCreateInput>
    /**
     * In case the PredictionRound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredictionRoundUpdateInput, PredictionRoundUncheckedUpdateInput>
  }

  /**
   * PredictionRound delete
   */
  export type PredictionRoundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
    /**
     * Filter which PredictionRound to delete.
     */
    where: PredictionRoundWhereUniqueInput
  }

  /**
   * PredictionRound deleteMany
   */
  export type PredictionRoundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionRounds to delete
     */
    where?: PredictionRoundWhereInput
    /**
     * Limit how many PredictionRounds to delete.
     */
    limit?: number
  }

  /**
   * PredictionRound.results
   */
  export type PredictionRound$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    where?: PredictionResultWhereInput
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    cursor?: PredictionResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredictionResultScalarFieldEnum | PredictionResultScalarFieldEnum[]
  }

  /**
   * PredictionRound without action
   */
  export type PredictionRoundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionRound
     */
    select?: PredictionRoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionRound
     */
    omit?: PredictionRoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionRoundInclude<ExtArgs> | null
  }


  /**
   * Model PredictionConfig
   */

  export type AggregatePredictionConfig = {
    _count: PredictionConfigCountAggregateOutputType | null
    _avg: PredictionConfigAvgAggregateOutputType | null
    _sum: PredictionConfigSumAggregateOutputType | null
    _min: PredictionConfigMinAggregateOutputType | null
    _max: PredictionConfigMaxAggregateOutputType | null
  }

  export type PredictionConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type PredictionConfigSumAggregateOutputType = {
    id: number | null
  }

  export type PredictionConfigMinAggregateOutputType = {
    id: number | null
    signal: $Enums.SignalType | null
    difficulty: $Enums.SignalTolerance | null
  }

  export type PredictionConfigMaxAggregateOutputType = {
    id: number | null
    signal: $Enums.SignalType | null
    difficulty: $Enums.SignalTolerance | null
  }

  export type PredictionConfigCountAggregateOutputType = {
    id: number
    signal: number
    difficulty: number
    _all: number
  }


  export type PredictionConfigAvgAggregateInputType = {
    id?: true
  }

  export type PredictionConfigSumAggregateInputType = {
    id?: true
  }

  export type PredictionConfigMinAggregateInputType = {
    id?: true
    signal?: true
    difficulty?: true
  }

  export type PredictionConfigMaxAggregateInputType = {
    id?: true
    signal?: true
    difficulty?: true
  }

  export type PredictionConfigCountAggregateInputType = {
    id?: true
    signal?: true
    difficulty?: true
    _all?: true
  }

  export type PredictionConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionConfig to aggregate.
     */
    where?: PredictionConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionConfigs to fetch.
     */
    orderBy?: PredictionConfigOrderByWithRelationInput | PredictionConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredictionConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredictionConfigs
    **/
    _count?: true | PredictionConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredictionConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredictionConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredictionConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredictionConfigMaxAggregateInputType
  }

  export type GetPredictionConfigAggregateType<T extends PredictionConfigAggregateArgs> = {
        [P in keyof T & keyof AggregatePredictionConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredictionConfig[P]>
      : GetScalarType<T[P], AggregatePredictionConfig[P]>
  }




  export type PredictionConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionConfigWhereInput
    orderBy?: PredictionConfigOrderByWithAggregationInput | PredictionConfigOrderByWithAggregationInput[]
    by: PredictionConfigScalarFieldEnum[] | PredictionConfigScalarFieldEnum
    having?: PredictionConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredictionConfigCountAggregateInputType | true
    _avg?: PredictionConfigAvgAggregateInputType
    _sum?: PredictionConfigSumAggregateInputType
    _min?: PredictionConfigMinAggregateInputType
    _max?: PredictionConfigMaxAggregateInputType
  }

  export type PredictionConfigGroupByOutputType = {
    id: number
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
    _count: PredictionConfigCountAggregateOutputType | null
    _avg: PredictionConfigAvgAggregateOutputType | null
    _sum: PredictionConfigSumAggregateOutputType | null
    _min: PredictionConfigMinAggregateOutputType | null
    _max: PredictionConfigMaxAggregateOutputType | null
  }

  type GetPredictionConfigGroupByPayload<T extends PredictionConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredictionConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredictionConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredictionConfigGroupByOutputType[P]>
            : GetScalarType<T[P], PredictionConfigGroupByOutputType[P]>
        }
      >
    >


  export type PredictionConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signal?: boolean
    difficulty?: boolean
    questions?: boolean | PredictionConfig$questionsArgs<ExtArgs>
    _count?: boolean | PredictionConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionConfig"]>

  export type PredictionConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signal?: boolean
    difficulty?: boolean
  }, ExtArgs["result"]["predictionConfig"]>

  export type PredictionConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signal?: boolean
    difficulty?: boolean
  }, ExtArgs["result"]["predictionConfig"]>

  export type PredictionConfigSelectScalar = {
    id?: boolean
    signal?: boolean
    difficulty?: boolean
  }

  export type PredictionConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signal" | "difficulty", ExtArgs["result"]["predictionConfig"]>
  export type PredictionConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | PredictionConfig$questionsArgs<ExtArgs>
    _count?: boolean | PredictionConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PredictionConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PredictionConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PredictionConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredictionConfig"
    objects: {
      questions: Prisma.$PredictionQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      signal: $Enums.SignalType
      difficulty: $Enums.SignalTolerance
    }, ExtArgs["result"]["predictionConfig"]>
    composites: {}
  }

  type PredictionConfigGetPayload<S extends boolean | null | undefined | PredictionConfigDefaultArgs> = $Result.GetResult<Prisma.$PredictionConfigPayload, S>

  type PredictionConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PredictionConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PredictionConfigCountAggregateInputType | true
    }

  export interface PredictionConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredictionConfig'], meta: { name: 'PredictionConfig' } }
    /**
     * Find zero or one PredictionConfig that matches the filter.
     * @param {PredictionConfigFindUniqueArgs} args - Arguments to find a PredictionConfig
     * @example
     * // Get one PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredictionConfigFindUniqueArgs>(args: SelectSubset<T, PredictionConfigFindUniqueArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PredictionConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PredictionConfigFindUniqueOrThrowArgs} args - Arguments to find a PredictionConfig
     * @example
     * // Get one PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredictionConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, PredictionConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigFindFirstArgs} args - Arguments to find a PredictionConfig
     * @example
     * // Get one PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredictionConfigFindFirstArgs>(args?: SelectSubset<T, PredictionConfigFindFirstArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigFindFirstOrThrowArgs} args - Arguments to find a PredictionConfig
     * @example
     * // Get one PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredictionConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, PredictionConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PredictionConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredictionConfigs
     * const predictionConfigs = await prisma.predictionConfig.findMany()
     * 
     * // Get first 10 PredictionConfigs
     * const predictionConfigs = await prisma.predictionConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predictionConfigWithIdOnly = await prisma.predictionConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PredictionConfigFindManyArgs>(args?: SelectSubset<T, PredictionConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PredictionConfig.
     * @param {PredictionConfigCreateArgs} args - Arguments to create a PredictionConfig.
     * @example
     * // Create one PredictionConfig
     * const PredictionConfig = await prisma.predictionConfig.create({
     *   data: {
     *     // ... data to create a PredictionConfig
     *   }
     * })
     * 
     */
    create<T extends PredictionConfigCreateArgs>(args: SelectSubset<T, PredictionConfigCreateArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PredictionConfigs.
     * @param {PredictionConfigCreateManyArgs} args - Arguments to create many PredictionConfigs.
     * @example
     * // Create many PredictionConfigs
     * const predictionConfig = await prisma.predictionConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredictionConfigCreateManyArgs>(args?: SelectSubset<T, PredictionConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredictionConfigs and returns the data saved in the database.
     * @param {PredictionConfigCreateManyAndReturnArgs} args - Arguments to create many PredictionConfigs.
     * @example
     * // Create many PredictionConfigs
     * const predictionConfig = await prisma.predictionConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredictionConfigs and only return the `id`
     * const predictionConfigWithIdOnly = await prisma.predictionConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredictionConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, PredictionConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PredictionConfig.
     * @param {PredictionConfigDeleteArgs} args - Arguments to delete one PredictionConfig.
     * @example
     * // Delete one PredictionConfig
     * const PredictionConfig = await prisma.predictionConfig.delete({
     *   where: {
     *     // ... filter to delete one PredictionConfig
     *   }
     * })
     * 
     */
    delete<T extends PredictionConfigDeleteArgs>(args: SelectSubset<T, PredictionConfigDeleteArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PredictionConfig.
     * @param {PredictionConfigUpdateArgs} args - Arguments to update one PredictionConfig.
     * @example
     * // Update one PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredictionConfigUpdateArgs>(args: SelectSubset<T, PredictionConfigUpdateArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PredictionConfigs.
     * @param {PredictionConfigDeleteManyArgs} args - Arguments to filter PredictionConfigs to delete.
     * @example
     * // Delete a few PredictionConfigs
     * const { count } = await prisma.predictionConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredictionConfigDeleteManyArgs>(args?: SelectSubset<T, PredictionConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredictionConfigs
     * const predictionConfig = await prisma.predictionConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredictionConfigUpdateManyArgs>(args: SelectSubset<T, PredictionConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionConfigs and returns the data updated in the database.
     * @param {PredictionConfigUpdateManyAndReturnArgs} args - Arguments to update many PredictionConfigs.
     * @example
     * // Update many PredictionConfigs
     * const predictionConfig = await prisma.predictionConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PredictionConfigs and only return the `id`
     * const predictionConfigWithIdOnly = await prisma.predictionConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PredictionConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, PredictionConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PredictionConfig.
     * @param {PredictionConfigUpsertArgs} args - Arguments to update or create a PredictionConfig.
     * @example
     * // Update or create a PredictionConfig
     * const predictionConfig = await prisma.predictionConfig.upsert({
     *   create: {
     *     // ... data to create a PredictionConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredictionConfig we want to update
     *   }
     * })
     */
    upsert<T extends PredictionConfigUpsertArgs>(args: SelectSubset<T, PredictionConfigUpsertArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PredictionConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigCountArgs} args - Arguments to filter PredictionConfigs to count.
     * @example
     * // Count the number of PredictionConfigs
     * const count = await prisma.predictionConfig.count({
     *   where: {
     *     // ... the filter for the PredictionConfigs we want to count
     *   }
     * })
    **/
    count<T extends PredictionConfigCountArgs>(
      args?: Subset<T, PredictionConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredictionConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredictionConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredictionConfigAggregateArgs>(args: Subset<T, PredictionConfigAggregateArgs>): Prisma.PrismaPromise<GetPredictionConfigAggregateType<T>>

    /**
     * Group by PredictionConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredictionConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredictionConfigGroupByArgs['orderBy'] }
        : { orderBy?: PredictionConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredictionConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredictionConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredictionConfig model
   */
  readonly fields: PredictionConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredictionConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredictionConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends PredictionConfig$questionsArgs<ExtArgs> = {}>(args?: Subset<T, PredictionConfig$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredictionConfig model
   */
  interface PredictionConfigFieldRefs {
    readonly id: FieldRef<"PredictionConfig", 'Int'>
    readonly signal: FieldRef<"PredictionConfig", 'SignalType'>
    readonly difficulty: FieldRef<"PredictionConfig", 'SignalTolerance'>
  }
    

  // Custom InputTypes
  /**
   * PredictionConfig findUnique
   */
  export type PredictionConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter, which PredictionConfig to fetch.
     */
    where: PredictionConfigWhereUniqueInput
  }

  /**
   * PredictionConfig findUniqueOrThrow
   */
  export type PredictionConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter, which PredictionConfig to fetch.
     */
    where: PredictionConfigWhereUniqueInput
  }

  /**
   * PredictionConfig findFirst
   */
  export type PredictionConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter, which PredictionConfig to fetch.
     */
    where?: PredictionConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionConfigs to fetch.
     */
    orderBy?: PredictionConfigOrderByWithRelationInput | PredictionConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionConfigs.
     */
    cursor?: PredictionConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionConfigs.
     */
    distinct?: PredictionConfigScalarFieldEnum | PredictionConfigScalarFieldEnum[]
  }

  /**
   * PredictionConfig findFirstOrThrow
   */
  export type PredictionConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter, which PredictionConfig to fetch.
     */
    where?: PredictionConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionConfigs to fetch.
     */
    orderBy?: PredictionConfigOrderByWithRelationInput | PredictionConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionConfigs.
     */
    cursor?: PredictionConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionConfigs.
     */
    distinct?: PredictionConfigScalarFieldEnum | PredictionConfigScalarFieldEnum[]
  }

  /**
   * PredictionConfig findMany
   */
  export type PredictionConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter, which PredictionConfigs to fetch.
     */
    where?: PredictionConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionConfigs to fetch.
     */
    orderBy?: PredictionConfigOrderByWithRelationInput | PredictionConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredictionConfigs.
     */
    cursor?: PredictionConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionConfigs.
     */
    skip?: number
    distinct?: PredictionConfigScalarFieldEnum | PredictionConfigScalarFieldEnum[]
  }

  /**
   * PredictionConfig create
   */
  export type PredictionConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a PredictionConfig.
     */
    data: XOR<PredictionConfigCreateInput, PredictionConfigUncheckedCreateInput>
  }

  /**
   * PredictionConfig createMany
   */
  export type PredictionConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredictionConfigs.
     */
    data: PredictionConfigCreateManyInput | PredictionConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredictionConfig createManyAndReturn
   */
  export type PredictionConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * The data used to create many PredictionConfigs.
     */
    data: PredictionConfigCreateManyInput | PredictionConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredictionConfig update
   */
  export type PredictionConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a PredictionConfig.
     */
    data: XOR<PredictionConfigUpdateInput, PredictionConfigUncheckedUpdateInput>
    /**
     * Choose, which PredictionConfig to update.
     */
    where: PredictionConfigWhereUniqueInput
  }

  /**
   * PredictionConfig updateMany
   */
  export type PredictionConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredictionConfigs.
     */
    data: XOR<PredictionConfigUpdateManyMutationInput, PredictionConfigUncheckedUpdateManyInput>
    /**
     * Filter which PredictionConfigs to update
     */
    where?: PredictionConfigWhereInput
    /**
     * Limit how many PredictionConfigs to update.
     */
    limit?: number
  }

  /**
   * PredictionConfig updateManyAndReturn
   */
  export type PredictionConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * The data used to update PredictionConfigs.
     */
    data: XOR<PredictionConfigUpdateManyMutationInput, PredictionConfigUncheckedUpdateManyInput>
    /**
     * Filter which PredictionConfigs to update
     */
    where?: PredictionConfigWhereInput
    /**
     * Limit how many PredictionConfigs to update.
     */
    limit?: number
  }

  /**
   * PredictionConfig upsert
   */
  export type PredictionConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the PredictionConfig to update in case it exists.
     */
    where: PredictionConfigWhereUniqueInput
    /**
     * In case the PredictionConfig found by the `where` argument doesn't exist, create a new PredictionConfig with this data.
     */
    create: XOR<PredictionConfigCreateInput, PredictionConfigUncheckedCreateInput>
    /**
     * In case the PredictionConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredictionConfigUpdateInput, PredictionConfigUncheckedUpdateInput>
  }

  /**
   * PredictionConfig delete
   */
  export type PredictionConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
    /**
     * Filter which PredictionConfig to delete.
     */
    where: PredictionConfigWhereUniqueInput
  }

  /**
   * PredictionConfig deleteMany
   */
  export type PredictionConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionConfigs to delete
     */
    where?: PredictionConfigWhereInput
    /**
     * Limit how many PredictionConfigs to delete.
     */
    limit?: number
  }

  /**
   * PredictionConfig.questions
   */
  export type PredictionConfig$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    where?: PredictionQuestionWhereInput
    orderBy?: PredictionQuestionOrderByWithRelationInput | PredictionQuestionOrderByWithRelationInput[]
    cursor?: PredictionQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredictionQuestionScalarFieldEnum | PredictionQuestionScalarFieldEnum[]
  }

  /**
   * PredictionConfig without action
   */
  export type PredictionConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionConfig
     */
    select?: PredictionConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionConfig
     */
    omit?: PredictionConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionConfigInclude<ExtArgs> | null
  }


  /**
   * Model PredictionQuestion
   */

  export type AggregatePredictionQuestion = {
    _count: PredictionQuestionCountAggregateOutputType | null
    _avg: PredictionQuestionAvgAggregateOutputType | null
    _sum: PredictionQuestionSumAggregateOutputType | null
    _min: PredictionQuestionMinAggregateOutputType | null
    _max: PredictionQuestionMaxAggregateOutputType | null
  }

  export type PredictionQuestionAvgAggregateOutputType = {
    id: number | null
    predictionConfigId: number | null
  }

  export type PredictionQuestionSumAggregateOutputType = {
    id: number | null
    predictionConfigId: number | null
  }

  export type PredictionQuestionMinAggregateOutputType = {
    id: number | null
    predictionConfigId: number | null
  }

  export type PredictionQuestionMaxAggregateOutputType = {
    id: number | null
    predictionConfigId: number | null
  }

  export type PredictionQuestionCountAggregateOutputType = {
    id: number
    predictionConfigId: number
    _all: number
  }


  export type PredictionQuestionAvgAggregateInputType = {
    id?: true
    predictionConfigId?: true
  }

  export type PredictionQuestionSumAggregateInputType = {
    id?: true
    predictionConfigId?: true
  }

  export type PredictionQuestionMinAggregateInputType = {
    id?: true
    predictionConfigId?: true
  }

  export type PredictionQuestionMaxAggregateInputType = {
    id?: true
    predictionConfigId?: true
  }

  export type PredictionQuestionCountAggregateInputType = {
    id?: true
    predictionConfigId?: true
    _all?: true
  }

  export type PredictionQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionQuestion to aggregate.
     */
    where?: PredictionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionQuestions to fetch.
     */
    orderBy?: PredictionQuestionOrderByWithRelationInput | PredictionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredictionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredictionQuestions
    **/
    _count?: true | PredictionQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredictionQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredictionQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredictionQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredictionQuestionMaxAggregateInputType
  }

  export type GetPredictionQuestionAggregateType<T extends PredictionQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregatePredictionQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredictionQuestion[P]>
      : GetScalarType<T[P], AggregatePredictionQuestion[P]>
  }




  export type PredictionQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionQuestionWhereInput
    orderBy?: PredictionQuestionOrderByWithAggregationInput | PredictionQuestionOrderByWithAggregationInput[]
    by: PredictionQuestionScalarFieldEnum[] | PredictionQuestionScalarFieldEnum
    having?: PredictionQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredictionQuestionCountAggregateInputType | true
    _avg?: PredictionQuestionAvgAggregateInputType
    _sum?: PredictionQuestionSumAggregateInputType
    _min?: PredictionQuestionMinAggregateInputType
    _max?: PredictionQuestionMaxAggregateInputType
  }

  export type PredictionQuestionGroupByOutputType = {
    id: number
    predictionConfigId: number
    _count: PredictionQuestionCountAggregateOutputType | null
    _avg: PredictionQuestionAvgAggregateOutputType | null
    _sum: PredictionQuestionSumAggregateOutputType | null
    _min: PredictionQuestionMinAggregateOutputType | null
    _max: PredictionQuestionMaxAggregateOutputType | null
  }

  type GetPredictionQuestionGroupByPayload<T extends PredictionQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredictionQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredictionQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredictionQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], PredictionQuestionGroupByOutputType[P]>
        }
      >
    >


  export type PredictionQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    predictionConfigId?: boolean
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionQuestion"]>

  export type PredictionQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    predictionConfigId?: boolean
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionQuestion"]>

  export type PredictionQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    predictionConfigId?: boolean
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionQuestion"]>

  export type PredictionQuestionSelectScalar = {
    id?: boolean
    predictionConfigId?: boolean
  }

  export type PredictionQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "predictionConfigId", ExtArgs["result"]["predictionQuestion"]>
  export type PredictionQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }
  export type PredictionQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }
  export type PredictionQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predictionConfig?: boolean | PredictionConfigDefaultArgs<ExtArgs>
  }

  export type $PredictionQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredictionQuestion"
    objects: {
      predictionConfig: Prisma.$PredictionConfigPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      predictionConfigId: number
    }, ExtArgs["result"]["predictionQuestion"]>
    composites: {}
  }

  type PredictionQuestionGetPayload<S extends boolean | null | undefined | PredictionQuestionDefaultArgs> = $Result.GetResult<Prisma.$PredictionQuestionPayload, S>

  type PredictionQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PredictionQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PredictionQuestionCountAggregateInputType | true
    }

  export interface PredictionQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredictionQuestion'], meta: { name: 'PredictionQuestion' } }
    /**
     * Find zero or one PredictionQuestion that matches the filter.
     * @param {PredictionQuestionFindUniqueArgs} args - Arguments to find a PredictionQuestion
     * @example
     * // Get one PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredictionQuestionFindUniqueArgs>(args: SelectSubset<T, PredictionQuestionFindUniqueArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PredictionQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PredictionQuestionFindUniqueOrThrowArgs} args - Arguments to find a PredictionQuestion
     * @example
     * // Get one PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredictionQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, PredictionQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionFindFirstArgs} args - Arguments to find a PredictionQuestion
     * @example
     * // Get one PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredictionQuestionFindFirstArgs>(args?: SelectSubset<T, PredictionQuestionFindFirstArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionFindFirstOrThrowArgs} args - Arguments to find a PredictionQuestion
     * @example
     * // Get one PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredictionQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, PredictionQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PredictionQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredictionQuestions
     * const predictionQuestions = await prisma.predictionQuestion.findMany()
     * 
     * // Get first 10 PredictionQuestions
     * const predictionQuestions = await prisma.predictionQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predictionQuestionWithIdOnly = await prisma.predictionQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PredictionQuestionFindManyArgs>(args?: SelectSubset<T, PredictionQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PredictionQuestion.
     * @param {PredictionQuestionCreateArgs} args - Arguments to create a PredictionQuestion.
     * @example
     * // Create one PredictionQuestion
     * const PredictionQuestion = await prisma.predictionQuestion.create({
     *   data: {
     *     // ... data to create a PredictionQuestion
     *   }
     * })
     * 
     */
    create<T extends PredictionQuestionCreateArgs>(args: SelectSubset<T, PredictionQuestionCreateArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PredictionQuestions.
     * @param {PredictionQuestionCreateManyArgs} args - Arguments to create many PredictionQuestions.
     * @example
     * // Create many PredictionQuestions
     * const predictionQuestion = await prisma.predictionQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredictionQuestionCreateManyArgs>(args?: SelectSubset<T, PredictionQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredictionQuestions and returns the data saved in the database.
     * @param {PredictionQuestionCreateManyAndReturnArgs} args - Arguments to create many PredictionQuestions.
     * @example
     * // Create many PredictionQuestions
     * const predictionQuestion = await prisma.predictionQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredictionQuestions and only return the `id`
     * const predictionQuestionWithIdOnly = await prisma.predictionQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredictionQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, PredictionQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PredictionQuestion.
     * @param {PredictionQuestionDeleteArgs} args - Arguments to delete one PredictionQuestion.
     * @example
     * // Delete one PredictionQuestion
     * const PredictionQuestion = await prisma.predictionQuestion.delete({
     *   where: {
     *     // ... filter to delete one PredictionQuestion
     *   }
     * })
     * 
     */
    delete<T extends PredictionQuestionDeleteArgs>(args: SelectSubset<T, PredictionQuestionDeleteArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PredictionQuestion.
     * @param {PredictionQuestionUpdateArgs} args - Arguments to update one PredictionQuestion.
     * @example
     * // Update one PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredictionQuestionUpdateArgs>(args: SelectSubset<T, PredictionQuestionUpdateArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PredictionQuestions.
     * @param {PredictionQuestionDeleteManyArgs} args - Arguments to filter PredictionQuestions to delete.
     * @example
     * // Delete a few PredictionQuestions
     * const { count } = await prisma.predictionQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredictionQuestionDeleteManyArgs>(args?: SelectSubset<T, PredictionQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredictionQuestions
     * const predictionQuestion = await prisma.predictionQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredictionQuestionUpdateManyArgs>(args: SelectSubset<T, PredictionQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionQuestions and returns the data updated in the database.
     * @param {PredictionQuestionUpdateManyAndReturnArgs} args - Arguments to update many PredictionQuestions.
     * @example
     * // Update many PredictionQuestions
     * const predictionQuestion = await prisma.predictionQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PredictionQuestions and only return the `id`
     * const predictionQuestionWithIdOnly = await prisma.predictionQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PredictionQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, PredictionQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PredictionQuestion.
     * @param {PredictionQuestionUpsertArgs} args - Arguments to update or create a PredictionQuestion.
     * @example
     * // Update or create a PredictionQuestion
     * const predictionQuestion = await prisma.predictionQuestion.upsert({
     *   create: {
     *     // ... data to create a PredictionQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredictionQuestion we want to update
     *   }
     * })
     */
    upsert<T extends PredictionQuestionUpsertArgs>(args: SelectSubset<T, PredictionQuestionUpsertArgs<ExtArgs>>): Prisma__PredictionQuestionClient<$Result.GetResult<Prisma.$PredictionQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PredictionQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionCountArgs} args - Arguments to filter PredictionQuestions to count.
     * @example
     * // Count the number of PredictionQuestions
     * const count = await prisma.predictionQuestion.count({
     *   where: {
     *     // ... the filter for the PredictionQuestions we want to count
     *   }
     * })
    **/
    count<T extends PredictionQuestionCountArgs>(
      args?: Subset<T, PredictionQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredictionQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredictionQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredictionQuestionAggregateArgs>(args: Subset<T, PredictionQuestionAggregateArgs>): Prisma.PrismaPromise<GetPredictionQuestionAggregateType<T>>

    /**
     * Group by PredictionQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredictionQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredictionQuestionGroupByArgs['orderBy'] }
        : { orderBy?: PredictionQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredictionQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredictionQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredictionQuestion model
   */
  readonly fields: PredictionQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredictionQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredictionQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    predictionConfig<T extends PredictionConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PredictionConfigDefaultArgs<ExtArgs>>): Prisma__PredictionConfigClient<$Result.GetResult<Prisma.$PredictionConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredictionQuestion model
   */
  interface PredictionQuestionFieldRefs {
    readonly id: FieldRef<"PredictionQuestion", 'Int'>
    readonly predictionConfigId: FieldRef<"PredictionQuestion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PredictionQuestion findUnique
   */
  export type PredictionQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PredictionQuestion to fetch.
     */
    where: PredictionQuestionWhereUniqueInput
  }

  /**
   * PredictionQuestion findUniqueOrThrow
   */
  export type PredictionQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PredictionQuestion to fetch.
     */
    where: PredictionQuestionWhereUniqueInput
  }

  /**
   * PredictionQuestion findFirst
   */
  export type PredictionQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PredictionQuestion to fetch.
     */
    where?: PredictionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionQuestions to fetch.
     */
    orderBy?: PredictionQuestionOrderByWithRelationInput | PredictionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionQuestions.
     */
    cursor?: PredictionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionQuestions.
     */
    distinct?: PredictionQuestionScalarFieldEnum | PredictionQuestionScalarFieldEnum[]
  }

  /**
   * PredictionQuestion findFirstOrThrow
   */
  export type PredictionQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PredictionQuestion to fetch.
     */
    where?: PredictionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionQuestions to fetch.
     */
    orderBy?: PredictionQuestionOrderByWithRelationInput | PredictionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionQuestions.
     */
    cursor?: PredictionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionQuestions.
     */
    distinct?: PredictionQuestionScalarFieldEnum | PredictionQuestionScalarFieldEnum[]
  }

  /**
   * PredictionQuestion findMany
   */
  export type PredictionQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PredictionQuestions to fetch.
     */
    where?: PredictionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionQuestions to fetch.
     */
    orderBy?: PredictionQuestionOrderByWithRelationInput | PredictionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredictionQuestions.
     */
    cursor?: PredictionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionQuestions.
     */
    skip?: number
    distinct?: PredictionQuestionScalarFieldEnum | PredictionQuestionScalarFieldEnum[]
  }

  /**
   * PredictionQuestion create
   */
  export type PredictionQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a PredictionQuestion.
     */
    data: XOR<PredictionQuestionCreateInput, PredictionQuestionUncheckedCreateInput>
  }

  /**
   * PredictionQuestion createMany
   */
  export type PredictionQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredictionQuestions.
     */
    data: PredictionQuestionCreateManyInput | PredictionQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredictionQuestion createManyAndReturn
   */
  export type PredictionQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many PredictionQuestions.
     */
    data: PredictionQuestionCreateManyInput | PredictionQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionQuestion update
   */
  export type PredictionQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a PredictionQuestion.
     */
    data: XOR<PredictionQuestionUpdateInput, PredictionQuestionUncheckedUpdateInput>
    /**
     * Choose, which PredictionQuestion to update.
     */
    where: PredictionQuestionWhereUniqueInput
  }

  /**
   * PredictionQuestion updateMany
   */
  export type PredictionQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredictionQuestions.
     */
    data: XOR<PredictionQuestionUpdateManyMutationInput, PredictionQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PredictionQuestions to update
     */
    where?: PredictionQuestionWhereInput
    /**
     * Limit how many PredictionQuestions to update.
     */
    limit?: number
  }

  /**
   * PredictionQuestion updateManyAndReturn
   */
  export type PredictionQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * The data used to update PredictionQuestions.
     */
    data: XOR<PredictionQuestionUpdateManyMutationInput, PredictionQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PredictionQuestions to update
     */
    where?: PredictionQuestionWhereInput
    /**
     * Limit how many PredictionQuestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionQuestion upsert
   */
  export type PredictionQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the PredictionQuestion to update in case it exists.
     */
    where: PredictionQuestionWhereUniqueInput
    /**
     * In case the PredictionQuestion found by the `where` argument doesn't exist, create a new PredictionQuestion with this data.
     */
    create: XOR<PredictionQuestionCreateInput, PredictionQuestionUncheckedCreateInput>
    /**
     * In case the PredictionQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredictionQuestionUpdateInput, PredictionQuestionUncheckedUpdateInput>
  }

  /**
   * PredictionQuestion delete
   */
  export type PredictionQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
    /**
     * Filter which PredictionQuestion to delete.
     */
    where: PredictionQuestionWhereUniqueInput
  }

  /**
   * PredictionQuestion deleteMany
   */
  export type PredictionQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionQuestions to delete
     */
    where?: PredictionQuestionWhereInput
    /**
     * Limit how many PredictionQuestions to delete.
     */
    limit?: number
  }

  /**
   * PredictionQuestion without action
   */
  export type PredictionQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionQuestion
     */
    select?: PredictionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionQuestion
     */
    omit?: PredictionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionQuestionInclude<ExtArgs> | null
  }


  /**
   * Model PredictionResult
   */

  export type AggregatePredictionResult = {
    _count: PredictionResultCountAggregateOutputType | null
    _avg: PredictionResultAvgAggregateOutputType | null
    _sum: PredictionResultSumAggregateOutputType | null
    _min: PredictionResultMinAggregateOutputType | null
    _max: PredictionResultMaxAggregateOutputType | null
  }

  export type PredictionResultAvgAggregateOutputType = {
    userSessionId: number | null
    roundId: number | null
  }

  export type PredictionResultSumAggregateOutputType = {
    userSessionId: number | null
    roundId: number | null
  }

  export type PredictionResultMinAggregateOutputType = {
    userSessionId: number | null
    outcome: $Enums.PredictionOutcome | null
    roundId: number | null
  }

  export type PredictionResultMaxAggregateOutputType = {
    userSessionId: number | null
    outcome: $Enums.PredictionOutcome | null
    roundId: number | null
  }

  export type PredictionResultCountAggregateOutputType = {
    userSessionId: number
    outcome: number
    roundId: number
    _all: number
  }


  export type PredictionResultAvgAggregateInputType = {
    userSessionId?: true
    roundId?: true
  }

  export type PredictionResultSumAggregateInputType = {
    userSessionId?: true
    roundId?: true
  }

  export type PredictionResultMinAggregateInputType = {
    userSessionId?: true
    outcome?: true
    roundId?: true
  }

  export type PredictionResultMaxAggregateInputType = {
    userSessionId?: true
    outcome?: true
    roundId?: true
  }

  export type PredictionResultCountAggregateInputType = {
    userSessionId?: true
    outcome?: true
    roundId?: true
    _all?: true
  }

  export type PredictionResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionResult to aggregate.
     */
    where?: PredictionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionResults to fetch.
     */
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredictionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredictionResults
    **/
    _count?: true | PredictionResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredictionResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredictionResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredictionResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredictionResultMaxAggregateInputType
  }

  export type GetPredictionResultAggregateType<T extends PredictionResultAggregateArgs> = {
        [P in keyof T & keyof AggregatePredictionResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredictionResult[P]>
      : GetScalarType<T[P], AggregatePredictionResult[P]>
  }




  export type PredictionResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredictionResultWhereInput
    orderBy?: PredictionResultOrderByWithAggregationInput | PredictionResultOrderByWithAggregationInput[]
    by: PredictionResultScalarFieldEnum[] | PredictionResultScalarFieldEnum
    having?: PredictionResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredictionResultCountAggregateInputType | true
    _avg?: PredictionResultAvgAggregateInputType
    _sum?: PredictionResultSumAggregateInputType
    _min?: PredictionResultMinAggregateInputType
    _max?: PredictionResultMaxAggregateInputType
  }

  export type PredictionResultGroupByOutputType = {
    userSessionId: number
    outcome: $Enums.PredictionOutcome
    roundId: number
    _count: PredictionResultCountAggregateOutputType | null
    _avg: PredictionResultAvgAggregateOutputType | null
    _sum: PredictionResultSumAggregateOutputType | null
    _min: PredictionResultMinAggregateOutputType | null
    _max: PredictionResultMaxAggregateOutputType | null
  }

  type GetPredictionResultGroupByPayload<T extends PredictionResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredictionResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredictionResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredictionResultGroupByOutputType[P]>
            : GetScalarType<T[P], PredictionResultGroupByOutputType[P]>
        }
      >
    >


  export type PredictionResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    outcome?: boolean
    roundId?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionResult"]>

  export type PredictionResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    outcome?: boolean
    roundId?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionResult"]>

  export type PredictionResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userSessionId?: boolean
    outcome?: boolean
    roundId?: boolean
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predictionResult"]>

  export type PredictionResultSelectScalar = {
    userSessionId?: boolean
    outcome?: boolean
    roundId?: boolean
  }

  export type PredictionResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userSessionId" | "outcome" | "roundId", ExtArgs["result"]["predictionResult"]>
  export type PredictionResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }
  export type PredictionResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }
  export type PredictionResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSession?: boolean | UserSessionDefaultArgs<ExtArgs>
    round?: boolean | PredictionRoundDefaultArgs<ExtArgs>
  }

  export type $PredictionResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredictionResult"
    objects: {
      userSession: Prisma.$UserSessionPayload<ExtArgs>
      round: Prisma.$PredictionRoundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userSessionId: number
      outcome: $Enums.PredictionOutcome
      roundId: number
    }, ExtArgs["result"]["predictionResult"]>
    composites: {}
  }

  type PredictionResultGetPayload<S extends boolean | null | undefined | PredictionResultDefaultArgs> = $Result.GetResult<Prisma.$PredictionResultPayload, S>

  type PredictionResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PredictionResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PredictionResultCountAggregateInputType | true
    }

  export interface PredictionResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredictionResult'], meta: { name: 'PredictionResult' } }
    /**
     * Find zero or one PredictionResult that matches the filter.
     * @param {PredictionResultFindUniqueArgs} args - Arguments to find a PredictionResult
     * @example
     * // Get one PredictionResult
     * const predictionResult = await prisma.predictionResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredictionResultFindUniqueArgs>(args: SelectSubset<T, PredictionResultFindUniqueArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PredictionResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PredictionResultFindUniqueOrThrowArgs} args - Arguments to find a PredictionResult
     * @example
     * // Get one PredictionResult
     * const predictionResult = await prisma.predictionResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredictionResultFindUniqueOrThrowArgs>(args: SelectSubset<T, PredictionResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultFindFirstArgs} args - Arguments to find a PredictionResult
     * @example
     * // Get one PredictionResult
     * const predictionResult = await prisma.predictionResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredictionResultFindFirstArgs>(args?: SelectSubset<T, PredictionResultFindFirstArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PredictionResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultFindFirstOrThrowArgs} args - Arguments to find a PredictionResult
     * @example
     * // Get one PredictionResult
     * const predictionResult = await prisma.predictionResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredictionResultFindFirstOrThrowArgs>(args?: SelectSubset<T, PredictionResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PredictionResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredictionResults
     * const predictionResults = await prisma.predictionResult.findMany()
     * 
     * // Get first 10 PredictionResults
     * const predictionResults = await prisma.predictionResult.findMany({ take: 10 })
     * 
     * // Only select the `userSessionId`
     * const predictionResultWithUserSessionIdOnly = await prisma.predictionResult.findMany({ select: { userSessionId: true } })
     * 
     */
    findMany<T extends PredictionResultFindManyArgs>(args?: SelectSubset<T, PredictionResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PredictionResult.
     * @param {PredictionResultCreateArgs} args - Arguments to create a PredictionResult.
     * @example
     * // Create one PredictionResult
     * const PredictionResult = await prisma.predictionResult.create({
     *   data: {
     *     // ... data to create a PredictionResult
     *   }
     * })
     * 
     */
    create<T extends PredictionResultCreateArgs>(args: SelectSubset<T, PredictionResultCreateArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PredictionResults.
     * @param {PredictionResultCreateManyArgs} args - Arguments to create many PredictionResults.
     * @example
     * // Create many PredictionResults
     * const predictionResult = await prisma.predictionResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredictionResultCreateManyArgs>(args?: SelectSubset<T, PredictionResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredictionResults and returns the data saved in the database.
     * @param {PredictionResultCreateManyAndReturnArgs} args - Arguments to create many PredictionResults.
     * @example
     * // Create many PredictionResults
     * const predictionResult = await prisma.predictionResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredictionResults and only return the `userSessionId`
     * const predictionResultWithUserSessionIdOnly = await prisma.predictionResult.createManyAndReturn({
     *   select: { userSessionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredictionResultCreateManyAndReturnArgs>(args?: SelectSubset<T, PredictionResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PredictionResult.
     * @param {PredictionResultDeleteArgs} args - Arguments to delete one PredictionResult.
     * @example
     * // Delete one PredictionResult
     * const PredictionResult = await prisma.predictionResult.delete({
     *   where: {
     *     // ... filter to delete one PredictionResult
     *   }
     * })
     * 
     */
    delete<T extends PredictionResultDeleteArgs>(args: SelectSubset<T, PredictionResultDeleteArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PredictionResult.
     * @param {PredictionResultUpdateArgs} args - Arguments to update one PredictionResult.
     * @example
     * // Update one PredictionResult
     * const predictionResult = await prisma.predictionResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredictionResultUpdateArgs>(args: SelectSubset<T, PredictionResultUpdateArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PredictionResults.
     * @param {PredictionResultDeleteManyArgs} args - Arguments to filter PredictionResults to delete.
     * @example
     * // Delete a few PredictionResults
     * const { count } = await prisma.predictionResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredictionResultDeleteManyArgs>(args?: SelectSubset<T, PredictionResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredictionResults
     * const predictionResult = await prisma.predictionResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredictionResultUpdateManyArgs>(args: SelectSubset<T, PredictionResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredictionResults and returns the data updated in the database.
     * @param {PredictionResultUpdateManyAndReturnArgs} args - Arguments to update many PredictionResults.
     * @example
     * // Update many PredictionResults
     * const predictionResult = await prisma.predictionResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PredictionResults and only return the `userSessionId`
     * const predictionResultWithUserSessionIdOnly = await prisma.predictionResult.updateManyAndReturn({
     *   select: { userSessionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PredictionResultUpdateManyAndReturnArgs>(args: SelectSubset<T, PredictionResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PredictionResult.
     * @param {PredictionResultUpsertArgs} args - Arguments to update or create a PredictionResult.
     * @example
     * // Update or create a PredictionResult
     * const predictionResult = await prisma.predictionResult.upsert({
     *   create: {
     *     // ... data to create a PredictionResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredictionResult we want to update
     *   }
     * })
     */
    upsert<T extends PredictionResultUpsertArgs>(args: SelectSubset<T, PredictionResultUpsertArgs<ExtArgs>>): Prisma__PredictionResultClient<$Result.GetResult<Prisma.$PredictionResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PredictionResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultCountArgs} args - Arguments to filter PredictionResults to count.
     * @example
     * // Count the number of PredictionResults
     * const count = await prisma.predictionResult.count({
     *   where: {
     *     // ... the filter for the PredictionResults we want to count
     *   }
     * })
    **/
    count<T extends PredictionResultCountArgs>(
      args?: Subset<T, PredictionResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredictionResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredictionResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredictionResultAggregateArgs>(args: Subset<T, PredictionResultAggregateArgs>): Prisma.PrismaPromise<GetPredictionResultAggregateType<T>>

    /**
     * Group by PredictionResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredictionResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredictionResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredictionResultGroupByArgs['orderBy'] }
        : { orderBy?: PredictionResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredictionResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredictionResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredictionResult model
   */
  readonly fields: PredictionResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredictionResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredictionResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userSession<T extends UserSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSessionDefaultArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    round<T extends PredictionRoundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PredictionRoundDefaultArgs<ExtArgs>>): Prisma__PredictionRoundClient<$Result.GetResult<Prisma.$PredictionRoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredictionResult model
   */
  interface PredictionResultFieldRefs {
    readonly userSessionId: FieldRef<"PredictionResult", 'Int'>
    readonly outcome: FieldRef<"PredictionResult", 'PredictionOutcome'>
    readonly roundId: FieldRef<"PredictionResult", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PredictionResult findUnique
   */
  export type PredictionResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter, which PredictionResult to fetch.
     */
    where: PredictionResultWhereUniqueInput
  }

  /**
   * PredictionResult findUniqueOrThrow
   */
  export type PredictionResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter, which PredictionResult to fetch.
     */
    where: PredictionResultWhereUniqueInput
  }

  /**
   * PredictionResult findFirst
   */
  export type PredictionResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter, which PredictionResult to fetch.
     */
    where?: PredictionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionResults to fetch.
     */
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionResults.
     */
    cursor?: PredictionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionResults.
     */
    distinct?: PredictionResultScalarFieldEnum | PredictionResultScalarFieldEnum[]
  }

  /**
   * PredictionResult findFirstOrThrow
   */
  export type PredictionResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter, which PredictionResult to fetch.
     */
    where?: PredictionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionResults to fetch.
     */
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredictionResults.
     */
    cursor?: PredictionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredictionResults.
     */
    distinct?: PredictionResultScalarFieldEnum | PredictionResultScalarFieldEnum[]
  }

  /**
   * PredictionResult findMany
   */
  export type PredictionResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter, which PredictionResults to fetch.
     */
    where?: PredictionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredictionResults to fetch.
     */
    orderBy?: PredictionResultOrderByWithRelationInput | PredictionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredictionResults.
     */
    cursor?: PredictionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredictionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredictionResults.
     */
    skip?: number
    distinct?: PredictionResultScalarFieldEnum | PredictionResultScalarFieldEnum[]
  }

  /**
   * PredictionResult create
   */
  export type PredictionResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * The data needed to create a PredictionResult.
     */
    data: XOR<PredictionResultCreateInput, PredictionResultUncheckedCreateInput>
  }

  /**
   * PredictionResult createMany
   */
  export type PredictionResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredictionResults.
     */
    data: PredictionResultCreateManyInput | PredictionResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredictionResult createManyAndReturn
   */
  export type PredictionResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * The data used to create many PredictionResults.
     */
    data: PredictionResultCreateManyInput | PredictionResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionResult update
   */
  export type PredictionResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * The data needed to update a PredictionResult.
     */
    data: XOR<PredictionResultUpdateInput, PredictionResultUncheckedUpdateInput>
    /**
     * Choose, which PredictionResult to update.
     */
    where: PredictionResultWhereUniqueInput
  }

  /**
   * PredictionResult updateMany
   */
  export type PredictionResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredictionResults.
     */
    data: XOR<PredictionResultUpdateManyMutationInput, PredictionResultUncheckedUpdateManyInput>
    /**
     * Filter which PredictionResults to update
     */
    where?: PredictionResultWhereInput
    /**
     * Limit how many PredictionResults to update.
     */
    limit?: number
  }

  /**
   * PredictionResult updateManyAndReturn
   */
  export type PredictionResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * The data used to update PredictionResults.
     */
    data: XOR<PredictionResultUpdateManyMutationInput, PredictionResultUncheckedUpdateManyInput>
    /**
     * Filter which PredictionResults to update
     */
    where?: PredictionResultWhereInput
    /**
     * Limit how many PredictionResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredictionResult upsert
   */
  export type PredictionResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * The filter to search for the PredictionResult to update in case it exists.
     */
    where: PredictionResultWhereUniqueInput
    /**
     * In case the PredictionResult found by the `where` argument doesn't exist, create a new PredictionResult with this data.
     */
    create: XOR<PredictionResultCreateInput, PredictionResultUncheckedCreateInput>
    /**
     * In case the PredictionResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredictionResultUpdateInput, PredictionResultUncheckedUpdateInput>
  }

  /**
   * PredictionResult delete
   */
  export type PredictionResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
    /**
     * Filter which PredictionResult to delete.
     */
    where: PredictionResultWhereUniqueInput
  }

  /**
   * PredictionResult deleteMany
   */
  export type PredictionResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredictionResults to delete
     */
    where?: PredictionResultWhereInput
    /**
     * Limit how many PredictionResults to delete.
     */
    limit?: number
  }

  /**
   * PredictionResult without action
   */
  export type PredictionResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredictionResult
     */
    select?: PredictionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PredictionResult
     */
    omit?: PredictionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredictionResultInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EventScalarFieldEnum: {
    id: 'id',
    link: 'link'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EmailRecordScalarFieldEnum: {
    id: 'id',
    address: 'address',
    createdAt: 'createdAt'
  };

  export type EmailRecordScalarFieldEnum = (typeof EmailRecordScalarFieldEnum)[keyof typeof EmailRecordScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    emailId: 'emailId',
    lastActive: 'lastActive',
    status: 'status',
    gameId: 'gameId'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    configId: 'configId'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameConfigScalarFieldEnum: {
    id: 'id',
    duration: 'duration'
  };

  export type GameConfigScalarFieldEnum = (typeof GameConfigScalarFieldEnum)[keyof typeof GameConfigScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    configId: 'configId',
    prompt: 'prompt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const TaskConfigScalarFieldEnum: {
    id: 'id',
    duration: 'duration',
    submissionType: 'submissionType'
  };

  export type TaskConfigScalarFieldEnum = (typeof TaskConfigScalarFieldEnum)[keyof typeof TaskConfigScalarFieldEnum]


  export const TaskSelectionScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId'
  };

  export type TaskSelectionScalarFieldEnum = (typeof TaskSelectionScalarFieldEnum)[keyof typeof TaskSelectionScalarFieldEnum]


  export const TaskResultScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId'
  };

  export type TaskResultScalarFieldEnum = (typeof TaskResultScalarFieldEnum)[keyof typeof TaskResultScalarFieldEnum]


  export const TaskSubmissionScalarFieldEnum: {
    userSessionId: 'userSessionId',
    taskId: 'taskId',
    taskResultId: 'taskResultId',
    submittedAt: 'submittedAt'
  };

  export type TaskSubmissionScalarFieldEnum = (typeof TaskSubmissionScalarFieldEnum)[keyof typeof TaskSubmissionScalarFieldEnum]


  export const VoteContentScalarFieldEnum: {
    id: 'id',
    question: 'question'
  };

  export type VoteContentScalarFieldEnum = (typeof VoteContentScalarFieldEnum)[keyof typeof VoteContentScalarFieldEnum]


  export const VoteItemScalarFieldEnum: {
    id: 'id',
    contentId: 'contentId'
  };

  export type VoteItemScalarFieldEnum = (typeof VoteItemScalarFieldEnum)[keyof typeof VoteItemScalarFieldEnum]


  export const VoteSubmissionScalarFieldEnum: {
    userSessionId: 'userSessionId',
    itemId: 'itemId',
    vote: 'vote'
  };

  export type VoteSubmissionScalarFieldEnum = (typeof VoteSubmissionScalarFieldEnum)[keyof typeof VoteSubmissionScalarFieldEnum]


  export const PredictionRoundScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId'
  };

  export type PredictionRoundScalarFieldEnum = (typeof PredictionRoundScalarFieldEnum)[keyof typeof PredictionRoundScalarFieldEnum]


  export const PredictionConfigScalarFieldEnum: {
    id: 'id',
    signal: 'signal',
    difficulty: 'difficulty'
  };

  export type PredictionConfigScalarFieldEnum = (typeof PredictionConfigScalarFieldEnum)[keyof typeof PredictionConfigScalarFieldEnum]


  export const PredictionQuestionScalarFieldEnum: {
    id: 'id',
    predictionConfigId: 'predictionConfigId'
  };

  export type PredictionQuestionScalarFieldEnum = (typeof PredictionQuestionScalarFieldEnum)[keyof typeof PredictionQuestionScalarFieldEnum]


  export const PredictionResultScalarFieldEnum: {
    userSessionId: 'userSessionId',
    outcome: 'outcome',
    roundId: 'roundId'
  };

  export type PredictionResultScalarFieldEnum = (typeof PredictionResultScalarFieldEnum)[keyof typeof PredictionResultScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'SessionStatus'
   */
  export type EnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus'>
    


  /**
   * Reference to a field of type 'SessionStatus[]'
   */
  export type ListEnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus[]'>
    


  /**
   * Reference to a field of type 'TaskSubmissionType'
   */
  export type EnumTaskSubmissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskSubmissionType'>
    


  /**
   * Reference to a field of type 'TaskSubmissionType[]'
   */
  export type ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskSubmissionType[]'>
    


  /**
   * Reference to a field of type 'VoteOptionsType'
   */
  export type EnumVoteOptionsTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoteOptionsType'>
    


  /**
   * Reference to a field of type 'VoteOptionsType[]'
   */
  export type ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoteOptionsType[]'>
    


  /**
   * Reference to a field of type 'SignalType'
   */
  export type EnumSignalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalType'>
    


  /**
   * Reference to a field of type 'SignalType[]'
   */
  export type ListEnumSignalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalType[]'>
    


  /**
   * Reference to a field of type 'SignalTolerance'
   */
  export type EnumSignalToleranceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalTolerance'>
    


  /**
   * Reference to a field of type 'SignalTolerance[]'
   */
  export type ListEnumSignalToleranceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalTolerance[]'>
    


  /**
   * Reference to a field of type 'PredictionOutcome'
   */
  export type EnumPredictionOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PredictionOutcome'>
    


  /**
   * Reference to a field of type 'PredictionOutcome[]'
   */
  export type ListEnumPredictionOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PredictionOutcome[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    link?: StringNullableFilter<"Event"> | string | null
    attendees?: EmailRecordListRelationFilter
    game?: GameListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrderInput | SortOrder
    attendees?: EmailRecordOrderByRelationAggregateInput
    game?: GameOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    link?: StringNullableFilter<"Event"> | string | null
    attendees?: EmailRecordListRelationFilter
    game?: GameListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    link?: StringNullableWithAggregatesFilter<"Event"> | string | null
  }

  export type EmailRecordWhereInput = {
    AND?: EmailRecordWhereInput | EmailRecordWhereInput[]
    OR?: EmailRecordWhereInput[]
    NOT?: EmailRecordWhereInput | EmailRecordWhereInput[]
    id?: StringFilter<"EmailRecord"> | string
    address?: StringFilter<"EmailRecord"> | string
    createdAt?: DateTimeFilter<"EmailRecord"> | Date | string
    events?: EventListRelationFilter
    sessions?: UserSessionListRelationFilter
  }

  export type EmailRecordOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
  }

  export type EmailRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address?: string
    AND?: EmailRecordWhereInput | EmailRecordWhereInput[]
    OR?: EmailRecordWhereInput[]
    NOT?: EmailRecordWhereInput | EmailRecordWhereInput[]
    createdAt?: DateTimeFilter<"EmailRecord"> | Date | string
    events?: EventListRelationFilter
    sessions?: UserSessionListRelationFilter
  }, "id" | "address">

  export type EmailRecordOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    _count?: EmailRecordCountOrderByAggregateInput
    _max?: EmailRecordMaxOrderByAggregateInput
    _min?: EmailRecordMinOrderByAggregateInput
  }

  export type EmailRecordScalarWhereWithAggregatesInput = {
    AND?: EmailRecordScalarWhereWithAggregatesInput | EmailRecordScalarWhereWithAggregatesInput[]
    OR?: EmailRecordScalarWhereWithAggregatesInput[]
    NOT?: EmailRecordScalarWhereWithAggregatesInput | EmailRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailRecord"> | string
    address?: StringWithAggregatesFilter<"EmailRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailRecord"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: IntFilter<"UserSession"> | number
    emailId?: StringFilter<"UserSession"> | string
    lastActive?: DateTimeFilter<"UserSession"> | Date | string
    status?: EnumSessionStatusFilter<"UserSession"> | $Enums.SessionStatus
    gameId?: IntFilter<"UserSession"> | number
    email?: XOR<EmailRecordScalarRelationFilter, EmailRecordWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    tasks?: TaskSubmissionListRelationFilter
    votes?: VoteSubmissionListRelationFilter
    predictions?: PredictionResultListRelationFilter
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    emailId?: SortOrder
    lastActive?: SortOrder
    status?: SortOrder
    gameId?: SortOrder
    email?: EmailRecordOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    tasks?: TaskSubmissionOrderByRelationAggregateInput
    votes?: VoteSubmissionOrderByRelationAggregateInput
    predictions?: PredictionResultOrderByRelationAggregateInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    emailId?: StringFilter<"UserSession"> | string
    lastActive?: DateTimeFilter<"UserSession"> | Date | string
    status?: EnumSessionStatusFilter<"UserSession"> | $Enums.SessionStatus
    gameId?: IntFilter<"UserSession"> | number
    email?: XOR<EmailRecordScalarRelationFilter, EmailRecordWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    tasks?: TaskSubmissionListRelationFilter
    votes?: VoteSubmissionListRelationFilter
    predictions?: PredictionResultListRelationFilter
  }, "id">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    emailId?: SortOrder
    lastActive?: SortOrder
    status?: SortOrder
    gameId?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _avg?: UserSessionAvgOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
    _sum?: UserSessionSumOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserSession"> | number
    emailId?: StringWithAggregatesFilter<"UserSession"> | string
    lastActive?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    status?: EnumSessionStatusWithAggregatesFilter<"UserSession"> | $Enums.SessionStatus
    gameId?: IntWithAggregatesFilter<"UserSession"> | number
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    eventId?: StringFilter<"Game"> | string
    configId?: IntFilter<"Game"> | number
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    config?: XOR<GameConfigScalarRelationFilter, GameConfigWhereInput>
    playerSessions?: UserSessionListRelationFilter
    tasks?: TaskSelectionListRelationFilter
    taskResult?: TaskResultListRelationFilter
    predictionRounds?: PredictionRoundListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    configId?: SortOrder
    event?: EventOrderByWithRelationInput
    config?: GameConfigOrderByWithRelationInput
    playerSessions?: UserSessionOrderByRelationAggregateInput
    tasks?: TaskSelectionOrderByRelationAggregateInput
    taskResult?: TaskResultOrderByRelationAggregateInput
    predictionRounds?: PredictionRoundOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    eventId?: StringFilter<"Game"> | string
    configId?: IntFilter<"Game"> | number
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    config?: XOR<GameConfigScalarRelationFilter, GameConfigWhereInput>
    playerSessions?: UserSessionListRelationFilter
    tasks?: TaskSelectionListRelationFilter
    taskResult?: TaskResultListRelationFilter
    predictionRounds?: PredictionRoundListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    configId?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    eventId?: StringWithAggregatesFilter<"Game"> | string
    configId?: IntWithAggregatesFilter<"Game"> | number
  }

  export type GameConfigWhereInput = {
    AND?: GameConfigWhereInput | GameConfigWhereInput[]
    OR?: GameConfigWhereInput[]
    NOT?: GameConfigWhereInput | GameConfigWhereInput[]
    id?: IntFilter<"GameConfig"> | number
    duration?: DateTimeFilter<"GameConfig"> | Date | string
    Games?: GameListRelationFilter
  }

  export type GameConfigOrderByWithRelationInput = {
    id?: SortOrder
    duration?: SortOrder
    Games?: GameOrderByRelationAggregateInput
  }

  export type GameConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameConfigWhereInput | GameConfigWhereInput[]
    OR?: GameConfigWhereInput[]
    NOT?: GameConfigWhereInput | GameConfigWhereInput[]
    duration?: DateTimeFilter<"GameConfig"> | Date | string
    Games?: GameListRelationFilter
  }, "id">

  export type GameConfigOrderByWithAggregationInput = {
    id?: SortOrder
    duration?: SortOrder
    _count?: GameConfigCountOrderByAggregateInput
    _avg?: GameConfigAvgOrderByAggregateInput
    _max?: GameConfigMaxOrderByAggregateInput
    _min?: GameConfigMinOrderByAggregateInput
    _sum?: GameConfigSumOrderByAggregateInput
  }

  export type GameConfigScalarWhereWithAggregatesInput = {
    AND?: GameConfigScalarWhereWithAggregatesInput | GameConfigScalarWhereWithAggregatesInput[]
    OR?: GameConfigScalarWhereWithAggregatesInput[]
    NOT?: GameConfigScalarWhereWithAggregatesInput | GameConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameConfig"> | number
    duration?: DateTimeWithAggregatesFilter<"GameConfig"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: IntFilter<"Task"> | number
    configId?: IntFilter<"Task"> | number
    prompt?: StringFilter<"Task"> | string
    config?: XOR<TaskConfigScalarRelationFilter, TaskConfigWhereInput>
    selected?: TaskSelectionListRelationFilter
    submissions?: TaskSubmissionListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    configId?: SortOrder
    prompt?: SortOrder
    config?: TaskConfigOrderByWithRelationInput
    selected?: TaskSelectionOrderByRelationAggregateInput
    submissions?: TaskSubmissionOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    configId?: IntFilter<"Task"> | number
    prompt?: StringFilter<"Task"> | string
    config?: XOR<TaskConfigScalarRelationFilter, TaskConfigWhereInput>
    selected?: TaskSelectionListRelationFilter
    submissions?: TaskSubmissionListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    configId?: SortOrder
    prompt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Task"> | number
    configId?: IntWithAggregatesFilter<"Task"> | number
    prompt?: StringWithAggregatesFilter<"Task"> | string
  }

  export type TaskConfigWhereInput = {
    AND?: TaskConfigWhereInput | TaskConfigWhereInput[]
    OR?: TaskConfigWhereInput[]
    NOT?: TaskConfigWhereInput | TaskConfigWhereInput[]
    id?: IntFilter<"TaskConfig"> | number
    duration?: DateTimeFilter<"TaskConfig"> | Date | string
    submissionType?: EnumTaskSubmissionTypeFilter<"TaskConfig"> | $Enums.TaskSubmissionType
    task?: TaskListRelationFilter
  }

  export type TaskConfigOrderByWithRelationInput = {
    id?: SortOrder
    duration?: SortOrder
    submissionType?: SortOrder
    task?: TaskOrderByRelationAggregateInput
  }

  export type TaskConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskConfigWhereInput | TaskConfigWhereInput[]
    OR?: TaskConfigWhereInput[]
    NOT?: TaskConfigWhereInput | TaskConfigWhereInput[]
    duration?: DateTimeFilter<"TaskConfig"> | Date | string
    submissionType?: EnumTaskSubmissionTypeFilter<"TaskConfig"> | $Enums.TaskSubmissionType
    task?: TaskListRelationFilter
  }, "id">

  export type TaskConfigOrderByWithAggregationInput = {
    id?: SortOrder
    duration?: SortOrder
    submissionType?: SortOrder
    _count?: TaskConfigCountOrderByAggregateInput
    _avg?: TaskConfigAvgOrderByAggregateInput
    _max?: TaskConfigMaxOrderByAggregateInput
    _min?: TaskConfigMinOrderByAggregateInput
    _sum?: TaskConfigSumOrderByAggregateInput
  }

  export type TaskConfigScalarWhereWithAggregatesInput = {
    AND?: TaskConfigScalarWhereWithAggregatesInput | TaskConfigScalarWhereWithAggregatesInput[]
    OR?: TaskConfigScalarWhereWithAggregatesInput[]
    NOT?: TaskConfigScalarWhereWithAggregatesInput | TaskConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskConfig"> | number
    duration?: DateTimeWithAggregatesFilter<"TaskConfig"> | Date | string
    submissionType?: EnumTaskSubmissionTypeWithAggregatesFilter<"TaskConfig"> | $Enums.TaskSubmissionType
  }

  export type TaskSelectionWhereInput = {
    AND?: TaskSelectionWhereInput | TaskSelectionWhereInput[]
    OR?: TaskSelectionWhereInput[]
    NOT?: TaskSelectionWhereInput | TaskSelectionWhereInput[]
    id?: IntFilter<"TaskSelection"> | number
    gameId?: IntFilter<"TaskSelection"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    task?: TaskListRelationFilter
  }

  export type TaskSelectionOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    game?: GameOrderByWithRelationInput
    task?: TaskOrderByRelationAggregateInput
  }

  export type TaskSelectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskSelectionWhereInput | TaskSelectionWhereInput[]
    OR?: TaskSelectionWhereInput[]
    NOT?: TaskSelectionWhereInput | TaskSelectionWhereInput[]
    gameId?: IntFilter<"TaskSelection"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    task?: TaskListRelationFilter
  }, "id">

  export type TaskSelectionOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    _count?: TaskSelectionCountOrderByAggregateInput
    _avg?: TaskSelectionAvgOrderByAggregateInput
    _max?: TaskSelectionMaxOrderByAggregateInput
    _min?: TaskSelectionMinOrderByAggregateInput
    _sum?: TaskSelectionSumOrderByAggregateInput
  }

  export type TaskSelectionScalarWhereWithAggregatesInput = {
    AND?: TaskSelectionScalarWhereWithAggregatesInput | TaskSelectionScalarWhereWithAggregatesInput[]
    OR?: TaskSelectionScalarWhereWithAggregatesInput[]
    NOT?: TaskSelectionScalarWhereWithAggregatesInput | TaskSelectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskSelection"> | number
    gameId?: IntWithAggregatesFilter<"TaskSelection"> | number
  }

  export type TaskResultWhereInput = {
    AND?: TaskResultWhereInput | TaskResultWhereInput[]
    OR?: TaskResultWhereInput[]
    NOT?: TaskResultWhereInput | TaskResultWhereInput[]
    id?: IntFilter<"TaskResult"> | number
    gameId?: IntFilter<"TaskResult"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    submissions?: TaskSubmissionListRelationFilter
  }

  export type TaskResultOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    game?: GameOrderByWithRelationInput
    submissions?: TaskSubmissionOrderByRelationAggregateInput
  }

  export type TaskResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskResultWhereInput | TaskResultWhereInput[]
    OR?: TaskResultWhereInput[]
    NOT?: TaskResultWhereInput | TaskResultWhereInput[]
    gameId?: IntFilter<"TaskResult"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    submissions?: TaskSubmissionListRelationFilter
  }, "id">

  export type TaskResultOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    _count?: TaskResultCountOrderByAggregateInput
    _avg?: TaskResultAvgOrderByAggregateInput
    _max?: TaskResultMaxOrderByAggregateInput
    _min?: TaskResultMinOrderByAggregateInput
    _sum?: TaskResultSumOrderByAggregateInput
  }

  export type TaskResultScalarWhereWithAggregatesInput = {
    AND?: TaskResultScalarWhereWithAggregatesInput | TaskResultScalarWhereWithAggregatesInput[]
    OR?: TaskResultScalarWhereWithAggregatesInput[]
    NOT?: TaskResultScalarWhereWithAggregatesInput | TaskResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskResult"> | number
    gameId?: IntWithAggregatesFilter<"TaskResult"> | number
  }

  export type TaskSubmissionWhereInput = {
    AND?: TaskSubmissionWhereInput | TaskSubmissionWhereInput[]
    OR?: TaskSubmissionWhereInput[]
    NOT?: TaskSubmissionWhereInput | TaskSubmissionWhereInput[]
    userSessionId?: IntFilter<"TaskSubmission"> | number
    taskId?: IntFilter<"TaskSubmission"> | number
    taskResultId?: IntFilter<"TaskSubmission"> | number
    submittedAt?: DateTimeFilter<"TaskSubmission"> | Date | string
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    taskResult?: XOR<TaskResultScalarRelationFilter, TaskResultWhereInput>
  }

  export type TaskSubmissionOrderByWithRelationInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
    submittedAt?: SortOrder
    userSession?: UserSessionOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    taskResult?: TaskResultOrderByWithRelationInput
  }

  export type TaskSubmissionWhereUniqueInput = Prisma.AtLeast<{
    userSessionId_taskId_taskResultId?: TaskSubmissionUserSessionIdTaskIdTaskResultIdCompoundUniqueInput
    AND?: TaskSubmissionWhereInput | TaskSubmissionWhereInput[]
    OR?: TaskSubmissionWhereInput[]
    NOT?: TaskSubmissionWhereInput | TaskSubmissionWhereInput[]
    userSessionId?: IntFilter<"TaskSubmission"> | number
    taskId?: IntFilter<"TaskSubmission"> | number
    taskResultId?: IntFilter<"TaskSubmission"> | number
    submittedAt?: DateTimeFilter<"TaskSubmission"> | Date | string
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    taskResult?: XOR<TaskResultScalarRelationFilter, TaskResultWhereInput>
  }, "userSessionId_taskId_taskResultId">

  export type TaskSubmissionOrderByWithAggregationInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
    submittedAt?: SortOrder
    _count?: TaskSubmissionCountOrderByAggregateInput
    _avg?: TaskSubmissionAvgOrderByAggregateInput
    _max?: TaskSubmissionMaxOrderByAggregateInput
    _min?: TaskSubmissionMinOrderByAggregateInput
    _sum?: TaskSubmissionSumOrderByAggregateInput
  }

  export type TaskSubmissionScalarWhereWithAggregatesInput = {
    AND?: TaskSubmissionScalarWhereWithAggregatesInput | TaskSubmissionScalarWhereWithAggregatesInput[]
    OR?: TaskSubmissionScalarWhereWithAggregatesInput[]
    NOT?: TaskSubmissionScalarWhereWithAggregatesInput | TaskSubmissionScalarWhereWithAggregatesInput[]
    userSessionId?: IntWithAggregatesFilter<"TaskSubmission"> | number
    taskId?: IntWithAggregatesFilter<"TaskSubmission"> | number
    taskResultId?: IntWithAggregatesFilter<"TaskSubmission"> | number
    submittedAt?: DateTimeWithAggregatesFilter<"TaskSubmission"> | Date | string
  }

  export type VoteContentWhereInput = {
    AND?: VoteContentWhereInput | VoteContentWhereInput[]
    OR?: VoteContentWhereInput[]
    NOT?: VoteContentWhereInput | VoteContentWhereInput[]
    id?: IntFilter<"VoteContent"> | number
    question?: StringFilter<"VoteContent"> | string
    items?: VoteItemListRelationFilter
  }

  export type VoteContentOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    items?: VoteItemOrderByRelationAggregateInput
  }

  export type VoteContentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VoteContentWhereInput | VoteContentWhereInput[]
    OR?: VoteContentWhereInput[]
    NOT?: VoteContentWhereInput | VoteContentWhereInput[]
    question?: StringFilter<"VoteContent"> | string
    items?: VoteItemListRelationFilter
  }, "id">

  export type VoteContentOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    _count?: VoteContentCountOrderByAggregateInput
    _avg?: VoteContentAvgOrderByAggregateInput
    _max?: VoteContentMaxOrderByAggregateInput
    _min?: VoteContentMinOrderByAggregateInput
    _sum?: VoteContentSumOrderByAggregateInput
  }

  export type VoteContentScalarWhereWithAggregatesInput = {
    AND?: VoteContentScalarWhereWithAggregatesInput | VoteContentScalarWhereWithAggregatesInput[]
    OR?: VoteContentScalarWhereWithAggregatesInput[]
    NOT?: VoteContentScalarWhereWithAggregatesInput | VoteContentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VoteContent"> | number
    question?: StringWithAggregatesFilter<"VoteContent"> | string
  }

  export type VoteItemWhereInput = {
    AND?: VoteItemWhereInput | VoteItemWhereInput[]
    OR?: VoteItemWhereInput[]
    NOT?: VoteItemWhereInput | VoteItemWhereInput[]
    id?: IntFilter<"VoteItem"> | number
    contentId?: IntFilter<"VoteItem"> | number
    content?: XOR<VoteContentScalarRelationFilter, VoteContentWhereInput>
    submissions?: VoteSubmissionListRelationFilter
  }

  export type VoteItemOrderByWithRelationInput = {
    id?: SortOrder
    contentId?: SortOrder
    content?: VoteContentOrderByWithRelationInput
    submissions?: VoteSubmissionOrderByRelationAggregateInput
  }

  export type VoteItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VoteItemWhereInput | VoteItemWhereInput[]
    OR?: VoteItemWhereInput[]
    NOT?: VoteItemWhereInput | VoteItemWhereInput[]
    contentId?: IntFilter<"VoteItem"> | number
    content?: XOR<VoteContentScalarRelationFilter, VoteContentWhereInput>
    submissions?: VoteSubmissionListRelationFilter
  }, "id">

  export type VoteItemOrderByWithAggregationInput = {
    id?: SortOrder
    contentId?: SortOrder
    _count?: VoteItemCountOrderByAggregateInput
    _avg?: VoteItemAvgOrderByAggregateInput
    _max?: VoteItemMaxOrderByAggregateInput
    _min?: VoteItemMinOrderByAggregateInput
    _sum?: VoteItemSumOrderByAggregateInput
  }

  export type VoteItemScalarWhereWithAggregatesInput = {
    AND?: VoteItemScalarWhereWithAggregatesInput | VoteItemScalarWhereWithAggregatesInput[]
    OR?: VoteItemScalarWhereWithAggregatesInput[]
    NOT?: VoteItemScalarWhereWithAggregatesInput | VoteItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VoteItem"> | number
    contentId?: IntWithAggregatesFilter<"VoteItem"> | number
  }

  export type VoteSubmissionWhereInput = {
    AND?: VoteSubmissionWhereInput | VoteSubmissionWhereInput[]
    OR?: VoteSubmissionWhereInput[]
    NOT?: VoteSubmissionWhereInput | VoteSubmissionWhereInput[]
    userSessionId?: IntFilter<"VoteSubmission"> | number
    itemId?: IntFilter<"VoteSubmission"> | number
    vote?: EnumVoteOptionsTypeFilter<"VoteSubmission"> | $Enums.VoteOptionsType
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    item?: XOR<VoteItemScalarRelationFilter, VoteItemWhereInput>
  }

  export type VoteSubmissionOrderByWithRelationInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    userSession?: UserSessionOrderByWithRelationInput
    item?: VoteItemOrderByWithRelationInput
  }

  export type VoteSubmissionWhereUniqueInput = Prisma.AtLeast<{
    userSessionId_itemId?: VoteSubmissionUserSessionIdItemIdCompoundUniqueInput
    AND?: VoteSubmissionWhereInput | VoteSubmissionWhereInput[]
    OR?: VoteSubmissionWhereInput[]
    NOT?: VoteSubmissionWhereInput | VoteSubmissionWhereInput[]
    userSessionId?: IntFilter<"VoteSubmission"> | number
    itemId?: IntFilter<"VoteSubmission"> | number
    vote?: EnumVoteOptionsTypeFilter<"VoteSubmission"> | $Enums.VoteOptionsType
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    item?: XOR<VoteItemScalarRelationFilter, VoteItemWhereInput>
  }, "userSessionId_itemId">

  export type VoteSubmissionOrderByWithAggregationInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
    _count?: VoteSubmissionCountOrderByAggregateInput
    _avg?: VoteSubmissionAvgOrderByAggregateInput
    _max?: VoteSubmissionMaxOrderByAggregateInput
    _min?: VoteSubmissionMinOrderByAggregateInput
    _sum?: VoteSubmissionSumOrderByAggregateInput
  }

  export type VoteSubmissionScalarWhereWithAggregatesInput = {
    AND?: VoteSubmissionScalarWhereWithAggregatesInput | VoteSubmissionScalarWhereWithAggregatesInput[]
    OR?: VoteSubmissionScalarWhereWithAggregatesInput[]
    NOT?: VoteSubmissionScalarWhereWithAggregatesInput | VoteSubmissionScalarWhereWithAggregatesInput[]
    userSessionId?: IntWithAggregatesFilter<"VoteSubmission"> | number
    itemId?: IntWithAggregatesFilter<"VoteSubmission"> | number
    vote?: EnumVoteOptionsTypeWithAggregatesFilter<"VoteSubmission"> | $Enums.VoteOptionsType
  }

  export type PredictionRoundWhereInput = {
    AND?: PredictionRoundWhereInput | PredictionRoundWhereInput[]
    OR?: PredictionRoundWhereInput[]
    NOT?: PredictionRoundWhereInput | PredictionRoundWhereInput[]
    id?: IntFilter<"PredictionRound"> | number
    gameId?: IntFilter<"PredictionRound"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    results?: PredictionResultListRelationFilter
  }

  export type PredictionRoundOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    game?: GameOrderByWithRelationInput
    results?: PredictionResultOrderByRelationAggregateInput
  }

  export type PredictionRoundWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PredictionRoundWhereInput | PredictionRoundWhereInput[]
    OR?: PredictionRoundWhereInput[]
    NOT?: PredictionRoundWhereInput | PredictionRoundWhereInput[]
    gameId?: IntFilter<"PredictionRound"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    results?: PredictionResultListRelationFilter
  }, "id">

  export type PredictionRoundOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    _count?: PredictionRoundCountOrderByAggregateInput
    _avg?: PredictionRoundAvgOrderByAggregateInput
    _max?: PredictionRoundMaxOrderByAggregateInput
    _min?: PredictionRoundMinOrderByAggregateInput
    _sum?: PredictionRoundSumOrderByAggregateInput
  }

  export type PredictionRoundScalarWhereWithAggregatesInput = {
    AND?: PredictionRoundScalarWhereWithAggregatesInput | PredictionRoundScalarWhereWithAggregatesInput[]
    OR?: PredictionRoundScalarWhereWithAggregatesInput[]
    NOT?: PredictionRoundScalarWhereWithAggregatesInput | PredictionRoundScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PredictionRound"> | number
    gameId?: IntWithAggregatesFilter<"PredictionRound"> | number
  }

  export type PredictionConfigWhereInput = {
    AND?: PredictionConfigWhereInput | PredictionConfigWhereInput[]
    OR?: PredictionConfigWhereInput[]
    NOT?: PredictionConfigWhereInput | PredictionConfigWhereInput[]
    id?: IntFilter<"PredictionConfig"> | number
    signal?: EnumSignalTypeFilter<"PredictionConfig"> | $Enums.SignalType
    difficulty?: EnumSignalToleranceFilter<"PredictionConfig"> | $Enums.SignalTolerance
    questions?: PredictionQuestionListRelationFilter
  }

  export type PredictionConfigOrderByWithRelationInput = {
    id?: SortOrder
    signal?: SortOrder
    difficulty?: SortOrder
    questions?: PredictionQuestionOrderByRelationAggregateInput
  }

  export type PredictionConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PredictionConfigWhereInput | PredictionConfigWhereInput[]
    OR?: PredictionConfigWhereInput[]
    NOT?: PredictionConfigWhereInput | PredictionConfigWhereInput[]
    signal?: EnumSignalTypeFilter<"PredictionConfig"> | $Enums.SignalType
    difficulty?: EnumSignalToleranceFilter<"PredictionConfig"> | $Enums.SignalTolerance
    questions?: PredictionQuestionListRelationFilter
  }, "id">

  export type PredictionConfigOrderByWithAggregationInput = {
    id?: SortOrder
    signal?: SortOrder
    difficulty?: SortOrder
    _count?: PredictionConfigCountOrderByAggregateInput
    _avg?: PredictionConfigAvgOrderByAggregateInput
    _max?: PredictionConfigMaxOrderByAggregateInput
    _min?: PredictionConfigMinOrderByAggregateInput
    _sum?: PredictionConfigSumOrderByAggregateInput
  }

  export type PredictionConfigScalarWhereWithAggregatesInput = {
    AND?: PredictionConfigScalarWhereWithAggregatesInput | PredictionConfigScalarWhereWithAggregatesInput[]
    OR?: PredictionConfigScalarWhereWithAggregatesInput[]
    NOT?: PredictionConfigScalarWhereWithAggregatesInput | PredictionConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PredictionConfig"> | number
    signal?: EnumSignalTypeWithAggregatesFilter<"PredictionConfig"> | $Enums.SignalType
    difficulty?: EnumSignalToleranceWithAggregatesFilter<"PredictionConfig"> | $Enums.SignalTolerance
  }

  export type PredictionQuestionWhereInput = {
    AND?: PredictionQuestionWhereInput | PredictionQuestionWhereInput[]
    OR?: PredictionQuestionWhereInput[]
    NOT?: PredictionQuestionWhereInput | PredictionQuestionWhereInput[]
    id?: IntFilter<"PredictionQuestion"> | number
    predictionConfigId?: IntFilter<"PredictionQuestion"> | number
    predictionConfig?: XOR<PredictionConfigScalarRelationFilter, PredictionConfigWhereInput>
  }

  export type PredictionQuestionOrderByWithRelationInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
    predictionConfig?: PredictionConfigOrderByWithRelationInput
  }

  export type PredictionQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PredictionQuestionWhereInput | PredictionQuestionWhereInput[]
    OR?: PredictionQuestionWhereInput[]
    NOT?: PredictionQuestionWhereInput | PredictionQuestionWhereInput[]
    predictionConfigId?: IntFilter<"PredictionQuestion"> | number
    predictionConfig?: XOR<PredictionConfigScalarRelationFilter, PredictionConfigWhereInput>
  }, "id">

  export type PredictionQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
    _count?: PredictionQuestionCountOrderByAggregateInput
    _avg?: PredictionQuestionAvgOrderByAggregateInput
    _max?: PredictionQuestionMaxOrderByAggregateInput
    _min?: PredictionQuestionMinOrderByAggregateInput
    _sum?: PredictionQuestionSumOrderByAggregateInput
  }

  export type PredictionQuestionScalarWhereWithAggregatesInput = {
    AND?: PredictionQuestionScalarWhereWithAggregatesInput | PredictionQuestionScalarWhereWithAggregatesInput[]
    OR?: PredictionQuestionScalarWhereWithAggregatesInput[]
    NOT?: PredictionQuestionScalarWhereWithAggregatesInput | PredictionQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PredictionQuestion"> | number
    predictionConfigId?: IntWithAggregatesFilter<"PredictionQuestion"> | number
  }

  export type PredictionResultWhereInput = {
    AND?: PredictionResultWhereInput | PredictionResultWhereInput[]
    OR?: PredictionResultWhereInput[]
    NOT?: PredictionResultWhereInput | PredictionResultWhereInput[]
    userSessionId?: IntFilter<"PredictionResult"> | number
    outcome?: EnumPredictionOutcomeFilter<"PredictionResult"> | $Enums.PredictionOutcome
    roundId?: IntFilter<"PredictionResult"> | number
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    round?: XOR<PredictionRoundScalarRelationFilter, PredictionRoundWhereInput>
  }

  export type PredictionResultOrderByWithRelationInput = {
    userSessionId?: SortOrder
    outcome?: SortOrder
    roundId?: SortOrder
    userSession?: UserSessionOrderByWithRelationInput
    round?: PredictionRoundOrderByWithRelationInput
  }

  export type PredictionResultWhereUniqueInput = Prisma.AtLeast<{
    userSessionId_roundId?: PredictionResultUserSessionIdRoundIdCompoundUniqueInput
    AND?: PredictionResultWhereInput | PredictionResultWhereInput[]
    OR?: PredictionResultWhereInput[]
    NOT?: PredictionResultWhereInput | PredictionResultWhereInput[]
    userSessionId?: IntFilter<"PredictionResult"> | number
    outcome?: EnumPredictionOutcomeFilter<"PredictionResult"> | $Enums.PredictionOutcome
    roundId?: IntFilter<"PredictionResult"> | number
    userSession?: XOR<UserSessionScalarRelationFilter, UserSessionWhereInput>
    round?: XOR<PredictionRoundScalarRelationFilter, PredictionRoundWhereInput>
  }, "userSessionId_roundId">

  export type PredictionResultOrderByWithAggregationInput = {
    userSessionId?: SortOrder
    outcome?: SortOrder
    roundId?: SortOrder
    _count?: PredictionResultCountOrderByAggregateInput
    _avg?: PredictionResultAvgOrderByAggregateInput
    _max?: PredictionResultMaxOrderByAggregateInput
    _min?: PredictionResultMinOrderByAggregateInput
    _sum?: PredictionResultSumOrderByAggregateInput
  }

  export type PredictionResultScalarWhereWithAggregatesInput = {
    AND?: PredictionResultScalarWhereWithAggregatesInput | PredictionResultScalarWhereWithAggregatesInput[]
    OR?: PredictionResultScalarWhereWithAggregatesInput[]
    NOT?: PredictionResultScalarWhereWithAggregatesInput | PredictionResultScalarWhereWithAggregatesInput[]
    userSessionId?: IntWithAggregatesFilter<"PredictionResult"> | number
    outcome?: EnumPredictionOutcomeWithAggregatesFilter<"PredictionResult"> | $Enums.PredictionOutcome
    roundId?: IntWithAggregatesFilter<"PredictionResult"> | number
  }

  export type EventCreateInput = {
    id?: string
    link?: string | null
    attendees?: EmailRecordCreateNestedManyWithoutEventsInput
    game?: GameCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    link?: string | null
    attendees?: EmailRecordUncheckedCreateNestedManyWithoutEventsInput
    game?: GameUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: EmailRecordUpdateManyWithoutEventsNestedInput
    game?: GameUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: EmailRecordUncheckedUpdateManyWithoutEventsNestedInput
    game?: GameUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    link?: string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailRecordCreateInput = {
    id?: string
    address: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutAttendeesInput
    sessions?: UserSessionCreateNestedManyWithoutEmailInput
  }

  export type EmailRecordUncheckedCreateInput = {
    id?: string
    address: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutAttendeesInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutAttendeesNestedInput
    sessions?: UserSessionUpdateManyWithoutEmailNestedInput
  }

  export type EmailRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutAttendeesNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailRecordCreateManyInput = {
    id?: string
    address: string
    createdAt?: Date | string
  }

  export type EmailRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    email: EmailRecordCreateNestedOneWithoutSessionsInput
    game: GameCreateNestedOneWithoutPlayerSessionsInput
    tasks?: TaskSubmissionCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
    tasks?: TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUpdateInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    email?: EmailRecordUpdateOneRequiredWithoutSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutPlayerSessionsNestedInput
    tasks?: TaskSubmissionUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionCreateManyInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
  }

  export type UserSessionUpdateManyMutationInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateInput = {
    event: EventCreateNestedOneWithoutGameInput
    config: GameConfigCreateNestedOneWithoutGamesInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    eventId: string
    configId: number
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    eventId: string
    configId: number
  }

  export type GameUpdateManyMutationInput = {

  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
  }

  export type GameConfigCreateInput = {
    duration: Date | string
    Games?: GameCreateNestedManyWithoutConfigInput
  }

  export type GameConfigUncheckedCreateInput = {
    id?: number
    duration: Date | string
    Games?: GameUncheckedCreateNestedManyWithoutConfigInput
  }

  export type GameConfigUpdateInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    Games?: GameUpdateManyWithoutConfigNestedInput
  }

  export type GameConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    Games?: GameUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type GameConfigCreateManyInput = {
    id?: number
    duration: Date | string
  }

  export type GameConfigUpdateManyMutationInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    prompt: string
    config: TaskConfigCreateNestedOneWithoutTaskInput
    selected?: TaskSelectionCreateNestedManyWithoutTaskInput
    submissions?: TaskSubmissionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: number
    configId: number
    prompt: string
    selected?: TaskSelectionUncheckedCreateNestedManyWithoutTaskInput
    submissions?: TaskSubmissionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    prompt?: StringFieldUpdateOperationsInput | string
    config?: TaskConfigUpdateOneRequiredWithoutTaskNestedInput
    selected?: TaskSelectionUpdateManyWithoutTaskNestedInput
    submissions?: TaskSubmissionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    selected?: TaskSelectionUncheckedUpdateManyWithoutTaskNestedInput
    submissions?: TaskSubmissionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: number
    configId: number
    prompt: string
  }

  export type TaskUpdateManyMutationInput = {
    prompt?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
  }

  export type TaskConfigCreateInput = {
    duration: Date | string
    submissionType: $Enums.TaskSubmissionType
    task?: TaskCreateNestedManyWithoutConfigInput
  }

  export type TaskConfigUncheckedCreateInput = {
    id?: number
    duration: Date | string
    submissionType: $Enums.TaskSubmissionType
    task?: TaskUncheckedCreateNestedManyWithoutConfigInput
  }

  export type TaskConfigUpdateInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
    task?: TaskUpdateManyWithoutConfigNestedInput
  }

  export type TaskConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
    task?: TaskUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type TaskConfigCreateManyInput = {
    id?: number
    duration: Date | string
    submissionType: $Enums.TaskSubmissionType
  }

  export type TaskConfigUpdateManyMutationInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
  }

  export type TaskConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
  }

  export type TaskSelectionCreateInput = {
    game: GameCreateNestedOneWithoutTasksInput
    task?: TaskCreateNestedManyWithoutSelectedInput
  }

  export type TaskSelectionUncheckedCreateInput = {
    id?: number
    gameId: number
    task?: TaskUncheckedCreateNestedManyWithoutSelectedInput
  }

  export type TaskSelectionUpdateInput = {
    game?: GameUpdateOneRequiredWithoutTasksNestedInput
    task?: TaskUpdateManyWithoutSelectedNestedInput
  }

  export type TaskSelectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    task?: TaskUncheckedUpdateManyWithoutSelectedNestedInput
  }

  export type TaskSelectionCreateManyInput = {
    id?: number
    gameId: number
  }

  export type TaskSelectionUpdateManyMutationInput = {

  }

  export type TaskSelectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskResultCreateInput = {
    game: GameCreateNestedOneWithoutTaskResultInput
    submissions?: TaskSubmissionCreateNestedManyWithoutTaskResultInput
  }

  export type TaskResultUncheckedCreateInput = {
    id?: number
    gameId: number
    submissions?: TaskSubmissionUncheckedCreateNestedManyWithoutTaskResultInput
  }

  export type TaskResultUpdateInput = {
    game?: GameUpdateOneRequiredWithoutTaskResultNestedInput
    submissions?: TaskSubmissionUpdateManyWithoutTaskResultNestedInput
  }

  export type TaskResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    submissions?: TaskSubmissionUncheckedUpdateManyWithoutTaskResultNestedInput
  }

  export type TaskResultCreateManyInput = {
    id?: number
    gameId: number
  }

  export type TaskResultUpdateManyMutationInput = {

  }

  export type TaskResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskSubmissionCreateInput = {
    submittedAt?: Date | string
    userSession: UserSessionCreateNestedOneWithoutTasksInput
    task: TaskCreateNestedOneWithoutSubmissionsInput
    taskResult: TaskResultCreateNestedOneWithoutSubmissionsInput
  }

  export type TaskSubmissionUncheckedCreateInput = {
    userSessionId: number
    taskId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionUpdateInput = {
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSession?: UserSessionUpdateOneRequiredWithoutTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubmissionsNestedInput
    taskResult?: TaskResultUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type TaskSubmissionUncheckedUpdateInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskSubmissionCreateManyInput = {
    userSessionId: number
    taskId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionUpdateManyMutationInput = {
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskSubmissionUncheckedUpdateManyInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteContentCreateInput = {
    question: string
    items?: VoteItemCreateNestedManyWithoutContentInput
  }

  export type VoteContentUncheckedCreateInput = {
    id?: number
    question: string
    items?: VoteItemUncheckedCreateNestedManyWithoutContentInput
  }

  export type VoteContentUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    items?: VoteItemUpdateManyWithoutContentNestedInput
  }

  export type VoteContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    items?: VoteItemUncheckedUpdateManyWithoutContentNestedInput
  }

  export type VoteContentCreateManyInput = {
    id?: number
    question: string
  }

  export type VoteContentUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
  }

  export type VoteContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
  }

  export type VoteItemCreateInput = {
    content: VoteContentCreateNestedOneWithoutItemsInput
    submissions?: VoteSubmissionCreateNestedManyWithoutItemInput
  }

  export type VoteItemUncheckedCreateInput = {
    id?: number
    contentId: number
    submissions?: VoteSubmissionUncheckedCreateNestedManyWithoutItemInput
  }

  export type VoteItemUpdateInput = {
    content?: VoteContentUpdateOneRequiredWithoutItemsNestedInput
    submissions?: VoteSubmissionUpdateManyWithoutItemNestedInput
  }

  export type VoteItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
    submissions?: VoteSubmissionUncheckedUpdateManyWithoutItemNestedInput
  }

  export type VoteItemCreateManyInput = {
    id?: number
    contentId: number
  }

  export type VoteItemUpdateManyMutationInput = {

  }

  export type VoteItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type VoteSubmissionCreateInput = {
    vote: $Enums.VoteOptionsType
    userSession: UserSessionCreateNestedOneWithoutVotesInput
    item: VoteItemCreateNestedOneWithoutSubmissionsInput
  }

  export type VoteSubmissionUncheckedCreateInput = {
    userSessionId: number
    itemId: number
    vote: $Enums.VoteOptionsType
  }

  export type VoteSubmissionUpdateInput = {
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
    userSession?: UserSessionUpdateOneRequiredWithoutVotesNestedInput
    item?: VoteItemUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type VoteSubmissionUncheckedUpdateInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type VoteSubmissionCreateManyInput = {
    userSessionId: number
    itemId: number
    vote: $Enums.VoteOptionsType
  }

  export type VoteSubmissionUpdateManyMutationInput = {
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type VoteSubmissionUncheckedUpdateManyInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type PredictionRoundCreateInput = {
    game: GameCreateNestedOneWithoutPredictionRoundsInput
    results?: PredictionResultCreateNestedManyWithoutRoundInput
  }

  export type PredictionRoundUncheckedCreateInput = {
    id?: number
    gameId: number
    results?: PredictionResultUncheckedCreateNestedManyWithoutRoundInput
  }

  export type PredictionRoundUpdateInput = {
    game?: GameUpdateOneRequiredWithoutPredictionRoundsNestedInput
    results?: PredictionResultUpdateManyWithoutRoundNestedInput
  }

  export type PredictionRoundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    results?: PredictionResultUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type PredictionRoundCreateManyInput = {
    id?: number
    gameId: number
  }

  export type PredictionRoundUpdateManyMutationInput = {

  }

  export type PredictionRoundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionConfigCreateInput = {
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
    questions?: PredictionQuestionCreateNestedManyWithoutPredictionConfigInput
  }

  export type PredictionConfigUncheckedCreateInput = {
    id?: number
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
    questions?: PredictionQuestionUncheckedCreateNestedManyWithoutPredictionConfigInput
  }

  export type PredictionConfigUpdateInput = {
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
    questions?: PredictionQuestionUpdateManyWithoutPredictionConfigNestedInput
  }

  export type PredictionConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
    questions?: PredictionQuestionUncheckedUpdateManyWithoutPredictionConfigNestedInput
  }

  export type PredictionConfigCreateManyInput = {
    id?: number
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
  }

  export type PredictionConfigUpdateManyMutationInput = {
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
  }

  export type PredictionConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
  }

  export type PredictionQuestionCreateInput = {
    predictionConfig: PredictionConfigCreateNestedOneWithoutQuestionsInput
  }

  export type PredictionQuestionUncheckedCreateInput = {
    id?: number
    predictionConfigId: number
  }

  export type PredictionQuestionUpdateInput = {
    predictionConfig?: PredictionConfigUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type PredictionQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    predictionConfigId?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionQuestionCreateManyInput = {
    id?: number
    predictionConfigId: number
  }

  export type PredictionQuestionUpdateManyMutationInput = {

  }

  export type PredictionQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    predictionConfigId?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionResultCreateInput = {
    outcome: $Enums.PredictionOutcome
    userSession: UserSessionCreateNestedOneWithoutPredictionsInput
    round: PredictionRoundCreateNestedOneWithoutResultsInput
  }

  export type PredictionResultUncheckedCreateInput = {
    userSessionId: number
    outcome: $Enums.PredictionOutcome
    roundId: number
  }

  export type PredictionResultUpdateInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    userSession?: UserSessionUpdateOneRequiredWithoutPredictionsNestedInput
    round?: PredictionRoundUpdateOneRequiredWithoutResultsNestedInput
  }

  export type PredictionResultUncheckedUpdateInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    roundId?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionResultCreateManyInput = {
    userSessionId: number
    outcome: $Enums.PredictionOutcome
    roundId: number
  }

  export type PredictionResultUpdateManyMutationInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
  }

  export type PredictionResultUncheckedUpdateManyInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    roundId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EmailRecordListRelationFilter = {
    every?: EmailRecordWhereInput
    some?: EmailRecordWhereInput
    none?: EmailRecordWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmailRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailRecordCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailRecordMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type EmailRecordScalarRelationFilter = {
    is?: EmailRecordWhereInput
    isNot?: EmailRecordWhereInput
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type TaskSubmissionListRelationFilter = {
    every?: TaskSubmissionWhereInput
    some?: TaskSubmissionWhereInput
    none?: TaskSubmissionWhereInput
  }

  export type VoteSubmissionListRelationFilter = {
    every?: VoteSubmissionWhereInput
    some?: VoteSubmissionWhereInput
    none?: VoteSubmissionWhereInput
  }

  export type PredictionResultListRelationFilter = {
    every?: PredictionResultWhereInput
    some?: PredictionResultWhereInput
    none?: PredictionResultWhereInput
  }

  export type TaskSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredictionResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    lastActive?: SortOrder
    status?: SortOrder
    gameId?: SortOrder
  }

  export type UserSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    lastActive?: SortOrder
    status?: SortOrder
    gameId?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    lastActive?: SortOrder
    status?: SortOrder
    gameId?: SortOrder
  }

  export type UserSessionSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type EventScalarRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type GameConfigScalarRelationFilter = {
    is?: GameConfigWhereInput
    isNot?: GameConfigWhereInput
  }

  export type TaskSelectionListRelationFilter = {
    every?: TaskSelectionWhereInput
    some?: TaskSelectionWhereInput
    none?: TaskSelectionWhereInput
  }

  export type TaskResultListRelationFilter = {
    every?: TaskResultWhereInput
    some?: TaskResultWhereInput
    none?: TaskResultWhereInput
  }

  export type PredictionRoundListRelationFilter = {
    every?: PredictionRoundWhereInput
    some?: PredictionRoundWhereInput
    none?: PredictionRoundWhereInput
  }

  export type TaskSelectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredictionRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    configId?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    configId?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    configId?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
  }

  export type GameConfigCountOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type GameConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GameConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type GameConfigMinOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type GameConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TaskConfigScalarRelationFilter = {
    is?: TaskConfigWhereInput
    isNot?: TaskConfigWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    prompt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    prompt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    prompt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
  }

  export type EnumTaskSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskSubmissionType | EnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel> | $Enums.TaskSubmissionType
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskConfigCountOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    submissionType?: SortOrder
  }

  export type TaskConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TaskConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    submissionType?: SortOrder
  }

  export type TaskConfigMinOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    submissionType?: SortOrder
  }

  export type TaskConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTaskSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskSubmissionType | EnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskSubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel>
  }

  export type TaskSelectionCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskSelectionAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskSelectionMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskSelectionMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskSelectionSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskResultCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskResultAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskResultMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskResultMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type TaskResultSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type UserSessionScalarRelationFilter = {
    is?: UserSessionWhereInput
    isNot?: UserSessionWhereInput
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type TaskResultScalarRelationFilter = {
    is?: TaskResultWhereInput
    isNot?: TaskResultWhereInput
  }

  export type TaskSubmissionUserSessionIdTaskIdTaskResultIdCompoundUniqueInput = {
    userSessionId: number
    taskId: number
    taskResultId: number
  }

  export type TaskSubmissionCountOrderByAggregateInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
    submittedAt?: SortOrder
  }

  export type TaskSubmissionAvgOrderByAggregateInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
  }

  export type TaskSubmissionMaxOrderByAggregateInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
    submittedAt?: SortOrder
  }

  export type TaskSubmissionMinOrderByAggregateInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
    submittedAt?: SortOrder
  }

  export type TaskSubmissionSumOrderByAggregateInput = {
    userSessionId?: SortOrder
    taskId?: SortOrder
    taskResultId?: SortOrder
  }

  export type VoteItemListRelationFilter = {
    every?: VoteItemWhereInput
    some?: VoteItemWhereInput
    none?: VoteItemWhereInput
  }

  export type VoteItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteContentCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type VoteContentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VoteContentMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type VoteContentMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type VoteContentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VoteContentScalarRelationFilter = {
    is?: VoteContentWhereInput
    isNot?: VoteContentWhereInput
  }

  export type VoteItemCountOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type VoteItemAvgOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type VoteItemMaxOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type VoteItemMinOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type VoteItemSumOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type EnumVoteOptionsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteOptionsType | EnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteOptionsTypeFilter<$PrismaModel> | $Enums.VoteOptionsType
  }

  export type VoteItemScalarRelationFilter = {
    is?: VoteItemWhereInput
    isNot?: VoteItemWhereInput
  }

  export type VoteSubmissionUserSessionIdItemIdCompoundUniqueInput = {
    userSessionId: number
    itemId: number
  }

  export type VoteSubmissionCountOrderByAggregateInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
  }

  export type VoteSubmissionAvgOrderByAggregateInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
  }

  export type VoteSubmissionMaxOrderByAggregateInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
  }

  export type VoteSubmissionMinOrderByAggregateInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
    vote?: SortOrder
  }

  export type VoteSubmissionSumOrderByAggregateInput = {
    userSessionId?: SortOrder
    itemId?: SortOrder
  }

  export type EnumVoteOptionsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteOptionsType | EnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteOptionsTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoteOptionsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoteOptionsTypeFilter<$PrismaModel>
    _max?: NestedEnumVoteOptionsTypeFilter<$PrismaModel>
  }

  export type PredictionRoundCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type PredictionRoundAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type PredictionRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type PredictionRoundMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type PredictionRoundSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type EnumSignalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeFilter<$PrismaModel> | $Enums.SignalType
  }

  export type EnumSignalToleranceFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalTolerance | EnumSignalToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalToleranceFilter<$PrismaModel> | $Enums.SignalTolerance
  }

  export type PredictionQuestionListRelationFilter = {
    every?: PredictionQuestionWhereInput
    some?: PredictionQuestionWhereInput
    none?: PredictionQuestionWhereInput
  }

  export type PredictionQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredictionConfigCountOrderByAggregateInput = {
    id?: SortOrder
    signal?: SortOrder
    difficulty?: SortOrder
  }

  export type PredictionConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PredictionConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    signal?: SortOrder
    difficulty?: SortOrder
  }

  export type PredictionConfigMinOrderByAggregateInput = {
    id?: SortOrder
    signal?: SortOrder
    difficulty?: SortOrder
  }

  export type PredictionConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumSignalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel> | $Enums.SignalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalTypeFilter<$PrismaModel>
    _max?: NestedEnumSignalTypeFilter<$PrismaModel>
  }

  export type EnumSignalToleranceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalTolerance | EnumSignalToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalToleranceWithAggregatesFilter<$PrismaModel> | $Enums.SignalTolerance
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalToleranceFilter<$PrismaModel>
    _max?: NestedEnumSignalToleranceFilter<$PrismaModel>
  }

  export type PredictionConfigScalarRelationFilter = {
    is?: PredictionConfigWhereInput
    isNot?: PredictionConfigWhereInput
  }

  export type PredictionQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
  }

  export type PredictionQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
  }

  export type PredictionQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
  }

  export type PredictionQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
  }

  export type PredictionQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    predictionConfigId?: SortOrder
  }

  export type EnumPredictionOutcomeFilter<$PrismaModel = never> = {
    equals?: $Enums.PredictionOutcome | EnumPredictionOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumPredictionOutcomeFilter<$PrismaModel> | $Enums.PredictionOutcome
  }

  export type PredictionRoundScalarRelationFilter = {
    is?: PredictionRoundWhereInput
    isNot?: PredictionRoundWhereInput
  }

  export type PredictionResultUserSessionIdRoundIdCompoundUniqueInput = {
    userSessionId: number
    roundId: number
  }

  export type PredictionResultCountOrderByAggregateInput = {
    userSessionId?: SortOrder
    outcome?: SortOrder
    roundId?: SortOrder
  }

  export type PredictionResultAvgOrderByAggregateInput = {
    userSessionId?: SortOrder
    roundId?: SortOrder
  }

  export type PredictionResultMaxOrderByAggregateInput = {
    userSessionId?: SortOrder
    outcome?: SortOrder
    roundId?: SortOrder
  }

  export type PredictionResultMinOrderByAggregateInput = {
    userSessionId?: SortOrder
    outcome?: SortOrder
    roundId?: SortOrder
  }

  export type PredictionResultSumOrderByAggregateInput = {
    userSessionId?: SortOrder
    roundId?: SortOrder
  }

  export type EnumPredictionOutcomeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PredictionOutcome | EnumPredictionOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumPredictionOutcomeWithAggregatesFilter<$PrismaModel> | $Enums.PredictionOutcome
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPredictionOutcomeFilter<$PrismaModel>
    _max?: NestedEnumPredictionOutcomeFilter<$PrismaModel>
  }

  export type EmailRecordCreateNestedManyWithoutEventsInput = {
    create?: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput> | EmailRecordCreateWithoutEventsInput[] | EmailRecordUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: EmailRecordCreateOrConnectWithoutEventsInput | EmailRecordCreateOrConnectWithoutEventsInput[]
    connect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type EmailRecordUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput> | EmailRecordCreateWithoutEventsInput[] | EmailRecordUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: EmailRecordCreateOrConnectWithoutEventsInput | EmailRecordCreateOrConnectWithoutEventsInput[]
    connect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EmailRecordUpdateManyWithoutEventsNestedInput = {
    create?: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput> | EmailRecordCreateWithoutEventsInput[] | EmailRecordUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: EmailRecordCreateOrConnectWithoutEventsInput | EmailRecordCreateOrConnectWithoutEventsInput[]
    upsert?: EmailRecordUpsertWithWhereUniqueWithoutEventsInput | EmailRecordUpsertWithWhereUniqueWithoutEventsInput[]
    set?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    disconnect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    delete?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    connect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    update?: EmailRecordUpdateWithWhereUniqueWithoutEventsInput | EmailRecordUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: EmailRecordUpdateManyWithWhereWithoutEventsInput | EmailRecordUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: EmailRecordScalarWhereInput | EmailRecordScalarWhereInput[]
  }

  export type GameUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type EmailRecordUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput> | EmailRecordCreateWithoutEventsInput[] | EmailRecordUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: EmailRecordCreateOrConnectWithoutEventsInput | EmailRecordCreateOrConnectWithoutEventsInput[]
    upsert?: EmailRecordUpsertWithWhereUniqueWithoutEventsInput | EmailRecordUpsertWithWhereUniqueWithoutEventsInput[]
    set?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    disconnect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    delete?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    connect?: EmailRecordWhereUniqueInput | EmailRecordWhereUniqueInput[]
    update?: EmailRecordUpdateWithWhereUniqueWithoutEventsInput | EmailRecordUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: EmailRecordUpdateManyWithWhereWithoutEventsInput | EmailRecordUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: EmailRecordScalarWhereInput | EmailRecordScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutAttendeesInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput> | EventCreateWithoutAttendeesInput[] | EventUncheckedCreateWithoutAttendeesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput | EventCreateOrConnectWithoutAttendeesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutEmailInput = {
    create?: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput> | UserSessionCreateWithoutEmailInput[] | UserSessionUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutEmailInput | UserSessionCreateOrConnectWithoutEmailInput[]
    createMany?: UserSessionCreateManyEmailInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutAttendeesInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput> | EventCreateWithoutAttendeesInput[] | EventUncheckedCreateWithoutAttendeesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput | EventCreateOrConnectWithoutAttendeesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutEmailInput = {
    create?: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput> | UserSessionCreateWithoutEmailInput[] | UserSessionUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutEmailInput | UserSessionCreateOrConnectWithoutEmailInput[]
    createMany?: UserSessionCreateManyEmailInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventUpdateManyWithoutAttendeesNestedInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput> | EventCreateWithoutAttendeesInput[] | EventUncheckedCreateWithoutAttendeesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput | EventCreateOrConnectWithoutAttendeesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutAttendeesInput | EventUpsertWithWhereUniqueWithoutAttendeesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutAttendeesInput | EventUpdateWithWhereUniqueWithoutAttendeesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutAttendeesInput | EventUpdateManyWithWhereWithoutAttendeesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutEmailNestedInput = {
    create?: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput> | UserSessionCreateWithoutEmailInput[] | UserSessionUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutEmailInput | UserSessionCreateOrConnectWithoutEmailInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutEmailInput | UserSessionUpsertWithWhereUniqueWithoutEmailInput[]
    createMany?: UserSessionCreateManyEmailInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutEmailInput | UserSessionUpdateWithWhereUniqueWithoutEmailInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutEmailInput | UserSessionUpdateManyWithWhereWithoutEmailInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutAttendeesNestedInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput> | EventCreateWithoutAttendeesInput[] | EventUncheckedCreateWithoutAttendeesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput | EventCreateOrConnectWithoutAttendeesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutAttendeesInput | EventUpsertWithWhereUniqueWithoutAttendeesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutAttendeesInput | EventUpdateWithWhereUniqueWithoutAttendeesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutAttendeesInput | EventUpdateManyWithWhereWithoutAttendeesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutEmailNestedInput = {
    create?: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput> | UserSessionCreateWithoutEmailInput[] | UserSessionUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutEmailInput | UserSessionCreateOrConnectWithoutEmailInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutEmailInput | UserSessionUpsertWithWhereUniqueWithoutEmailInput[]
    createMany?: UserSessionCreateManyEmailInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutEmailInput | UserSessionUpdateWithWhereUniqueWithoutEmailInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutEmailInput | UserSessionUpdateManyWithWhereWithoutEmailInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type EmailRecordCreateNestedOneWithoutSessionsInput = {
    create?: XOR<EmailRecordCreateWithoutSessionsInput, EmailRecordUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: EmailRecordCreateOrConnectWithoutSessionsInput
    connect?: EmailRecordWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutPlayerSessionsInput = {
    create?: XOR<GameCreateWithoutPlayerSessionsInput, GameUncheckedCreateWithoutPlayerSessionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPlayerSessionsInput
    connect?: GameWhereUniqueInput
  }

  export type TaskSubmissionCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput> | TaskSubmissionCreateWithoutUserSessionInput[] | TaskSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutUserSessionInput | TaskSubmissionCreateOrConnectWithoutUserSessionInput[]
    createMany?: TaskSubmissionCreateManyUserSessionInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type VoteSubmissionCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput> | VoteSubmissionCreateWithoutUserSessionInput[] | VoteSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutUserSessionInput | VoteSubmissionCreateOrConnectWithoutUserSessionInput[]
    createMany?: VoteSubmissionCreateManyUserSessionInputEnvelope
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
  }

  export type PredictionResultCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput> | PredictionResultCreateWithoutUserSessionInput[] | PredictionResultUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutUserSessionInput | PredictionResultCreateOrConnectWithoutUserSessionInput[]
    createMany?: PredictionResultCreateManyUserSessionInputEnvelope
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
  }

  export type TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput> | TaskSubmissionCreateWithoutUserSessionInput[] | TaskSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutUserSessionInput | TaskSubmissionCreateOrConnectWithoutUserSessionInput[]
    createMany?: TaskSubmissionCreateManyUserSessionInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput> | VoteSubmissionCreateWithoutUserSessionInput[] | VoteSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutUserSessionInput | VoteSubmissionCreateOrConnectWithoutUserSessionInput[]
    createMany?: VoteSubmissionCreateManyUserSessionInputEnvelope
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
  }

  export type PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput = {
    create?: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput> | PredictionResultCreateWithoutUserSessionInput[] | PredictionResultUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutUserSessionInput | PredictionResultCreateOrConnectWithoutUserSessionInput[]
    createMany?: PredictionResultCreateManyUserSessionInputEnvelope
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
  }

  export type EnumSessionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SessionStatus
  }

  export type EmailRecordUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<EmailRecordCreateWithoutSessionsInput, EmailRecordUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: EmailRecordCreateOrConnectWithoutSessionsInput
    upsert?: EmailRecordUpsertWithoutSessionsInput
    connect?: EmailRecordWhereUniqueInput
    update?: XOR<XOR<EmailRecordUpdateToOneWithWhereWithoutSessionsInput, EmailRecordUpdateWithoutSessionsInput>, EmailRecordUncheckedUpdateWithoutSessionsInput>
  }

  export type GameUpdateOneRequiredWithoutPlayerSessionsNestedInput = {
    create?: XOR<GameCreateWithoutPlayerSessionsInput, GameUncheckedCreateWithoutPlayerSessionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPlayerSessionsInput
    upsert?: GameUpsertWithoutPlayerSessionsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutPlayerSessionsInput, GameUpdateWithoutPlayerSessionsInput>, GameUncheckedUpdateWithoutPlayerSessionsInput>
  }

  export type TaskSubmissionUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput> | TaskSubmissionCreateWithoutUserSessionInput[] | TaskSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutUserSessionInput | TaskSubmissionCreateOrConnectWithoutUserSessionInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutUserSessionInput | TaskSubmissionUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: TaskSubmissionCreateManyUserSessionInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutUserSessionInput | TaskSubmissionUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutUserSessionInput | TaskSubmissionUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type VoteSubmissionUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput> | VoteSubmissionCreateWithoutUserSessionInput[] | VoteSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutUserSessionInput | VoteSubmissionCreateOrConnectWithoutUserSessionInput[]
    upsert?: VoteSubmissionUpsertWithWhereUniqueWithoutUserSessionInput | VoteSubmissionUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: VoteSubmissionCreateManyUserSessionInputEnvelope
    set?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    disconnect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    delete?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    update?: VoteSubmissionUpdateWithWhereUniqueWithoutUserSessionInput | VoteSubmissionUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: VoteSubmissionUpdateManyWithWhereWithoutUserSessionInput | VoteSubmissionUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
  }

  export type PredictionResultUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput> | PredictionResultCreateWithoutUserSessionInput[] | PredictionResultUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutUserSessionInput | PredictionResultCreateOrConnectWithoutUserSessionInput[]
    upsert?: PredictionResultUpsertWithWhereUniqueWithoutUserSessionInput | PredictionResultUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: PredictionResultCreateManyUserSessionInputEnvelope
    set?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    disconnect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    delete?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    update?: PredictionResultUpdateWithWhereUniqueWithoutUserSessionInput | PredictionResultUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: PredictionResultUpdateManyWithWhereWithoutUserSessionInput | PredictionResultUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput> | TaskSubmissionCreateWithoutUserSessionInput[] | TaskSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutUserSessionInput | TaskSubmissionCreateOrConnectWithoutUserSessionInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutUserSessionInput | TaskSubmissionUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: TaskSubmissionCreateManyUserSessionInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutUserSessionInput | TaskSubmissionUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutUserSessionInput | TaskSubmissionUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput> | VoteSubmissionCreateWithoutUserSessionInput[] | VoteSubmissionUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutUserSessionInput | VoteSubmissionCreateOrConnectWithoutUserSessionInput[]
    upsert?: VoteSubmissionUpsertWithWhereUniqueWithoutUserSessionInput | VoteSubmissionUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: VoteSubmissionCreateManyUserSessionInputEnvelope
    set?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    disconnect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    delete?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    update?: VoteSubmissionUpdateWithWhereUniqueWithoutUserSessionInput | VoteSubmissionUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: VoteSubmissionUpdateManyWithWhereWithoutUserSessionInput | VoteSubmissionUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
  }

  export type PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput = {
    create?: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput> | PredictionResultCreateWithoutUserSessionInput[] | PredictionResultUncheckedCreateWithoutUserSessionInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutUserSessionInput | PredictionResultCreateOrConnectWithoutUserSessionInput[]
    upsert?: PredictionResultUpsertWithWhereUniqueWithoutUserSessionInput | PredictionResultUpsertWithWhereUniqueWithoutUserSessionInput[]
    createMany?: PredictionResultCreateManyUserSessionInputEnvelope
    set?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    disconnect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    delete?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    update?: PredictionResultUpdateWithWhereUniqueWithoutUserSessionInput | PredictionResultUpdateWithWhereUniqueWithoutUserSessionInput[]
    updateMany?: PredictionResultUpdateManyWithWhereWithoutUserSessionInput | PredictionResultUpdateManyWithWhereWithoutUserSessionInput[]
    deleteMany?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutGameInput = {
    create?: XOR<EventCreateWithoutGameInput, EventUncheckedCreateWithoutGameInput>
    connectOrCreate?: EventCreateOrConnectWithoutGameInput
    connect?: EventWhereUniqueInput
  }

  export type GameConfigCreateNestedOneWithoutGamesInput = {
    create?: XOR<GameConfigCreateWithoutGamesInput, GameConfigUncheckedCreateWithoutGamesInput>
    connectOrCreate?: GameConfigCreateOrConnectWithoutGamesInput
    connect?: GameConfigWhereUniqueInput
  }

  export type UserSessionCreateNestedManyWithoutGameInput = {
    create?: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput> | UserSessionCreateWithoutGameInput[] | UserSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutGameInput | UserSessionCreateOrConnectWithoutGameInput[]
    createMany?: UserSessionCreateManyGameInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type TaskSelectionCreateNestedManyWithoutGameInput = {
    create?: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput> | TaskSelectionCreateWithoutGameInput[] | TaskSelectionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutGameInput | TaskSelectionCreateOrConnectWithoutGameInput[]
    createMany?: TaskSelectionCreateManyGameInputEnvelope
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
  }

  export type TaskResultCreateNestedManyWithoutGameInput = {
    create?: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput> | TaskResultCreateWithoutGameInput[] | TaskResultUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskResultCreateOrConnectWithoutGameInput | TaskResultCreateOrConnectWithoutGameInput[]
    createMany?: TaskResultCreateManyGameInputEnvelope
    connect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
  }

  export type PredictionRoundCreateNestedManyWithoutGameInput = {
    create?: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput> | PredictionRoundCreateWithoutGameInput[] | PredictionRoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutGameInput | PredictionRoundCreateOrConnectWithoutGameInput[]
    createMany?: PredictionRoundCreateManyGameInputEnvelope
    connect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput> | UserSessionCreateWithoutGameInput[] | UserSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutGameInput | UserSessionCreateOrConnectWithoutGameInput[]
    createMany?: UserSessionCreateManyGameInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type TaskSelectionUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput> | TaskSelectionCreateWithoutGameInput[] | TaskSelectionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutGameInput | TaskSelectionCreateOrConnectWithoutGameInput[]
    createMany?: TaskSelectionCreateManyGameInputEnvelope
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
  }

  export type TaskResultUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput> | TaskResultCreateWithoutGameInput[] | TaskResultUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskResultCreateOrConnectWithoutGameInput | TaskResultCreateOrConnectWithoutGameInput[]
    createMany?: TaskResultCreateManyGameInputEnvelope
    connect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
  }

  export type PredictionRoundUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput> | PredictionRoundCreateWithoutGameInput[] | PredictionRoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutGameInput | PredictionRoundCreateOrConnectWithoutGameInput[]
    createMany?: PredictionRoundCreateManyGameInputEnvelope
    connect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutGameNestedInput = {
    create?: XOR<EventCreateWithoutGameInput, EventUncheckedCreateWithoutGameInput>
    connectOrCreate?: EventCreateOrConnectWithoutGameInput
    upsert?: EventUpsertWithoutGameInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutGameInput, EventUpdateWithoutGameInput>, EventUncheckedUpdateWithoutGameInput>
  }

  export type GameConfigUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<GameConfigCreateWithoutGamesInput, GameConfigUncheckedCreateWithoutGamesInput>
    connectOrCreate?: GameConfigCreateOrConnectWithoutGamesInput
    upsert?: GameConfigUpsertWithoutGamesInput
    connect?: GameConfigWhereUniqueInput
    update?: XOR<XOR<GameConfigUpdateToOneWithWhereWithoutGamesInput, GameConfigUpdateWithoutGamesInput>, GameConfigUncheckedUpdateWithoutGamesInput>
  }

  export type UserSessionUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput> | UserSessionCreateWithoutGameInput[] | UserSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutGameInput | UserSessionCreateOrConnectWithoutGameInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutGameInput | UserSessionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserSessionCreateManyGameInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutGameInput | UserSessionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutGameInput | UserSessionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type TaskSelectionUpdateManyWithoutGameNestedInput = {
    create?: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput> | TaskSelectionCreateWithoutGameInput[] | TaskSelectionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutGameInput | TaskSelectionCreateOrConnectWithoutGameInput[]
    upsert?: TaskSelectionUpsertWithWhereUniqueWithoutGameInput | TaskSelectionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TaskSelectionCreateManyGameInputEnvelope
    set?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    disconnect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    delete?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    update?: TaskSelectionUpdateWithWhereUniqueWithoutGameInput | TaskSelectionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TaskSelectionUpdateManyWithWhereWithoutGameInput | TaskSelectionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
  }

  export type TaskResultUpdateManyWithoutGameNestedInput = {
    create?: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput> | TaskResultCreateWithoutGameInput[] | TaskResultUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskResultCreateOrConnectWithoutGameInput | TaskResultCreateOrConnectWithoutGameInput[]
    upsert?: TaskResultUpsertWithWhereUniqueWithoutGameInput | TaskResultUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TaskResultCreateManyGameInputEnvelope
    set?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    disconnect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    delete?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    connect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    update?: TaskResultUpdateWithWhereUniqueWithoutGameInput | TaskResultUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TaskResultUpdateManyWithWhereWithoutGameInput | TaskResultUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TaskResultScalarWhereInput | TaskResultScalarWhereInput[]
  }

  export type PredictionRoundUpdateManyWithoutGameNestedInput = {
    create?: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput> | PredictionRoundCreateWithoutGameInput[] | PredictionRoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutGameInput | PredictionRoundCreateOrConnectWithoutGameInput[]
    upsert?: PredictionRoundUpsertWithWhereUniqueWithoutGameInput | PredictionRoundUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PredictionRoundCreateManyGameInputEnvelope
    set?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    disconnect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    delete?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    connect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    update?: PredictionRoundUpdateWithWhereUniqueWithoutGameInput | PredictionRoundUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PredictionRoundUpdateManyWithWhereWithoutGameInput | PredictionRoundUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PredictionRoundScalarWhereInput | PredictionRoundScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput> | UserSessionCreateWithoutGameInput[] | UserSessionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutGameInput | UserSessionCreateOrConnectWithoutGameInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutGameInput | UserSessionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserSessionCreateManyGameInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutGameInput | UserSessionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutGameInput | UserSessionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type TaskSelectionUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput> | TaskSelectionCreateWithoutGameInput[] | TaskSelectionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutGameInput | TaskSelectionCreateOrConnectWithoutGameInput[]
    upsert?: TaskSelectionUpsertWithWhereUniqueWithoutGameInput | TaskSelectionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TaskSelectionCreateManyGameInputEnvelope
    set?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    disconnect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    delete?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    update?: TaskSelectionUpdateWithWhereUniqueWithoutGameInput | TaskSelectionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TaskSelectionUpdateManyWithWhereWithoutGameInput | TaskSelectionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
  }

  export type TaskResultUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput> | TaskResultCreateWithoutGameInput[] | TaskResultUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TaskResultCreateOrConnectWithoutGameInput | TaskResultCreateOrConnectWithoutGameInput[]
    upsert?: TaskResultUpsertWithWhereUniqueWithoutGameInput | TaskResultUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TaskResultCreateManyGameInputEnvelope
    set?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    disconnect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    delete?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    connect?: TaskResultWhereUniqueInput | TaskResultWhereUniqueInput[]
    update?: TaskResultUpdateWithWhereUniqueWithoutGameInput | TaskResultUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TaskResultUpdateManyWithWhereWithoutGameInput | TaskResultUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TaskResultScalarWhereInput | TaskResultScalarWhereInput[]
  }

  export type PredictionRoundUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput> | PredictionRoundCreateWithoutGameInput[] | PredictionRoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutGameInput | PredictionRoundCreateOrConnectWithoutGameInput[]
    upsert?: PredictionRoundUpsertWithWhereUniqueWithoutGameInput | PredictionRoundUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PredictionRoundCreateManyGameInputEnvelope
    set?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    disconnect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    delete?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    connect?: PredictionRoundWhereUniqueInput | PredictionRoundWhereUniqueInput[]
    update?: PredictionRoundUpdateWithWhereUniqueWithoutGameInput | PredictionRoundUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PredictionRoundUpdateManyWithWhereWithoutGameInput | PredictionRoundUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PredictionRoundScalarWhereInput | PredictionRoundScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutConfigInput = {
    create?: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput> | GameCreateWithoutConfigInput[] | GameUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: GameCreateOrConnectWithoutConfigInput | GameCreateOrConnectWithoutConfigInput[]
    createMany?: GameCreateManyConfigInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput> | GameCreateWithoutConfigInput[] | GameUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: GameCreateOrConnectWithoutConfigInput | GameCreateOrConnectWithoutConfigInput[]
    createMany?: GameCreateManyConfigInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutConfigNestedInput = {
    create?: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput> | GameCreateWithoutConfigInput[] | GameUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: GameCreateOrConnectWithoutConfigInput | GameCreateOrConnectWithoutConfigInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutConfigInput | GameUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: GameCreateManyConfigInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutConfigInput | GameUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: GameUpdateManyWithWhereWithoutConfigInput | GameUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput> | GameCreateWithoutConfigInput[] | GameUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: GameCreateOrConnectWithoutConfigInput | GameCreateOrConnectWithoutConfigInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutConfigInput | GameUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: GameCreateManyConfigInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutConfigInput | GameUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: GameUpdateManyWithWhereWithoutConfigInput | GameUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type TaskConfigCreateNestedOneWithoutTaskInput = {
    create?: XOR<TaskConfigCreateWithoutTaskInput, TaskConfigUncheckedCreateWithoutTaskInput>
    connectOrCreate?: TaskConfigCreateOrConnectWithoutTaskInput
    connect?: TaskConfigWhereUniqueInput
  }

  export type TaskSelectionCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput> | TaskSelectionCreateWithoutTaskInput[] | TaskSelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutTaskInput | TaskSelectionCreateOrConnectWithoutTaskInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
  }

  export type TaskSubmissionCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput> | TaskSubmissionCreateWithoutTaskInput[] | TaskSubmissionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskInput | TaskSubmissionCreateOrConnectWithoutTaskInput[]
    createMany?: TaskSubmissionCreateManyTaskInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type TaskSelectionUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput> | TaskSelectionCreateWithoutTaskInput[] | TaskSelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutTaskInput | TaskSelectionCreateOrConnectWithoutTaskInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
  }

  export type TaskSubmissionUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput> | TaskSubmissionCreateWithoutTaskInput[] | TaskSubmissionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskInput | TaskSubmissionCreateOrConnectWithoutTaskInput[]
    createMany?: TaskSubmissionCreateManyTaskInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type TaskConfigUpdateOneRequiredWithoutTaskNestedInput = {
    create?: XOR<TaskConfigCreateWithoutTaskInput, TaskConfigUncheckedCreateWithoutTaskInput>
    connectOrCreate?: TaskConfigCreateOrConnectWithoutTaskInput
    upsert?: TaskConfigUpsertWithoutTaskInput
    connect?: TaskConfigWhereUniqueInput
    update?: XOR<XOR<TaskConfigUpdateToOneWithWhereWithoutTaskInput, TaskConfigUpdateWithoutTaskInput>, TaskConfigUncheckedUpdateWithoutTaskInput>
  }

  export type TaskSelectionUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput> | TaskSelectionCreateWithoutTaskInput[] | TaskSelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutTaskInput | TaskSelectionCreateOrConnectWithoutTaskInput[]
    upsert?: TaskSelectionUpsertWithWhereUniqueWithoutTaskInput | TaskSelectionUpsertWithWhereUniqueWithoutTaskInput[]
    set?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    disconnect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    delete?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    update?: TaskSelectionUpdateWithWhereUniqueWithoutTaskInput | TaskSelectionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskSelectionUpdateManyWithWhereWithoutTaskInput | TaskSelectionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
  }

  export type TaskSubmissionUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput> | TaskSubmissionCreateWithoutTaskInput[] | TaskSubmissionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskInput | TaskSubmissionCreateOrConnectWithoutTaskInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutTaskInput | TaskSubmissionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskSubmissionCreateManyTaskInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutTaskInput | TaskSubmissionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutTaskInput | TaskSubmissionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type TaskSelectionUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput> | TaskSelectionCreateWithoutTaskInput[] | TaskSelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSelectionCreateOrConnectWithoutTaskInput | TaskSelectionCreateOrConnectWithoutTaskInput[]
    upsert?: TaskSelectionUpsertWithWhereUniqueWithoutTaskInput | TaskSelectionUpsertWithWhereUniqueWithoutTaskInput[]
    set?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    disconnect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    delete?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    connect?: TaskSelectionWhereUniqueInput | TaskSelectionWhereUniqueInput[]
    update?: TaskSelectionUpdateWithWhereUniqueWithoutTaskInput | TaskSelectionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskSelectionUpdateManyWithWhereWithoutTaskInput | TaskSelectionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput> | TaskSubmissionCreateWithoutTaskInput[] | TaskSubmissionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskInput | TaskSubmissionCreateOrConnectWithoutTaskInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutTaskInput | TaskSubmissionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskSubmissionCreateManyTaskInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutTaskInput | TaskSubmissionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutTaskInput | TaskSubmissionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type TaskCreateNestedManyWithoutConfigInput = {
    create?: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput> | TaskCreateWithoutConfigInput[] | TaskUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutConfigInput | TaskCreateOrConnectWithoutConfigInput[]
    createMany?: TaskCreateManyConfigInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput> | TaskCreateWithoutConfigInput[] | TaskUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutConfigInput | TaskCreateOrConnectWithoutConfigInput[]
    createMany?: TaskCreateManyConfigInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type EnumTaskSubmissionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaskSubmissionType
  }

  export type TaskUpdateManyWithoutConfigNestedInput = {
    create?: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput> | TaskCreateWithoutConfigInput[] | TaskUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutConfigInput | TaskCreateOrConnectWithoutConfigInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutConfigInput | TaskUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: TaskCreateManyConfigInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutConfigInput | TaskUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutConfigInput | TaskUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput> | TaskCreateWithoutConfigInput[] | TaskUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutConfigInput | TaskCreateOrConnectWithoutConfigInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutConfigInput | TaskUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: TaskCreateManyConfigInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutConfigInput | TaskUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutConfigInput | TaskUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutTasksInput = {
    create?: XOR<GameCreateWithoutTasksInput, GameUncheckedCreateWithoutTasksInput>
    connectOrCreate?: GameCreateOrConnectWithoutTasksInput
    connect?: GameWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutSelectedInput = {
    create?: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput> | TaskCreateWithoutSelectedInput[] | TaskUncheckedCreateWithoutSelectedInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSelectedInput | TaskCreateOrConnectWithoutSelectedInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutSelectedInput = {
    create?: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput> | TaskCreateWithoutSelectedInput[] | TaskUncheckedCreateWithoutSelectedInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSelectedInput | TaskCreateOrConnectWithoutSelectedInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type GameUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<GameCreateWithoutTasksInput, GameUncheckedCreateWithoutTasksInput>
    connectOrCreate?: GameCreateOrConnectWithoutTasksInput
    upsert?: GameUpsertWithoutTasksInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutTasksInput, GameUpdateWithoutTasksInput>, GameUncheckedUpdateWithoutTasksInput>
  }

  export type TaskUpdateManyWithoutSelectedNestedInput = {
    create?: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput> | TaskCreateWithoutSelectedInput[] | TaskUncheckedCreateWithoutSelectedInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSelectedInput | TaskCreateOrConnectWithoutSelectedInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSelectedInput | TaskUpsertWithWhereUniqueWithoutSelectedInput[]
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSelectedInput | TaskUpdateWithWhereUniqueWithoutSelectedInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSelectedInput | TaskUpdateManyWithWhereWithoutSelectedInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutSelectedNestedInput = {
    create?: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput> | TaskCreateWithoutSelectedInput[] | TaskUncheckedCreateWithoutSelectedInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSelectedInput | TaskCreateOrConnectWithoutSelectedInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSelectedInput | TaskUpsertWithWhereUniqueWithoutSelectedInput[]
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSelectedInput | TaskUpdateWithWhereUniqueWithoutSelectedInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSelectedInput | TaskUpdateManyWithWhereWithoutSelectedInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutTaskResultInput = {
    create?: XOR<GameCreateWithoutTaskResultInput, GameUncheckedCreateWithoutTaskResultInput>
    connectOrCreate?: GameCreateOrConnectWithoutTaskResultInput
    connect?: GameWhereUniqueInput
  }

  export type TaskSubmissionCreateNestedManyWithoutTaskResultInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput> | TaskSubmissionCreateWithoutTaskResultInput[] | TaskSubmissionUncheckedCreateWithoutTaskResultInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskResultInput | TaskSubmissionCreateOrConnectWithoutTaskResultInput[]
    createMany?: TaskSubmissionCreateManyTaskResultInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type TaskSubmissionUncheckedCreateNestedManyWithoutTaskResultInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput> | TaskSubmissionCreateWithoutTaskResultInput[] | TaskSubmissionUncheckedCreateWithoutTaskResultInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskResultInput | TaskSubmissionCreateOrConnectWithoutTaskResultInput[]
    createMany?: TaskSubmissionCreateManyTaskResultInputEnvelope
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
  }

  export type GameUpdateOneRequiredWithoutTaskResultNestedInput = {
    create?: XOR<GameCreateWithoutTaskResultInput, GameUncheckedCreateWithoutTaskResultInput>
    connectOrCreate?: GameCreateOrConnectWithoutTaskResultInput
    upsert?: GameUpsertWithoutTaskResultInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutTaskResultInput, GameUpdateWithoutTaskResultInput>, GameUncheckedUpdateWithoutTaskResultInput>
  }

  export type TaskSubmissionUpdateManyWithoutTaskResultNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput> | TaskSubmissionCreateWithoutTaskResultInput[] | TaskSubmissionUncheckedCreateWithoutTaskResultInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskResultInput | TaskSubmissionCreateOrConnectWithoutTaskResultInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutTaskResultInput | TaskSubmissionUpsertWithWhereUniqueWithoutTaskResultInput[]
    createMany?: TaskSubmissionCreateManyTaskResultInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutTaskResultInput | TaskSubmissionUpdateWithWhereUniqueWithoutTaskResultInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutTaskResultInput | TaskSubmissionUpdateManyWithWhereWithoutTaskResultInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutTaskResultNestedInput = {
    create?: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput> | TaskSubmissionCreateWithoutTaskResultInput[] | TaskSubmissionUncheckedCreateWithoutTaskResultInput[]
    connectOrCreate?: TaskSubmissionCreateOrConnectWithoutTaskResultInput | TaskSubmissionCreateOrConnectWithoutTaskResultInput[]
    upsert?: TaskSubmissionUpsertWithWhereUniqueWithoutTaskResultInput | TaskSubmissionUpsertWithWhereUniqueWithoutTaskResultInput[]
    createMany?: TaskSubmissionCreateManyTaskResultInputEnvelope
    set?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    disconnect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    delete?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    connect?: TaskSubmissionWhereUniqueInput | TaskSubmissionWhereUniqueInput[]
    update?: TaskSubmissionUpdateWithWhereUniqueWithoutTaskResultInput | TaskSubmissionUpdateWithWhereUniqueWithoutTaskResultInput[]
    updateMany?: TaskSubmissionUpdateManyWithWhereWithoutTaskResultInput | TaskSubmissionUpdateManyWithWhereWithoutTaskResultInput[]
    deleteMany?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
  }

  export type UserSessionCreateNestedOneWithoutTasksInput = {
    create?: XOR<UserSessionCreateWithoutTasksInput, UserSessionUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutTasksInput
    connect?: UserSessionWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<TaskCreateWithoutSubmissionsInput, TaskUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubmissionsInput
    connect?: TaskWhereUniqueInput
  }

  export type TaskResultCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<TaskResultCreateWithoutSubmissionsInput, TaskResultUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TaskResultCreateOrConnectWithoutSubmissionsInput
    connect?: TaskResultWhereUniqueInput
  }

  export type UserSessionUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UserSessionCreateWithoutTasksInput, UserSessionUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutTasksInput
    upsert?: UserSessionUpsertWithoutTasksInput
    connect?: UserSessionWhereUniqueInput
    update?: XOR<XOR<UserSessionUpdateToOneWithWhereWithoutTasksInput, UserSessionUpdateWithoutTasksInput>, UserSessionUncheckedUpdateWithoutTasksInput>
  }

  export type TaskUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<TaskCreateWithoutSubmissionsInput, TaskUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubmissionsInput
    upsert?: TaskUpsertWithoutSubmissionsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutSubmissionsInput, TaskUpdateWithoutSubmissionsInput>, TaskUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TaskResultUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<TaskResultCreateWithoutSubmissionsInput, TaskResultUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TaskResultCreateOrConnectWithoutSubmissionsInput
    upsert?: TaskResultUpsertWithoutSubmissionsInput
    connect?: TaskResultWhereUniqueInput
    update?: XOR<XOR<TaskResultUpdateToOneWithWhereWithoutSubmissionsInput, TaskResultUpdateWithoutSubmissionsInput>, TaskResultUncheckedUpdateWithoutSubmissionsInput>
  }

  export type VoteItemCreateNestedManyWithoutContentInput = {
    create?: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput> | VoteItemCreateWithoutContentInput[] | VoteItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: VoteItemCreateOrConnectWithoutContentInput | VoteItemCreateOrConnectWithoutContentInput[]
    createMany?: VoteItemCreateManyContentInputEnvelope
    connect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
  }

  export type VoteItemUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput> | VoteItemCreateWithoutContentInput[] | VoteItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: VoteItemCreateOrConnectWithoutContentInput | VoteItemCreateOrConnectWithoutContentInput[]
    createMany?: VoteItemCreateManyContentInputEnvelope
    connect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
  }

  export type VoteItemUpdateManyWithoutContentNestedInput = {
    create?: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput> | VoteItemCreateWithoutContentInput[] | VoteItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: VoteItemCreateOrConnectWithoutContentInput | VoteItemCreateOrConnectWithoutContentInput[]
    upsert?: VoteItemUpsertWithWhereUniqueWithoutContentInput | VoteItemUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: VoteItemCreateManyContentInputEnvelope
    set?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    disconnect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    delete?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    connect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    update?: VoteItemUpdateWithWhereUniqueWithoutContentInput | VoteItemUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: VoteItemUpdateManyWithWhereWithoutContentInput | VoteItemUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: VoteItemScalarWhereInput | VoteItemScalarWhereInput[]
  }

  export type VoteItemUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput> | VoteItemCreateWithoutContentInput[] | VoteItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: VoteItemCreateOrConnectWithoutContentInput | VoteItemCreateOrConnectWithoutContentInput[]
    upsert?: VoteItemUpsertWithWhereUniqueWithoutContentInput | VoteItemUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: VoteItemCreateManyContentInputEnvelope
    set?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    disconnect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    delete?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    connect?: VoteItemWhereUniqueInput | VoteItemWhereUniqueInput[]
    update?: VoteItemUpdateWithWhereUniqueWithoutContentInput | VoteItemUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: VoteItemUpdateManyWithWhereWithoutContentInput | VoteItemUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: VoteItemScalarWhereInput | VoteItemScalarWhereInput[]
  }

  export type VoteContentCreateNestedOneWithoutItemsInput = {
    create?: XOR<VoteContentCreateWithoutItemsInput, VoteContentUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VoteContentCreateOrConnectWithoutItemsInput
    connect?: VoteContentWhereUniqueInput
  }

  export type VoteSubmissionCreateNestedManyWithoutItemInput = {
    create?: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput> | VoteSubmissionCreateWithoutItemInput[] | VoteSubmissionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutItemInput | VoteSubmissionCreateOrConnectWithoutItemInput[]
    createMany?: VoteSubmissionCreateManyItemInputEnvelope
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
  }

  export type VoteSubmissionUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput> | VoteSubmissionCreateWithoutItemInput[] | VoteSubmissionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutItemInput | VoteSubmissionCreateOrConnectWithoutItemInput[]
    createMany?: VoteSubmissionCreateManyItemInputEnvelope
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
  }

  export type VoteContentUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<VoteContentCreateWithoutItemsInput, VoteContentUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VoteContentCreateOrConnectWithoutItemsInput
    upsert?: VoteContentUpsertWithoutItemsInput
    connect?: VoteContentWhereUniqueInput
    update?: XOR<XOR<VoteContentUpdateToOneWithWhereWithoutItemsInput, VoteContentUpdateWithoutItemsInput>, VoteContentUncheckedUpdateWithoutItemsInput>
  }

  export type VoteSubmissionUpdateManyWithoutItemNestedInput = {
    create?: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput> | VoteSubmissionCreateWithoutItemInput[] | VoteSubmissionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutItemInput | VoteSubmissionCreateOrConnectWithoutItemInput[]
    upsert?: VoteSubmissionUpsertWithWhereUniqueWithoutItemInput | VoteSubmissionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: VoteSubmissionCreateManyItemInputEnvelope
    set?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    disconnect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    delete?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    update?: VoteSubmissionUpdateWithWhereUniqueWithoutItemInput | VoteSubmissionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: VoteSubmissionUpdateManyWithWhereWithoutItemInput | VoteSubmissionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
  }

  export type VoteSubmissionUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput> | VoteSubmissionCreateWithoutItemInput[] | VoteSubmissionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: VoteSubmissionCreateOrConnectWithoutItemInput | VoteSubmissionCreateOrConnectWithoutItemInput[]
    upsert?: VoteSubmissionUpsertWithWhereUniqueWithoutItemInput | VoteSubmissionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: VoteSubmissionCreateManyItemInputEnvelope
    set?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    disconnect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    delete?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    connect?: VoteSubmissionWhereUniqueInput | VoteSubmissionWhereUniqueInput[]
    update?: VoteSubmissionUpdateWithWhereUniqueWithoutItemInput | VoteSubmissionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: VoteSubmissionUpdateManyWithWhereWithoutItemInput | VoteSubmissionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
  }

  export type UserSessionCreateNestedOneWithoutVotesInput = {
    create?: XOR<UserSessionCreateWithoutVotesInput, UserSessionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutVotesInput
    connect?: UserSessionWhereUniqueInput
  }

  export type VoteItemCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<VoteItemCreateWithoutSubmissionsInput, VoteItemUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: VoteItemCreateOrConnectWithoutSubmissionsInput
    connect?: VoteItemWhereUniqueInput
  }

  export type EnumVoteOptionsTypeFieldUpdateOperationsInput = {
    set?: $Enums.VoteOptionsType
  }

  export type UserSessionUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<UserSessionCreateWithoutVotesInput, UserSessionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutVotesInput
    upsert?: UserSessionUpsertWithoutVotesInput
    connect?: UserSessionWhereUniqueInput
    update?: XOR<XOR<UserSessionUpdateToOneWithWhereWithoutVotesInput, UserSessionUpdateWithoutVotesInput>, UserSessionUncheckedUpdateWithoutVotesInput>
  }

  export type VoteItemUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<VoteItemCreateWithoutSubmissionsInput, VoteItemUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: VoteItemCreateOrConnectWithoutSubmissionsInput
    upsert?: VoteItemUpsertWithoutSubmissionsInput
    connect?: VoteItemWhereUniqueInput
    update?: XOR<XOR<VoteItemUpdateToOneWithWhereWithoutSubmissionsInput, VoteItemUpdateWithoutSubmissionsInput>, VoteItemUncheckedUpdateWithoutSubmissionsInput>
  }

  export type GameCreateNestedOneWithoutPredictionRoundsInput = {
    create?: XOR<GameCreateWithoutPredictionRoundsInput, GameUncheckedCreateWithoutPredictionRoundsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPredictionRoundsInput
    connect?: GameWhereUniqueInput
  }

  export type PredictionResultCreateNestedManyWithoutRoundInput = {
    create?: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput> | PredictionResultCreateWithoutRoundInput[] | PredictionResultUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutRoundInput | PredictionResultCreateOrConnectWithoutRoundInput[]
    createMany?: PredictionResultCreateManyRoundInputEnvelope
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
  }

  export type PredictionResultUncheckedCreateNestedManyWithoutRoundInput = {
    create?: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput> | PredictionResultCreateWithoutRoundInput[] | PredictionResultUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutRoundInput | PredictionResultCreateOrConnectWithoutRoundInput[]
    createMany?: PredictionResultCreateManyRoundInputEnvelope
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
  }

  export type GameUpdateOneRequiredWithoutPredictionRoundsNestedInput = {
    create?: XOR<GameCreateWithoutPredictionRoundsInput, GameUncheckedCreateWithoutPredictionRoundsInput>
    connectOrCreate?: GameCreateOrConnectWithoutPredictionRoundsInput
    upsert?: GameUpsertWithoutPredictionRoundsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutPredictionRoundsInput, GameUpdateWithoutPredictionRoundsInput>, GameUncheckedUpdateWithoutPredictionRoundsInput>
  }

  export type PredictionResultUpdateManyWithoutRoundNestedInput = {
    create?: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput> | PredictionResultCreateWithoutRoundInput[] | PredictionResultUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutRoundInput | PredictionResultCreateOrConnectWithoutRoundInput[]
    upsert?: PredictionResultUpsertWithWhereUniqueWithoutRoundInput | PredictionResultUpsertWithWhereUniqueWithoutRoundInput[]
    createMany?: PredictionResultCreateManyRoundInputEnvelope
    set?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    disconnect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    delete?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    update?: PredictionResultUpdateWithWhereUniqueWithoutRoundInput | PredictionResultUpdateWithWhereUniqueWithoutRoundInput[]
    updateMany?: PredictionResultUpdateManyWithWhereWithoutRoundInput | PredictionResultUpdateManyWithWhereWithoutRoundInput[]
    deleteMany?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
  }

  export type PredictionResultUncheckedUpdateManyWithoutRoundNestedInput = {
    create?: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput> | PredictionResultCreateWithoutRoundInput[] | PredictionResultUncheckedCreateWithoutRoundInput[]
    connectOrCreate?: PredictionResultCreateOrConnectWithoutRoundInput | PredictionResultCreateOrConnectWithoutRoundInput[]
    upsert?: PredictionResultUpsertWithWhereUniqueWithoutRoundInput | PredictionResultUpsertWithWhereUniqueWithoutRoundInput[]
    createMany?: PredictionResultCreateManyRoundInputEnvelope
    set?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    disconnect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    delete?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    connect?: PredictionResultWhereUniqueInput | PredictionResultWhereUniqueInput[]
    update?: PredictionResultUpdateWithWhereUniqueWithoutRoundInput | PredictionResultUpdateWithWhereUniqueWithoutRoundInput[]
    updateMany?: PredictionResultUpdateManyWithWhereWithoutRoundInput | PredictionResultUpdateManyWithWhereWithoutRoundInput[]
    deleteMany?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
  }

  export type PredictionQuestionCreateNestedManyWithoutPredictionConfigInput = {
    create?: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput> | PredictionQuestionCreateWithoutPredictionConfigInput[] | PredictionQuestionUncheckedCreateWithoutPredictionConfigInput[]
    connectOrCreate?: PredictionQuestionCreateOrConnectWithoutPredictionConfigInput | PredictionQuestionCreateOrConnectWithoutPredictionConfigInput[]
    createMany?: PredictionQuestionCreateManyPredictionConfigInputEnvelope
    connect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
  }

  export type PredictionQuestionUncheckedCreateNestedManyWithoutPredictionConfigInput = {
    create?: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput> | PredictionQuestionCreateWithoutPredictionConfigInput[] | PredictionQuestionUncheckedCreateWithoutPredictionConfigInput[]
    connectOrCreate?: PredictionQuestionCreateOrConnectWithoutPredictionConfigInput | PredictionQuestionCreateOrConnectWithoutPredictionConfigInput[]
    createMany?: PredictionQuestionCreateManyPredictionConfigInputEnvelope
    connect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
  }

  export type EnumSignalTypeFieldUpdateOperationsInput = {
    set?: $Enums.SignalType
  }

  export type EnumSignalToleranceFieldUpdateOperationsInput = {
    set?: $Enums.SignalTolerance
  }

  export type PredictionQuestionUpdateManyWithoutPredictionConfigNestedInput = {
    create?: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput> | PredictionQuestionCreateWithoutPredictionConfigInput[] | PredictionQuestionUncheckedCreateWithoutPredictionConfigInput[]
    connectOrCreate?: PredictionQuestionCreateOrConnectWithoutPredictionConfigInput | PredictionQuestionCreateOrConnectWithoutPredictionConfigInput[]
    upsert?: PredictionQuestionUpsertWithWhereUniqueWithoutPredictionConfigInput | PredictionQuestionUpsertWithWhereUniqueWithoutPredictionConfigInput[]
    createMany?: PredictionQuestionCreateManyPredictionConfigInputEnvelope
    set?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    disconnect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    delete?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    connect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    update?: PredictionQuestionUpdateWithWhereUniqueWithoutPredictionConfigInput | PredictionQuestionUpdateWithWhereUniqueWithoutPredictionConfigInput[]
    updateMany?: PredictionQuestionUpdateManyWithWhereWithoutPredictionConfigInput | PredictionQuestionUpdateManyWithWhereWithoutPredictionConfigInput[]
    deleteMany?: PredictionQuestionScalarWhereInput | PredictionQuestionScalarWhereInput[]
  }

  export type PredictionQuestionUncheckedUpdateManyWithoutPredictionConfigNestedInput = {
    create?: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput> | PredictionQuestionCreateWithoutPredictionConfigInput[] | PredictionQuestionUncheckedCreateWithoutPredictionConfigInput[]
    connectOrCreate?: PredictionQuestionCreateOrConnectWithoutPredictionConfigInput | PredictionQuestionCreateOrConnectWithoutPredictionConfigInput[]
    upsert?: PredictionQuestionUpsertWithWhereUniqueWithoutPredictionConfigInput | PredictionQuestionUpsertWithWhereUniqueWithoutPredictionConfigInput[]
    createMany?: PredictionQuestionCreateManyPredictionConfigInputEnvelope
    set?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    disconnect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    delete?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    connect?: PredictionQuestionWhereUniqueInput | PredictionQuestionWhereUniqueInput[]
    update?: PredictionQuestionUpdateWithWhereUniqueWithoutPredictionConfigInput | PredictionQuestionUpdateWithWhereUniqueWithoutPredictionConfigInput[]
    updateMany?: PredictionQuestionUpdateManyWithWhereWithoutPredictionConfigInput | PredictionQuestionUpdateManyWithWhereWithoutPredictionConfigInput[]
    deleteMany?: PredictionQuestionScalarWhereInput | PredictionQuestionScalarWhereInput[]
  }

  export type PredictionConfigCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<PredictionConfigCreateWithoutQuestionsInput, PredictionConfigUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: PredictionConfigCreateOrConnectWithoutQuestionsInput
    connect?: PredictionConfigWhereUniqueInput
  }

  export type PredictionConfigUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<PredictionConfigCreateWithoutQuestionsInput, PredictionConfigUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: PredictionConfigCreateOrConnectWithoutQuestionsInput
    upsert?: PredictionConfigUpsertWithoutQuestionsInput
    connect?: PredictionConfigWhereUniqueInput
    update?: XOR<XOR<PredictionConfigUpdateToOneWithWhereWithoutQuestionsInput, PredictionConfigUpdateWithoutQuestionsInput>, PredictionConfigUncheckedUpdateWithoutQuestionsInput>
  }

  export type UserSessionCreateNestedOneWithoutPredictionsInput = {
    create?: XOR<UserSessionCreateWithoutPredictionsInput, UserSessionUncheckedCreateWithoutPredictionsInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutPredictionsInput
    connect?: UserSessionWhereUniqueInput
  }

  export type PredictionRoundCreateNestedOneWithoutResultsInput = {
    create?: XOR<PredictionRoundCreateWithoutResultsInput, PredictionRoundUncheckedCreateWithoutResultsInput>
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutResultsInput
    connect?: PredictionRoundWhereUniqueInput
  }

  export type EnumPredictionOutcomeFieldUpdateOperationsInput = {
    set?: $Enums.PredictionOutcome
  }

  export type UserSessionUpdateOneRequiredWithoutPredictionsNestedInput = {
    create?: XOR<UserSessionCreateWithoutPredictionsInput, UserSessionUncheckedCreateWithoutPredictionsInput>
    connectOrCreate?: UserSessionCreateOrConnectWithoutPredictionsInput
    upsert?: UserSessionUpsertWithoutPredictionsInput
    connect?: UserSessionWhereUniqueInput
    update?: XOR<XOR<UserSessionUpdateToOneWithWhereWithoutPredictionsInput, UserSessionUpdateWithoutPredictionsInput>, UserSessionUncheckedUpdateWithoutPredictionsInput>
  }

  export type PredictionRoundUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<PredictionRoundCreateWithoutResultsInput, PredictionRoundUncheckedCreateWithoutResultsInput>
    connectOrCreate?: PredictionRoundCreateOrConnectWithoutResultsInput
    upsert?: PredictionRoundUpsertWithoutResultsInput
    connect?: PredictionRoundWhereUniqueInput
    update?: XOR<XOR<PredictionRoundUpdateToOneWithWhereWithoutResultsInput, PredictionRoundUpdateWithoutResultsInput>, PredictionRoundUncheckedUpdateWithoutResultsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskSubmissionType | EnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel> | $Enums.TaskSubmissionType
  }

  export type NestedEnumTaskSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskSubmissionType | EnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskSubmissionType[] | ListEnumTaskSubmissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaskSubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumTaskSubmissionTypeFilter<$PrismaModel>
  }

  export type NestedEnumVoteOptionsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteOptionsType | EnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteOptionsTypeFilter<$PrismaModel> | $Enums.VoteOptionsType
  }

  export type NestedEnumVoteOptionsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteOptionsType | EnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteOptionsType[] | ListEnumVoteOptionsTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteOptionsTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoteOptionsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoteOptionsTypeFilter<$PrismaModel>
    _max?: NestedEnumVoteOptionsTypeFilter<$PrismaModel>
  }

  export type NestedEnumSignalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeFilter<$PrismaModel> | $Enums.SignalType
  }

  export type NestedEnumSignalToleranceFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalTolerance | EnumSignalToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalToleranceFilter<$PrismaModel> | $Enums.SignalTolerance
  }

  export type NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel> | $Enums.SignalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalTypeFilter<$PrismaModel>
    _max?: NestedEnumSignalTypeFilter<$PrismaModel>
  }

  export type NestedEnumSignalToleranceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalTolerance | EnumSignalToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalTolerance[] | ListEnumSignalToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalToleranceWithAggregatesFilter<$PrismaModel> | $Enums.SignalTolerance
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalToleranceFilter<$PrismaModel>
    _max?: NestedEnumSignalToleranceFilter<$PrismaModel>
  }

  export type NestedEnumPredictionOutcomeFilter<$PrismaModel = never> = {
    equals?: $Enums.PredictionOutcome | EnumPredictionOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumPredictionOutcomeFilter<$PrismaModel> | $Enums.PredictionOutcome
  }

  export type NestedEnumPredictionOutcomeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PredictionOutcome | EnumPredictionOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PredictionOutcome[] | ListEnumPredictionOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumPredictionOutcomeWithAggregatesFilter<$PrismaModel> | $Enums.PredictionOutcome
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPredictionOutcomeFilter<$PrismaModel>
    _max?: NestedEnumPredictionOutcomeFilter<$PrismaModel>
  }

  export type EmailRecordCreateWithoutEventsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    sessions?: UserSessionCreateNestedManyWithoutEmailInput
  }

  export type EmailRecordUncheckedCreateWithoutEventsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    sessions?: UserSessionUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailRecordCreateOrConnectWithoutEventsInput = {
    where: EmailRecordWhereUniqueInput
    create: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput>
  }

  export type GameCreateWithoutEventInput = {
    config: GameConfigCreateNestedOneWithoutGamesInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutEventInput = {
    id?: number
    configId: number
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutEventInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameCreateManyEventInputEnvelope = {
    data: GameCreateManyEventInput | GameCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EmailRecordUpsertWithWhereUniqueWithoutEventsInput = {
    where: EmailRecordWhereUniqueInput
    update: XOR<EmailRecordUpdateWithoutEventsInput, EmailRecordUncheckedUpdateWithoutEventsInput>
    create: XOR<EmailRecordCreateWithoutEventsInput, EmailRecordUncheckedCreateWithoutEventsInput>
  }

  export type EmailRecordUpdateWithWhereUniqueWithoutEventsInput = {
    where: EmailRecordWhereUniqueInput
    data: XOR<EmailRecordUpdateWithoutEventsInput, EmailRecordUncheckedUpdateWithoutEventsInput>
  }

  export type EmailRecordUpdateManyWithWhereWithoutEventsInput = {
    where: EmailRecordScalarWhereInput
    data: XOR<EmailRecordUpdateManyMutationInput, EmailRecordUncheckedUpdateManyWithoutEventsInput>
  }

  export type EmailRecordScalarWhereInput = {
    AND?: EmailRecordScalarWhereInput | EmailRecordScalarWhereInput[]
    OR?: EmailRecordScalarWhereInput[]
    NOT?: EmailRecordScalarWhereInput | EmailRecordScalarWhereInput[]
    id?: StringFilter<"EmailRecord"> | string
    address?: StringFilter<"EmailRecord"> | string
    createdAt?: DateTimeFilter<"EmailRecord"> | Date | string
  }

  export type GameUpsertWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameUpdateWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
  }

  export type GameUpdateManyWithWhereWithoutEventInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutEventInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: IntFilter<"Game"> | number
    eventId?: StringFilter<"Game"> | string
    configId?: IntFilter<"Game"> | number
  }

  export type EventCreateWithoutAttendeesInput = {
    id?: string
    link?: string | null
    game?: GameCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAttendeesInput = {
    id?: string
    link?: string | null
    game?: GameUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
  }

  export type UserSessionCreateWithoutEmailInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    game: GameCreateNestedOneWithoutPlayerSessionsInput
    tasks?: TaskSubmissionCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateWithoutEmailInput = {
    id?: number
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
    tasks?: TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionCreateOrConnectWithoutEmailInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput>
  }

  export type UserSessionCreateManyEmailInputEnvelope = {
    data: UserSessionCreateManyEmailInput | UserSessionCreateManyEmailInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
  }

  export type EventUpdateWithWhereUniqueWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type EventUpdateManyWithWhereWithoutAttendeesInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutAttendeesInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    link?: StringNullableFilter<"Event"> | string | null
  }

  export type UserSessionUpsertWithWhereUniqueWithoutEmailInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutEmailInput, UserSessionUncheckedUpdateWithoutEmailInput>
    create: XOR<UserSessionCreateWithoutEmailInput, UserSessionUncheckedCreateWithoutEmailInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutEmailInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutEmailInput, UserSessionUncheckedUpdateWithoutEmailInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutEmailInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutEmailInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: IntFilter<"UserSession"> | number
    emailId?: StringFilter<"UserSession"> | string
    lastActive?: DateTimeFilter<"UserSession"> | Date | string
    status?: EnumSessionStatusFilter<"UserSession"> | $Enums.SessionStatus
    gameId?: IntFilter<"UserSession"> | number
  }

  export type EmailRecordCreateWithoutSessionsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutAttendeesInput
  }

  export type EmailRecordUncheckedCreateWithoutSessionsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutAttendeesInput
  }

  export type EmailRecordCreateOrConnectWithoutSessionsInput = {
    where: EmailRecordWhereUniqueInput
    create: XOR<EmailRecordCreateWithoutSessionsInput, EmailRecordUncheckedCreateWithoutSessionsInput>
  }

  export type GameCreateWithoutPlayerSessionsInput = {
    event: EventCreateNestedOneWithoutGameInput
    config: GameConfigCreateNestedOneWithoutGamesInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutPlayerSessionsInput = {
    id?: number
    eventId: string
    configId: number
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutPlayerSessionsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPlayerSessionsInput, GameUncheckedCreateWithoutPlayerSessionsInput>
  }

  export type TaskSubmissionCreateWithoutUserSessionInput = {
    submittedAt?: Date | string
    task: TaskCreateNestedOneWithoutSubmissionsInput
    taskResult: TaskResultCreateNestedOneWithoutSubmissionsInput
  }

  export type TaskSubmissionUncheckedCreateWithoutUserSessionInput = {
    taskId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionCreateOrConnectWithoutUserSessionInput = {
    where: TaskSubmissionWhereUniqueInput
    create: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput>
  }

  export type TaskSubmissionCreateManyUserSessionInputEnvelope = {
    data: TaskSubmissionCreateManyUserSessionInput | TaskSubmissionCreateManyUserSessionInput[]
    skipDuplicates?: boolean
  }

  export type VoteSubmissionCreateWithoutUserSessionInput = {
    vote: $Enums.VoteOptionsType
    item: VoteItemCreateNestedOneWithoutSubmissionsInput
  }

  export type VoteSubmissionUncheckedCreateWithoutUserSessionInput = {
    itemId: number
    vote: $Enums.VoteOptionsType
  }

  export type VoteSubmissionCreateOrConnectWithoutUserSessionInput = {
    where: VoteSubmissionWhereUniqueInput
    create: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput>
  }

  export type VoteSubmissionCreateManyUserSessionInputEnvelope = {
    data: VoteSubmissionCreateManyUserSessionInput | VoteSubmissionCreateManyUserSessionInput[]
    skipDuplicates?: boolean
  }

  export type PredictionResultCreateWithoutUserSessionInput = {
    outcome: $Enums.PredictionOutcome
    round: PredictionRoundCreateNestedOneWithoutResultsInput
  }

  export type PredictionResultUncheckedCreateWithoutUserSessionInput = {
    outcome: $Enums.PredictionOutcome
    roundId: number
  }

  export type PredictionResultCreateOrConnectWithoutUserSessionInput = {
    where: PredictionResultWhereUniqueInput
    create: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput>
  }

  export type PredictionResultCreateManyUserSessionInputEnvelope = {
    data: PredictionResultCreateManyUserSessionInput | PredictionResultCreateManyUserSessionInput[]
    skipDuplicates?: boolean
  }

  export type EmailRecordUpsertWithoutSessionsInput = {
    update: XOR<EmailRecordUpdateWithoutSessionsInput, EmailRecordUncheckedUpdateWithoutSessionsInput>
    create: XOR<EmailRecordCreateWithoutSessionsInput, EmailRecordUncheckedCreateWithoutSessionsInput>
    where?: EmailRecordWhereInput
  }

  export type EmailRecordUpdateToOneWithWhereWithoutSessionsInput = {
    where?: EmailRecordWhereInput
    data: XOR<EmailRecordUpdateWithoutSessionsInput, EmailRecordUncheckedUpdateWithoutSessionsInput>
  }

  export type EmailRecordUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutAttendeesNestedInput
  }

  export type EmailRecordUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutAttendeesNestedInput
  }

  export type GameUpsertWithoutPlayerSessionsInput = {
    update: XOR<GameUpdateWithoutPlayerSessionsInput, GameUncheckedUpdateWithoutPlayerSessionsInput>
    create: XOR<GameCreateWithoutPlayerSessionsInput, GameUncheckedCreateWithoutPlayerSessionsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutPlayerSessionsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutPlayerSessionsInput, GameUncheckedUpdateWithoutPlayerSessionsInput>
  }

  export type GameUpdateWithoutPlayerSessionsInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPlayerSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TaskSubmissionUpsertWithWhereUniqueWithoutUserSessionInput = {
    where: TaskSubmissionWhereUniqueInput
    update: XOR<TaskSubmissionUpdateWithoutUserSessionInput, TaskSubmissionUncheckedUpdateWithoutUserSessionInput>
    create: XOR<TaskSubmissionCreateWithoutUserSessionInput, TaskSubmissionUncheckedCreateWithoutUserSessionInput>
  }

  export type TaskSubmissionUpdateWithWhereUniqueWithoutUserSessionInput = {
    where: TaskSubmissionWhereUniqueInput
    data: XOR<TaskSubmissionUpdateWithoutUserSessionInput, TaskSubmissionUncheckedUpdateWithoutUserSessionInput>
  }

  export type TaskSubmissionUpdateManyWithWhereWithoutUserSessionInput = {
    where: TaskSubmissionScalarWhereInput
    data: XOR<TaskSubmissionUpdateManyMutationInput, TaskSubmissionUncheckedUpdateManyWithoutUserSessionInput>
  }

  export type TaskSubmissionScalarWhereInput = {
    AND?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
    OR?: TaskSubmissionScalarWhereInput[]
    NOT?: TaskSubmissionScalarWhereInput | TaskSubmissionScalarWhereInput[]
    userSessionId?: IntFilter<"TaskSubmission"> | number
    taskId?: IntFilter<"TaskSubmission"> | number
    taskResultId?: IntFilter<"TaskSubmission"> | number
    submittedAt?: DateTimeFilter<"TaskSubmission"> | Date | string
  }

  export type VoteSubmissionUpsertWithWhereUniqueWithoutUserSessionInput = {
    where: VoteSubmissionWhereUniqueInput
    update: XOR<VoteSubmissionUpdateWithoutUserSessionInput, VoteSubmissionUncheckedUpdateWithoutUserSessionInput>
    create: XOR<VoteSubmissionCreateWithoutUserSessionInput, VoteSubmissionUncheckedCreateWithoutUserSessionInput>
  }

  export type VoteSubmissionUpdateWithWhereUniqueWithoutUserSessionInput = {
    where: VoteSubmissionWhereUniqueInput
    data: XOR<VoteSubmissionUpdateWithoutUserSessionInput, VoteSubmissionUncheckedUpdateWithoutUserSessionInput>
  }

  export type VoteSubmissionUpdateManyWithWhereWithoutUserSessionInput = {
    where: VoteSubmissionScalarWhereInput
    data: XOR<VoteSubmissionUpdateManyMutationInput, VoteSubmissionUncheckedUpdateManyWithoutUserSessionInput>
  }

  export type VoteSubmissionScalarWhereInput = {
    AND?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
    OR?: VoteSubmissionScalarWhereInput[]
    NOT?: VoteSubmissionScalarWhereInput | VoteSubmissionScalarWhereInput[]
    userSessionId?: IntFilter<"VoteSubmission"> | number
    itemId?: IntFilter<"VoteSubmission"> | number
    vote?: EnumVoteOptionsTypeFilter<"VoteSubmission"> | $Enums.VoteOptionsType
  }

  export type PredictionResultUpsertWithWhereUniqueWithoutUserSessionInput = {
    where: PredictionResultWhereUniqueInput
    update: XOR<PredictionResultUpdateWithoutUserSessionInput, PredictionResultUncheckedUpdateWithoutUserSessionInput>
    create: XOR<PredictionResultCreateWithoutUserSessionInput, PredictionResultUncheckedCreateWithoutUserSessionInput>
  }

  export type PredictionResultUpdateWithWhereUniqueWithoutUserSessionInput = {
    where: PredictionResultWhereUniqueInput
    data: XOR<PredictionResultUpdateWithoutUserSessionInput, PredictionResultUncheckedUpdateWithoutUserSessionInput>
  }

  export type PredictionResultUpdateManyWithWhereWithoutUserSessionInput = {
    where: PredictionResultScalarWhereInput
    data: XOR<PredictionResultUpdateManyMutationInput, PredictionResultUncheckedUpdateManyWithoutUserSessionInput>
  }

  export type PredictionResultScalarWhereInput = {
    AND?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
    OR?: PredictionResultScalarWhereInput[]
    NOT?: PredictionResultScalarWhereInput | PredictionResultScalarWhereInput[]
    userSessionId?: IntFilter<"PredictionResult"> | number
    outcome?: EnumPredictionOutcomeFilter<"PredictionResult"> | $Enums.PredictionOutcome
    roundId?: IntFilter<"PredictionResult"> | number
  }

  export type EventCreateWithoutGameInput = {
    id?: string
    link?: string | null
    attendees?: EmailRecordCreateNestedManyWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutGameInput = {
    id?: string
    link?: string | null
    attendees?: EmailRecordUncheckedCreateNestedManyWithoutEventsInput
  }

  export type EventCreateOrConnectWithoutGameInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutGameInput, EventUncheckedCreateWithoutGameInput>
  }

  export type GameConfigCreateWithoutGamesInput = {
    duration: Date | string
  }

  export type GameConfigUncheckedCreateWithoutGamesInput = {
    id?: number
    duration: Date | string
  }

  export type GameConfigCreateOrConnectWithoutGamesInput = {
    where: GameConfigWhereUniqueInput
    create: XOR<GameConfigCreateWithoutGamesInput, GameConfigUncheckedCreateWithoutGamesInput>
  }

  export type UserSessionCreateWithoutGameInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    email: EmailRecordCreateNestedOneWithoutSessionsInput
    tasks?: TaskSubmissionCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateWithoutGameInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    tasks?: TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionCreateOrConnectWithoutGameInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput>
  }

  export type UserSessionCreateManyGameInputEnvelope = {
    data: UserSessionCreateManyGameInput | UserSessionCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type TaskSelectionCreateWithoutGameInput = {
    task?: TaskCreateNestedManyWithoutSelectedInput
  }

  export type TaskSelectionUncheckedCreateWithoutGameInput = {
    id?: number
    task?: TaskUncheckedCreateNestedManyWithoutSelectedInput
  }

  export type TaskSelectionCreateOrConnectWithoutGameInput = {
    where: TaskSelectionWhereUniqueInput
    create: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput>
  }

  export type TaskSelectionCreateManyGameInputEnvelope = {
    data: TaskSelectionCreateManyGameInput | TaskSelectionCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type TaskResultCreateWithoutGameInput = {
    submissions?: TaskSubmissionCreateNestedManyWithoutTaskResultInput
  }

  export type TaskResultUncheckedCreateWithoutGameInput = {
    id?: number
    submissions?: TaskSubmissionUncheckedCreateNestedManyWithoutTaskResultInput
  }

  export type TaskResultCreateOrConnectWithoutGameInput = {
    where: TaskResultWhereUniqueInput
    create: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput>
  }

  export type TaskResultCreateManyGameInputEnvelope = {
    data: TaskResultCreateManyGameInput | TaskResultCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type PredictionRoundCreateWithoutGameInput = {
    results?: PredictionResultCreateNestedManyWithoutRoundInput
  }

  export type PredictionRoundUncheckedCreateWithoutGameInput = {
    id?: number
    results?: PredictionResultUncheckedCreateNestedManyWithoutRoundInput
  }

  export type PredictionRoundCreateOrConnectWithoutGameInput = {
    where: PredictionRoundWhereUniqueInput
    create: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput>
  }

  export type PredictionRoundCreateManyGameInputEnvelope = {
    data: PredictionRoundCreateManyGameInput | PredictionRoundCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutGameInput = {
    update: XOR<EventUpdateWithoutGameInput, EventUncheckedUpdateWithoutGameInput>
    create: XOR<EventCreateWithoutGameInput, EventUncheckedCreateWithoutGameInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutGameInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutGameInput, EventUncheckedUpdateWithoutGameInput>
  }

  export type EventUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: EmailRecordUpdateManyWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: EmailRecordUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type GameConfigUpsertWithoutGamesInput = {
    update: XOR<GameConfigUpdateWithoutGamesInput, GameConfigUncheckedUpdateWithoutGamesInput>
    create: XOR<GameConfigCreateWithoutGamesInput, GameConfigUncheckedCreateWithoutGamesInput>
    where?: GameConfigWhereInput
  }

  export type GameConfigUpdateToOneWithWhereWithoutGamesInput = {
    where?: GameConfigWhereInput
    data: XOR<GameConfigUpdateWithoutGamesInput, GameConfigUncheckedUpdateWithoutGamesInput>
  }

  export type GameConfigUpdateWithoutGamesInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameConfigUncheckedUpdateWithoutGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutGameInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutGameInput, UserSessionUncheckedUpdateWithoutGameInput>
    create: XOR<UserSessionCreateWithoutGameInput, UserSessionUncheckedCreateWithoutGameInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutGameInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutGameInput, UserSessionUncheckedUpdateWithoutGameInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutGameInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutGameInput>
  }

  export type TaskSelectionUpsertWithWhereUniqueWithoutGameInput = {
    where: TaskSelectionWhereUniqueInput
    update: XOR<TaskSelectionUpdateWithoutGameInput, TaskSelectionUncheckedUpdateWithoutGameInput>
    create: XOR<TaskSelectionCreateWithoutGameInput, TaskSelectionUncheckedCreateWithoutGameInput>
  }

  export type TaskSelectionUpdateWithWhereUniqueWithoutGameInput = {
    where: TaskSelectionWhereUniqueInput
    data: XOR<TaskSelectionUpdateWithoutGameInput, TaskSelectionUncheckedUpdateWithoutGameInput>
  }

  export type TaskSelectionUpdateManyWithWhereWithoutGameInput = {
    where: TaskSelectionScalarWhereInput
    data: XOR<TaskSelectionUpdateManyMutationInput, TaskSelectionUncheckedUpdateManyWithoutGameInput>
  }

  export type TaskSelectionScalarWhereInput = {
    AND?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
    OR?: TaskSelectionScalarWhereInput[]
    NOT?: TaskSelectionScalarWhereInput | TaskSelectionScalarWhereInput[]
    id?: IntFilter<"TaskSelection"> | number
    gameId?: IntFilter<"TaskSelection"> | number
  }

  export type TaskResultUpsertWithWhereUniqueWithoutGameInput = {
    where: TaskResultWhereUniqueInput
    update: XOR<TaskResultUpdateWithoutGameInput, TaskResultUncheckedUpdateWithoutGameInput>
    create: XOR<TaskResultCreateWithoutGameInput, TaskResultUncheckedCreateWithoutGameInput>
  }

  export type TaskResultUpdateWithWhereUniqueWithoutGameInput = {
    where: TaskResultWhereUniqueInput
    data: XOR<TaskResultUpdateWithoutGameInput, TaskResultUncheckedUpdateWithoutGameInput>
  }

  export type TaskResultUpdateManyWithWhereWithoutGameInput = {
    where: TaskResultScalarWhereInput
    data: XOR<TaskResultUpdateManyMutationInput, TaskResultUncheckedUpdateManyWithoutGameInput>
  }

  export type TaskResultScalarWhereInput = {
    AND?: TaskResultScalarWhereInput | TaskResultScalarWhereInput[]
    OR?: TaskResultScalarWhereInput[]
    NOT?: TaskResultScalarWhereInput | TaskResultScalarWhereInput[]
    id?: IntFilter<"TaskResult"> | number
    gameId?: IntFilter<"TaskResult"> | number
  }

  export type PredictionRoundUpsertWithWhereUniqueWithoutGameInput = {
    where: PredictionRoundWhereUniqueInput
    update: XOR<PredictionRoundUpdateWithoutGameInput, PredictionRoundUncheckedUpdateWithoutGameInput>
    create: XOR<PredictionRoundCreateWithoutGameInput, PredictionRoundUncheckedCreateWithoutGameInput>
  }

  export type PredictionRoundUpdateWithWhereUniqueWithoutGameInput = {
    where: PredictionRoundWhereUniqueInput
    data: XOR<PredictionRoundUpdateWithoutGameInput, PredictionRoundUncheckedUpdateWithoutGameInput>
  }

  export type PredictionRoundUpdateManyWithWhereWithoutGameInput = {
    where: PredictionRoundScalarWhereInput
    data: XOR<PredictionRoundUpdateManyMutationInput, PredictionRoundUncheckedUpdateManyWithoutGameInput>
  }

  export type PredictionRoundScalarWhereInput = {
    AND?: PredictionRoundScalarWhereInput | PredictionRoundScalarWhereInput[]
    OR?: PredictionRoundScalarWhereInput[]
    NOT?: PredictionRoundScalarWhereInput | PredictionRoundScalarWhereInput[]
    id?: IntFilter<"PredictionRound"> | number
    gameId?: IntFilter<"PredictionRound"> | number
  }

  export type GameCreateWithoutConfigInput = {
    event: EventCreateNestedOneWithoutGameInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutConfigInput = {
    id?: number
    eventId: string
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutConfigInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput>
  }

  export type GameCreateManyConfigInputEnvelope = {
    data: GameCreateManyConfigInput | GameCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutConfigInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutConfigInput, GameUncheckedUpdateWithoutConfigInput>
    create: XOR<GameCreateWithoutConfigInput, GameUncheckedCreateWithoutConfigInput>
  }

  export type GameUpdateWithWhereUniqueWithoutConfigInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutConfigInput, GameUncheckedUpdateWithoutConfigInput>
  }

  export type GameUpdateManyWithWhereWithoutConfigInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutConfigInput>
  }

  export type TaskConfigCreateWithoutTaskInput = {
    duration: Date | string
    submissionType: $Enums.TaskSubmissionType
  }

  export type TaskConfigUncheckedCreateWithoutTaskInput = {
    id?: number
    duration: Date | string
    submissionType: $Enums.TaskSubmissionType
  }

  export type TaskConfigCreateOrConnectWithoutTaskInput = {
    where: TaskConfigWhereUniqueInput
    create: XOR<TaskConfigCreateWithoutTaskInput, TaskConfigUncheckedCreateWithoutTaskInput>
  }

  export type TaskSelectionCreateWithoutTaskInput = {
    game: GameCreateNestedOneWithoutTasksInput
  }

  export type TaskSelectionUncheckedCreateWithoutTaskInput = {
    id?: number
    gameId: number
  }

  export type TaskSelectionCreateOrConnectWithoutTaskInput = {
    where: TaskSelectionWhereUniqueInput
    create: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput>
  }

  export type TaskSubmissionCreateWithoutTaskInput = {
    submittedAt?: Date | string
    userSession: UserSessionCreateNestedOneWithoutTasksInput
    taskResult: TaskResultCreateNestedOneWithoutSubmissionsInput
  }

  export type TaskSubmissionUncheckedCreateWithoutTaskInput = {
    userSessionId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionCreateOrConnectWithoutTaskInput = {
    where: TaskSubmissionWhereUniqueInput
    create: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput>
  }

  export type TaskSubmissionCreateManyTaskInputEnvelope = {
    data: TaskSubmissionCreateManyTaskInput | TaskSubmissionCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type TaskConfigUpsertWithoutTaskInput = {
    update: XOR<TaskConfigUpdateWithoutTaskInput, TaskConfigUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskConfigCreateWithoutTaskInput, TaskConfigUncheckedCreateWithoutTaskInput>
    where?: TaskConfigWhereInput
  }

  export type TaskConfigUpdateToOneWithWhereWithoutTaskInput = {
    where?: TaskConfigWhereInput
    data: XOR<TaskConfigUpdateWithoutTaskInput, TaskConfigUncheckedUpdateWithoutTaskInput>
  }

  export type TaskConfigUpdateWithoutTaskInput = {
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
  }

  export type TaskConfigUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    duration?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionType?: EnumTaskSubmissionTypeFieldUpdateOperationsInput | $Enums.TaskSubmissionType
  }

  export type TaskSelectionUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskSelectionWhereUniqueInput
    update: XOR<TaskSelectionUpdateWithoutTaskInput, TaskSelectionUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskSelectionCreateWithoutTaskInput, TaskSelectionUncheckedCreateWithoutTaskInput>
  }

  export type TaskSelectionUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskSelectionWhereUniqueInput
    data: XOR<TaskSelectionUpdateWithoutTaskInput, TaskSelectionUncheckedUpdateWithoutTaskInput>
  }

  export type TaskSelectionUpdateManyWithWhereWithoutTaskInput = {
    where: TaskSelectionScalarWhereInput
    data: XOR<TaskSelectionUpdateManyMutationInput, TaskSelectionUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskSubmissionUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskSubmissionWhereUniqueInput
    update: XOR<TaskSubmissionUpdateWithoutTaskInput, TaskSubmissionUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskSubmissionCreateWithoutTaskInput, TaskSubmissionUncheckedCreateWithoutTaskInput>
  }

  export type TaskSubmissionUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskSubmissionWhereUniqueInput
    data: XOR<TaskSubmissionUpdateWithoutTaskInput, TaskSubmissionUncheckedUpdateWithoutTaskInput>
  }

  export type TaskSubmissionUpdateManyWithWhereWithoutTaskInput = {
    where: TaskSubmissionScalarWhereInput
    data: XOR<TaskSubmissionUpdateManyMutationInput, TaskSubmissionUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskCreateWithoutConfigInput = {
    prompt: string
    selected?: TaskSelectionCreateNestedManyWithoutTaskInput
    submissions?: TaskSubmissionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutConfigInput = {
    id?: number
    prompt: string
    selected?: TaskSelectionUncheckedCreateNestedManyWithoutTaskInput
    submissions?: TaskSubmissionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutConfigInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput>
  }

  export type TaskCreateManyConfigInputEnvelope = {
    data: TaskCreateManyConfigInput | TaskCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type TaskUpsertWithWhereUniqueWithoutConfigInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutConfigInput, TaskUncheckedUpdateWithoutConfigInput>
    create: XOR<TaskCreateWithoutConfigInput, TaskUncheckedCreateWithoutConfigInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutConfigInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutConfigInput, TaskUncheckedUpdateWithoutConfigInput>
  }

  export type TaskUpdateManyWithWhereWithoutConfigInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutConfigInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: IntFilter<"Task"> | number
    configId?: IntFilter<"Task"> | number
    prompt?: StringFilter<"Task"> | string
  }

  export type GameCreateWithoutTasksInput = {
    event: EventCreateNestedOneWithoutGameInput
    config: GameConfigCreateNestedOneWithoutGamesInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTasksInput = {
    id?: number
    eventId: string
    configId: number
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTasksInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTasksInput, GameUncheckedCreateWithoutTasksInput>
  }

  export type TaskCreateWithoutSelectedInput = {
    prompt: string
    config: TaskConfigCreateNestedOneWithoutTaskInput
    submissions?: TaskSubmissionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSelectedInput = {
    id?: number
    configId: number
    prompt: string
    submissions?: TaskSubmissionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSelectedInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput>
  }

  export type GameUpsertWithoutTasksInput = {
    update: XOR<GameUpdateWithoutTasksInput, GameUncheckedUpdateWithoutTasksInput>
    create: XOR<GameCreateWithoutTasksInput, GameUncheckedCreateWithoutTasksInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutTasksInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutTasksInput, GameUncheckedUpdateWithoutTasksInput>
  }

  export type GameUpdateWithoutTasksInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutSelectedInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutSelectedInput, TaskUncheckedUpdateWithoutSelectedInput>
    create: XOR<TaskCreateWithoutSelectedInput, TaskUncheckedCreateWithoutSelectedInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutSelectedInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutSelectedInput, TaskUncheckedUpdateWithoutSelectedInput>
  }

  export type TaskUpdateManyWithWhereWithoutSelectedInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutSelectedInput>
  }

  export type GameCreateWithoutTaskResultInput = {
    event: EventCreateNestedOneWithoutGameInput
    config: GameConfigCreateNestedOneWithoutGamesInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTaskResultInput = {
    id?: number
    eventId: string
    configId: number
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    predictionRounds?: PredictionRoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTaskResultInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTaskResultInput, GameUncheckedCreateWithoutTaskResultInput>
  }

  export type TaskSubmissionCreateWithoutTaskResultInput = {
    submittedAt?: Date | string
    userSession: UserSessionCreateNestedOneWithoutTasksInput
    task: TaskCreateNestedOneWithoutSubmissionsInput
  }

  export type TaskSubmissionUncheckedCreateWithoutTaskResultInput = {
    userSessionId: number
    taskId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionCreateOrConnectWithoutTaskResultInput = {
    where: TaskSubmissionWhereUniqueInput
    create: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput>
  }

  export type TaskSubmissionCreateManyTaskResultInputEnvelope = {
    data: TaskSubmissionCreateManyTaskResultInput | TaskSubmissionCreateManyTaskResultInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithoutTaskResultInput = {
    update: XOR<GameUpdateWithoutTaskResultInput, GameUncheckedUpdateWithoutTaskResultInput>
    create: XOR<GameCreateWithoutTaskResultInput, GameUncheckedCreateWithoutTaskResultInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutTaskResultInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutTaskResultInput, GameUncheckedUpdateWithoutTaskResultInput>
  }

  export type GameUpdateWithoutTaskResultInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTaskResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TaskSubmissionUpsertWithWhereUniqueWithoutTaskResultInput = {
    where: TaskSubmissionWhereUniqueInput
    update: XOR<TaskSubmissionUpdateWithoutTaskResultInput, TaskSubmissionUncheckedUpdateWithoutTaskResultInput>
    create: XOR<TaskSubmissionCreateWithoutTaskResultInput, TaskSubmissionUncheckedCreateWithoutTaskResultInput>
  }

  export type TaskSubmissionUpdateWithWhereUniqueWithoutTaskResultInput = {
    where: TaskSubmissionWhereUniqueInput
    data: XOR<TaskSubmissionUpdateWithoutTaskResultInput, TaskSubmissionUncheckedUpdateWithoutTaskResultInput>
  }

  export type TaskSubmissionUpdateManyWithWhereWithoutTaskResultInput = {
    where: TaskSubmissionScalarWhereInput
    data: XOR<TaskSubmissionUpdateManyMutationInput, TaskSubmissionUncheckedUpdateManyWithoutTaskResultInput>
  }

  export type UserSessionCreateWithoutTasksInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    email: EmailRecordCreateNestedOneWithoutSessionsInput
    game: GameCreateNestedOneWithoutPlayerSessionsInput
    votes?: VoteSubmissionCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateWithoutTasksInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
    votes?: VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionCreateOrConnectWithoutTasksInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutTasksInput, UserSessionUncheckedCreateWithoutTasksInput>
  }

  export type TaskCreateWithoutSubmissionsInput = {
    prompt: string
    config: TaskConfigCreateNestedOneWithoutTaskInput
    selected?: TaskSelectionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSubmissionsInput = {
    id?: number
    configId: number
    prompt: string
    selected?: TaskSelectionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSubmissionsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSubmissionsInput, TaskUncheckedCreateWithoutSubmissionsInput>
  }

  export type TaskResultCreateWithoutSubmissionsInput = {
    game: GameCreateNestedOneWithoutTaskResultInput
  }

  export type TaskResultUncheckedCreateWithoutSubmissionsInput = {
    id?: number
    gameId: number
  }

  export type TaskResultCreateOrConnectWithoutSubmissionsInput = {
    where: TaskResultWhereUniqueInput
    create: XOR<TaskResultCreateWithoutSubmissionsInput, TaskResultUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserSessionUpsertWithoutTasksInput = {
    update: XOR<UserSessionUpdateWithoutTasksInput, UserSessionUncheckedUpdateWithoutTasksInput>
    create: XOR<UserSessionCreateWithoutTasksInput, UserSessionUncheckedCreateWithoutTasksInput>
    where?: UserSessionWhereInput
  }

  export type UserSessionUpdateToOneWithWhereWithoutTasksInput = {
    where?: UserSessionWhereInput
    data: XOR<UserSessionUpdateWithoutTasksInput, UserSessionUncheckedUpdateWithoutTasksInput>
  }

  export type UserSessionUpdateWithoutTasksInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    email?: EmailRecordUpdateOneRequiredWithoutSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutPlayerSessionsNestedInput
    votes?: VoteSubmissionUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
    votes?: VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type TaskUpsertWithoutSubmissionsInput = {
    update: XOR<TaskUpdateWithoutSubmissionsInput, TaskUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<TaskCreateWithoutSubmissionsInput, TaskUncheckedCreateWithoutSubmissionsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutSubmissionsInput, TaskUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TaskUpdateWithoutSubmissionsInput = {
    prompt?: StringFieldUpdateOperationsInput | string
    config?: TaskConfigUpdateOneRequiredWithoutTaskNestedInput
    selected?: TaskSelectionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSubmissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    selected?: TaskSelectionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskResultUpsertWithoutSubmissionsInput = {
    update: XOR<TaskResultUpdateWithoutSubmissionsInput, TaskResultUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<TaskResultCreateWithoutSubmissionsInput, TaskResultUncheckedCreateWithoutSubmissionsInput>
    where?: TaskResultWhereInput
  }

  export type TaskResultUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: TaskResultWhereInput
    data: XOR<TaskResultUpdateWithoutSubmissionsInput, TaskResultUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TaskResultUpdateWithoutSubmissionsInput = {
    game?: GameUpdateOneRequiredWithoutTaskResultNestedInput
  }

  export type TaskResultUncheckedUpdateWithoutSubmissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type VoteItemCreateWithoutContentInput = {
    submissions?: VoteSubmissionCreateNestedManyWithoutItemInput
  }

  export type VoteItemUncheckedCreateWithoutContentInput = {
    id?: number
    submissions?: VoteSubmissionUncheckedCreateNestedManyWithoutItemInput
  }

  export type VoteItemCreateOrConnectWithoutContentInput = {
    where: VoteItemWhereUniqueInput
    create: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput>
  }

  export type VoteItemCreateManyContentInputEnvelope = {
    data: VoteItemCreateManyContentInput | VoteItemCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type VoteItemUpsertWithWhereUniqueWithoutContentInput = {
    where: VoteItemWhereUniqueInput
    update: XOR<VoteItemUpdateWithoutContentInput, VoteItemUncheckedUpdateWithoutContentInput>
    create: XOR<VoteItemCreateWithoutContentInput, VoteItemUncheckedCreateWithoutContentInput>
  }

  export type VoteItemUpdateWithWhereUniqueWithoutContentInput = {
    where: VoteItemWhereUniqueInput
    data: XOR<VoteItemUpdateWithoutContentInput, VoteItemUncheckedUpdateWithoutContentInput>
  }

  export type VoteItemUpdateManyWithWhereWithoutContentInput = {
    where: VoteItemScalarWhereInput
    data: XOR<VoteItemUpdateManyMutationInput, VoteItemUncheckedUpdateManyWithoutContentInput>
  }

  export type VoteItemScalarWhereInput = {
    AND?: VoteItemScalarWhereInput | VoteItemScalarWhereInput[]
    OR?: VoteItemScalarWhereInput[]
    NOT?: VoteItemScalarWhereInput | VoteItemScalarWhereInput[]
    id?: IntFilter<"VoteItem"> | number
    contentId?: IntFilter<"VoteItem"> | number
  }

  export type VoteContentCreateWithoutItemsInput = {
    question: string
  }

  export type VoteContentUncheckedCreateWithoutItemsInput = {
    id?: number
    question: string
  }

  export type VoteContentCreateOrConnectWithoutItemsInput = {
    where: VoteContentWhereUniqueInput
    create: XOR<VoteContentCreateWithoutItemsInput, VoteContentUncheckedCreateWithoutItemsInput>
  }

  export type VoteSubmissionCreateWithoutItemInput = {
    vote: $Enums.VoteOptionsType
    userSession: UserSessionCreateNestedOneWithoutVotesInput
  }

  export type VoteSubmissionUncheckedCreateWithoutItemInput = {
    userSessionId: number
    vote: $Enums.VoteOptionsType
  }

  export type VoteSubmissionCreateOrConnectWithoutItemInput = {
    where: VoteSubmissionWhereUniqueInput
    create: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput>
  }

  export type VoteSubmissionCreateManyItemInputEnvelope = {
    data: VoteSubmissionCreateManyItemInput | VoteSubmissionCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type VoteContentUpsertWithoutItemsInput = {
    update: XOR<VoteContentUpdateWithoutItemsInput, VoteContentUncheckedUpdateWithoutItemsInput>
    create: XOR<VoteContentCreateWithoutItemsInput, VoteContentUncheckedCreateWithoutItemsInput>
    where?: VoteContentWhereInput
  }

  export type VoteContentUpdateToOneWithWhereWithoutItemsInput = {
    where?: VoteContentWhereInput
    data: XOR<VoteContentUpdateWithoutItemsInput, VoteContentUncheckedUpdateWithoutItemsInput>
  }

  export type VoteContentUpdateWithoutItemsInput = {
    question?: StringFieldUpdateOperationsInput | string
  }

  export type VoteContentUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
  }

  export type VoteSubmissionUpsertWithWhereUniqueWithoutItemInput = {
    where: VoteSubmissionWhereUniqueInput
    update: XOR<VoteSubmissionUpdateWithoutItemInput, VoteSubmissionUncheckedUpdateWithoutItemInput>
    create: XOR<VoteSubmissionCreateWithoutItemInput, VoteSubmissionUncheckedCreateWithoutItemInput>
  }

  export type VoteSubmissionUpdateWithWhereUniqueWithoutItemInput = {
    where: VoteSubmissionWhereUniqueInput
    data: XOR<VoteSubmissionUpdateWithoutItemInput, VoteSubmissionUncheckedUpdateWithoutItemInput>
  }

  export type VoteSubmissionUpdateManyWithWhereWithoutItemInput = {
    where: VoteSubmissionScalarWhereInput
    data: XOR<VoteSubmissionUpdateManyMutationInput, VoteSubmissionUncheckedUpdateManyWithoutItemInput>
  }

  export type UserSessionCreateWithoutVotesInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    email: EmailRecordCreateNestedOneWithoutSessionsInput
    game: GameCreateNestedOneWithoutPlayerSessionsInput
    tasks?: TaskSubmissionCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateWithoutVotesInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
    tasks?: TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    predictions?: PredictionResultUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionCreateOrConnectWithoutVotesInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutVotesInput, UserSessionUncheckedCreateWithoutVotesInput>
  }

  export type VoteItemCreateWithoutSubmissionsInput = {
    content: VoteContentCreateNestedOneWithoutItemsInput
  }

  export type VoteItemUncheckedCreateWithoutSubmissionsInput = {
    id?: number
    contentId: number
  }

  export type VoteItemCreateOrConnectWithoutSubmissionsInput = {
    where: VoteItemWhereUniqueInput
    create: XOR<VoteItemCreateWithoutSubmissionsInput, VoteItemUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserSessionUpsertWithoutVotesInput = {
    update: XOR<UserSessionUpdateWithoutVotesInput, UserSessionUncheckedUpdateWithoutVotesInput>
    create: XOR<UserSessionCreateWithoutVotesInput, UserSessionUncheckedCreateWithoutVotesInput>
    where?: UserSessionWhereInput
  }

  export type UserSessionUpdateToOneWithWhereWithoutVotesInput = {
    where?: UserSessionWhereInput
    data: XOR<UserSessionUpdateWithoutVotesInput, UserSessionUncheckedUpdateWithoutVotesInput>
  }

  export type UserSessionUpdateWithoutVotesInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    email?: EmailRecordUpdateOneRequiredWithoutSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutPlayerSessionsNestedInput
    tasks?: TaskSubmissionUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateWithoutVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type VoteItemUpsertWithoutSubmissionsInput = {
    update: XOR<VoteItemUpdateWithoutSubmissionsInput, VoteItemUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<VoteItemCreateWithoutSubmissionsInput, VoteItemUncheckedCreateWithoutSubmissionsInput>
    where?: VoteItemWhereInput
  }

  export type VoteItemUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: VoteItemWhereInput
    data: XOR<VoteItemUpdateWithoutSubmissionsInput, VoteItemUncheckedUpdateWithoutSubmissionsInput>
  }

  export type VoteItemUpdateWithoutSubmissionsInput = {
    content?: VoteContentUpdateOneRequiredWithoutItemsNestedInput
  }

  export type VoteItemUncheckedUpdateWithoutSubmissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateWithoutPredictionRoundsInput = {
    event: EventCreateNestedOneWithoutGameInput
    config: GameConfigCreateNestedOneWithoutGamesInput
    playerSessions?: UserSessionCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionCreateNestedManyWithoutGameInput
    taskResult?: TaskResultCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutPredictionRoundsInput = {
    id?: number
    eventId: string
    configId: number
    playerSessions?: UserSessionUncheckedCreateNestedManyWithoutGameInput
    tasks?: TaskSelectionUncheckedCreateNestedManyWithoutGameInput
    taskResult?: TaskResultUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutPredictionRoundsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPredictionRoundsInput, GameUncheckedCreateWithoutPredictionRoundsInput>
  }

  export type PredictionResultCreateWithoutRoundInput = {
    outcome: $Enums.PredictionOutcome
    userSession: UserSessionCreateNestedOneWithoutPredictionsInput
  }

  export type PredictionResultUncheckedCreateWithoutRoundInput = {
    userSessionId: number
    outcome: $Enums.PredictionOutcome
  }

  export type PredictionResultCreateOrConnectWithoutRoundInput = {
    where: PredictionResultWhereUniqueInput
    create: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput>
  }

  export type PredictionResultCreateManyRoundInputEnvelope = {
    data: PredictionResultCreateManyRoundInput | PredictionResultCreateManyRoundInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithoutPredictionRoundsInput = {
    update: XOR<GameUpdateWithoutPredictionRoundsInput, GameUncheckedUpdateWithoutPredictionRoundsInput>
    create: XOR<GameCreateWithoutPredictionRoundsInput, GameUncheckedCreateWithoutPredictionRoundsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutPredictionRoundsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutPredictionRoundsInput, GameUncheckedUpdateWithoutPredictionRoundsInput>
  }

  export type GameUpdateWithoutPredictionRoundsInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPredictionRoundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    configId?: IntFieldUpdateOperationsInput | number
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
  }

  export type PredictionResultUpsertWithWhereUniqueWithoutRoundInput = {
    where: PredictionResultWhereUniqueInput
    update: XOR<PredictionResultUpdateWithoutRoundInput, PredictionResultUncheckedUpdateWithoutRoundInput>
    create: XOR<PredictionResultCreateWithoutRoundInput, PredictionResultUncheckedCreateWithoutRoundInput>
  }

  export type PredictionResultUpdateWithWhereUniqueWithoutRoundInput = {
    where: PredictionResultWhereUniqueInput
    data: XOR<PredictionResultUpdateWithoutRoundInput, PredictionResultUncheckedUpdateWithoutRoundInput>
  }

  export type PredictionResultUpdateManyWithWhereWithoutRoundInput = {
    where: PredictionResultScalarWhereInput
    data: XOR<PredictionResultUpdateManyMutationInput, PredictionResultUncheckedUpdateManyWithoutRoundInput>
  }

  export type PredictionQuestionCreateWithoutPredictionConfigInput = {

  }

  export type PredictionQuestionUncheckedCreateWithoutPredictionConfigInput = {
    id?: number
  }

  export type PredictionQuestionCreateOrConnectWithoutPredictionConfigInput = {
    where: PredictionQuestionWhereUniqueInput
    create: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput>
  }

  export type PredictionQuestionCreateManyPredictionConfigInputEnvelope = {
    data: PredictionQuestionCreateManyPredictionConfigInput | PredictionQuestionCreateManyPredictionConfigInput[]
    skipDuplicates?: boolean
  }

  export type PredictionQuestionUpsertWithWhereUniqueWithoutPredictionConfigInput = {
    where: PredictionQuestionWhereUniqueInput
    update: XOR<PredictionQuestionUpdateWithoutPredictionConfigInput, PredictionQuestionUncheckedUpdateWithoutPredictionConfigInput>
    create: XOR<PredictionQuestionCreateWithoutPredictionConfigInput, PredictionQuestionUncheckedCreateWithoutPredictionConfigInput>
  }

  export type PredictionQuestionUpdateWithWhereUniqueWithoutPredictionConfigInput = {
    where: PredictionQuestionWhereUniqueInput
    data: XOR<PredictionQuestionUpdateWithoutPredictionConfigInput, PredictionQuestionUncheckedUpdateWithoutPredictionConfigInput>
  }

  export type PredictionQuestionUpdateManyWithWhereWithoutPredictionConfigInput = {
    where: PredictionQuestionScalarWhereInput
    data: XOR<PredictionQuestionUpdateManyMutationInput, PredictionQuestionUncheckedUpdateManyWithoutPredictionConfigInput>
  }

  export type PredictionQuestionScalarWhereInput = {
    AND?: PredictionQuestionScalarWhereInput | PredictionQuestionScalarWhereInput[]
    OR?: PredictionQuestionScalarWhereInput[]
    NOT?: PredictionQuestionScalarWhereInput | PredictionQuestionScalarWhereInput[]
    id?: IntFilter<"PredictionQuestion"> | number
    predictionConfigId?: IntFilter<"PredictionQuestion"> | number
  }

  export type PredictionConfigCreateWithoutQuestionsInput = {
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
  }

  export type PredictionConfigUncheckedCreateWithoutQuestionsInput = {
    id?: number
    signal: $Enums.SignalType
    difficulty: $Enums.SignalTolerance
  }

  export type PredictionConfigCreateOrConnectWithoutQuestionsInput = {
    where: PredictionConfigWhereUniqueInput
    create: XOR<PredictionConfigCreateWithoutQuestionsInput, PredictionConfigUncheckedCreateWithoutQuestionsInput>
  }

  export type PredictionConfigUpsertWithoutQuestionsInput = {
    update: XOR<PredictionConfigUpdateWithoutQuestionsInput, PredictionConfigUncheckedUpdateWithoutQuestionsInput>
    create: XOR<PredictionConfigCreateWithoutQuestionsInput, PredictionConfigUncheckedCreateWithoutQuestionsInput>
    where?: PredictionConfigWhereInput
  }

  export type PredictionConfigUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: PredictionConfigWhereInput
    data: XOR<PredictionConfigUpdateWithoutQuestionsInput, PredictionConfigUncheckedUpdateWithoutQuestionsInput>
  }

  export type PredictionConfigUpdateWithoutQuestionsInput = {
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
  }

  export type PredictionConfigUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    signal?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    difficulty?: EnumSignalToleranceFieldUpdateOperationsInput | $Enums.SignalTolerance
  }

  export type UserSessionCreateWithoutPredictionsInput = {
    lastActive?: Date | string
    status: $Enums.SessionStatus
    email: EmailRecordCreateNestedOneWithoutSessionsInput
    game: GameCreateNestedOneWithoutPlayerSessionsInput
    tasks?: TaskSubmissionCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionUncheckedCreateWithoutPredictionsInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
    tasks?: TaskSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
    votes?: VoteSubmissionUncheckedCreateNestedManyWithoutUserSessionInput
  }

  export type UserSessionCreateOrConnectWithoutPredictionsInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutPredictionsInput, UserSessionUncheckedCreateWithoutPredictionsInput>
  }

  export type PredictionRoundCreateWithoutResultsInput = {
    game: GameCreateNestedOneWithoutPredictionRoundsInput
  }

  export type PredictionRoundUncheckedCreateWithoutResultsInput = {
    id?: number
    gameId: number
  }

  export type PredictionRoundCreateOrConnectWithoutResultsInput = {
    where: PredictionRoundWhereUniqueInput
    create: XOR<PredictionRoundCreateWithoutResultsInput, PredictionRoundUncheckedCreateWithoutResultsInput>
  }

  export type UserSessionUpsertWithoutPredictionsInput = {
    update: XOR<UserSessionUpdateWithoutPredictionsInput, UserSessionUncheckedUpdateWithoutPredictionsInput>
    create: XOR<UserSessionCreateWithoutPredictionsInput, UserSessionUncheckedCreateWithoutPredictionsInput>
    where?: UserSessionWhereInput
  }

  export type UserSessionUpdateToOneWithWhereWithoutPredictionsInput = {
    where?: UserSessionWhereInput
    data: XOR<UserSessionUpdateWithoutPredictionsInput, UserSessionUncheckedUpdateWithoutPredictionsInput>
  }

  export type UserSessionUpdateWithoutPredictionsInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    email?: EmailRecordUpdateOneRequiredWithoutSessionsNestedInput
    game?: GameUpdateOneRequiredWithoutPlayerSessionsNestedInput
    tasks?: TaskSubmissionUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateWithoutPredictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type PredictionRoundUpsertWithoutResultsInput = {
    update: XOR<PredictionRoundUpdateWithoutResultsInput, PredictionRoundUncheckedUpdateWithoutResultsInput>
    create: XOR<PredictionRoundCreateWithoutResultsInput, PredictionRoundUncheckedCreateWithoutResultsInput>
    where?: PredictionRoundWhereInput
  }

  export type PredictionRoundUpdateToOneWithWhereWithoutResultsInput = {
    where?: PredictionRoundWhereInput
    data: XOR<PredictionRoundUpdateWithoutResultsInput, PredictionRoundUncheckedUpdateWithoutResultsInput>
  }

  export type PredictionRoundUpdateWithoutResultsInput = {
    game?: GameUpdateOneRequiredWithoutPredictionRoundsNestedInput
  }

  export type PredictionRoundUncheckedUpdateWithoutResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateManyEventInput = {
    id?: number
    configId: number
  }

  export type EmailRecordUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: UserSessionUpdateManyWithoutEmailNestedInput
  }

  export type EmailRecordUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: UserSessionUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailRecordUncheckedUpdateManyWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutEventInput = {
    config?: GameConfigUpdateOneRequiredWithoutGamesNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
  }

  export type UserSessionCreateManyEmailInput = {
    id?: number
    lastActive?: Date | string
    status: $Enums.SessionStatus
    gameId: number
  }

  export type EventUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionUpdateWithoutEmailInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    game?: GameUpdateOneRequiredWithoutPlayerSessionsNestedInput
    tasks?: TaskSubmissionUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateWithoutEmailInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateManyWithoutEmailInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskSubmissionCreateManyUserSessionInput = {
    taskId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type VoteSubmissionCreateManyUserSessionInput = {
    itemId: number
    vote: $Enums.VoteOptionsType
  }

  export type PredictionResultCreateManyUserSessionInput = {
    outcome: $Enums.PredictionOutcome
    roundId: number
  }

  export type TaskSubmissionUpdateWithoutUserSessionInput = {
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutSubmissionsNestedInput
    taskResult?: TaskResultUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type TaskSubmissionUncheckedUpdateWithoutUserSessionInput = {
    taskId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutUserSessionInput = {
    taskId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteSubmissionUpdateWithoutUserSessionInput = {
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
    item?: VoteItemUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type VoteSubmissionUncheckedUpdateWithoutUserSessionInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type VoteSubmissionUncheckedUpdateManyWithoutUserSessionInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type PredictionResultUpdateWithoutUserSessionInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    round?: PredictionRoundUpdateOneRequiredWithoutResultsNestedInput
  }

  export type PredictionResultUncheckedUpdateWithoutUserSessionInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    roundId?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionResultUncheckedUpdateManyWithoutUserSessionInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    roundId?: IntFieldUpdateOperationsInput | number
  }

  export type UserSessionCreateManyGameInput = {
    id?: number
    emailId: string
    lastActive?: Date | string
    status: $Enums.SessionStatus
  }

  export type TaskSelectionCreateManyGameInput = {
    id?: number
  }

  export type TaskResultCreateManyGameInput = {
    id?: number
  }

  export type PredictionRoundCreateManyGameInput = {
    id?: number
  }

  export type UserSessionUpdateWithoutGameInput = {
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    email?: EmailRecordUpdateOneRequiredWithoutSessionsNestedInput
    tasks?: TaskSubmissionUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    tasks?: TaskSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    votes?: VoteSubmissionUncheckedUpdateManyWithoutUserSessionNestedInput
    predictions?: PredictionResultUncheckedUpdateManyWithoutUserSessionNestedInput
  }

  export type UserSessionUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailId?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  }

  export type TaskSelectionUpdateWithoutGameInput = {
    task?: TaskUpdateManyWithoutSelectedNestedInput
  }

  export type TaskSelectionUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    task?: TaskUncheckedUpdateManyWithoutSelectedNestedInput
  }

  export type TaskSelectionUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TaskResultUpdateWithoutGameInput = {
    submissions?: TaskSubmissionUpdateManyWithoutTaskResultNestedInput
  }

  export type TaskResultUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    submissions?: TaskSubmissionUncheckedUpdateManyWithoutTaskResultNestedInput
  }

  export type TaskResultUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionRoundUpdateWithoutGameInput = {
    results?: PredictionResultUpdateManyWithoutRoundNestedInput
  }

  export type PredictionRoundUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    results?: PredictionResultUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type PredictionRoundUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateManyConfigInput = {
    id?: number
    eventId: string
  }

  export type GameUpdateWithoutConfigInput = {
    event?: EventUpdateOneRequiredWithoutGameNestedInput
    playerSessions?: UserSessionUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    playerSessions?: UserSessionUncheckedUpdateManyWithoutGameNestedInput
    tasks?: TaskSelectionUncheckedUpdateManyWithoutGameNestedInput
    taskResult?: TaskResultUncheckedUpdateManyWithoutGameNestedInput
    predictionRounds?: PredictionRoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskSubmissionCreateManyTaskInput = {
    userSessionId: number
    taskResultId: number
    submittedAt?: Date | string
  }

  export type TaskSelectionUpdateWithoutTaskInput = {
    game?: GameUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskSelectionUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskSelectionUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskSubmissionUpdateWithoutTaskInput = {
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSession?: UserSessionUpdateOneRequiredWithoutTasksNestedInput
    taskResult?: TaskResultUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type TaskSubmissionUncheckedUpdateWithoutTaskInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutTaskInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskResultId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyConfigInput = {
    id?: number
    prompt: string
  }

  export type TaskUpdateWithoutConfigInput = {
    prompt?: StringFieldUpdateOperationsInput | string
    selected?: TaskSelectionUpdateManyWithoutTaskNestedInput
    submissions?: TaskSubmissionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    selected?: TaskSelectionUncheckedUpdateManyWithoutTaskNestedInput
    submissions?: TaskSubmissionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutSelectedInput = {
    prompt?: StringFieldUpdateOperationsInput | string
    config?: TaskConfigUpdateOneRequiredWithoutTaskNestedInput
    submissions?: TaskSubmissionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSelectedInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    submissions?: TaskSubmissionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutSelectedInput = {
    id?: IntFieldUpdateOperationsInput | number
    configId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
  }

  export type TaskSubmissionCreateManyTaskResultInput = {
    userSessionId: number
    taskId: number
    submittedAt?: Date | string
  }

  export type TaskSubmissionUpdateWithoutTaskResultInput = {
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSession?: UserSessionUpdateOneRequiredWithoutTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type TaskSubmissionUncheckedUpdateWithoutTaskResultInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskSubmissionUncheckedUpdateManyWithoutTaskResultInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteItemCreateManyContentInput = {
    id?: number
  }

  export type VoteItemUpdateWithoutContentInput = {
    submissions?: VoteSubmissionUpdateManyWithoutItemNestedInput
  }

  export type VoteItemUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    submissions?: VoteSubmissionUncheckedUpdateManyWithoutItemNestedInput
  }

  export type VoteItemUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type VoteSubmissionCreateManyItemInput = {
    userSessionId: number
    vote: $Enums.VoteOptionsType
  }

  export type VoteSubmissionUpdateWithoutItemInput = {
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
    userSession?: UserSessionUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteSubmissionUncheckedUpdateWithoutItemInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type VoteSubmissionUncheckedUpdateManyWithoutItemInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteOptionsTypeFieldUpdateOperationsInput | $Enums.VoteOptionsType
  }

  export type PredictionResultCreateManyRoundInput = {
    userSessionId: number
    outcome: $Enums.PredictionOutcome
  }

  export type PredictionResultUpdateWithoutRoundInput = {
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
    userSession?: UserSessionUpdateOneRequiredWithoutPredictionsNestedInput
  }

  export type PredictionResultUncheckedUpdateWithoutRoundInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
  }

  export type PredictionResultUncheckedUpdateManyWithoutRoundInput = {
    userSessionId?: IntFieldUpdateOperationsInput | number
    outcome?: EnumPredictionOutcomeFieldUpdateOperationsInput | $Enums.PredictionOutcome
  }

  export type PredictionQuestionCreateManyPredictionConfigInput = {
    id?: number
  }

  export type PredictionQuestionUpdateWithoutPredictionConfigInput = {

  }

  export type PredictionQuestionUncheckedUpdateWithoutPredictionConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type PredictionQuestionUncheckedUpdateManyWithoutPredictionConfigInput = {
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}