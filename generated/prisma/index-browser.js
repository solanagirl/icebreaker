
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  link: 'link'
};

exports.Prisma.EmailRecordScalarFieldEnum = {
  id: 'id',
  address: 'address',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  lastActive: 'lastActive',
  status: 'status',
  gameId: 'gameId'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  configId: 'configId'
};

exports.Prisma.GameConfigScalarFieldEnum = {
  id: 'id',
  duration: 'duration'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  prompt: 'prompt'
};

exports.Prisma.TaskConfigScalarFieldEnum = {
  id: 'id',
  duration: 'duration',
  submissionType: 'submissionType'
};

exports.Prisma.TaskSelectionScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId'
};

exports.Prisma.TaskResultScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId'
};

exports.Prisma.TaskSubmissionScalarFieldEnum = {
  userSessionId: 'userSessionId',
  taskId: 'taskId',
  taskResultId: 'taskResultId',
  submittedAt: 'submittedAt'
};

exports.Prisma.VoteContentScalarFieldEnum = {
  id: 'id',
  question: 'question'
};

exports.Prisma.VoteItemScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId'
};

exports.Prisma.VoteSubmissionScalarFieldEnum = {
  userSessionId: 'userSessionId',
  itemId: 'itemId',
  vote: 'vote'
};

exports.Prisma.PredictionRoundScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId'
};

exports.Prisma.PredictionConfigScalarFieldEnum = {
  id: 'id',
  signal: 'signal',
  difficulty: 'difficulty'
};

exports.Prisma.PredictionQuestionScalarFieldEnum = {
  id: 'id',
  predictionConfigId: 'predictionConfigId'
};

exports.Prisma.PredictionResultScalarFieldEnum = {
  userSessionId: 'userSessionId',
  outcome: 'outcome',
  roundId: 'roundId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SessionStatus = exports.$Enums.SessionStatus = {
  Registered: 'Registered',
  Active: 'Active',
  Eliminated: 'Eliminated',
  Completed: 'Completed'
};

exports.TaskSubmissionType = exports.$Enums.TaskSubmissionType = {
  TextAnswer: 'TextAnswer',
  ImageUpload: 'ImageUpload',
  SocialLink: 'SocialLink'
};

exports.VoteOptionsType = exports.$Enums.VoteOptionsType = {
  W: 'W',
  L: 'L'
};

exports.SignalType = exports.$Enums.SignalType = {
  Volume: 'Volume',
  Mentions: 'Mentions',
  Sentiment: 'Sentiment'
};

exports.SignalTolerance = exports.$Enums.SignalTolerance = {
  Low: 'Low',
  Mid: 'Mid',
  High: 'High'
};

exports.PredictionOutcome = exports.$Enums.PredictionOutcome = {
  Hit: 'Hit',
  Miss: 'Miss',
  TBD: 'TBD',
  NoAnswer: 'NoAnswer'
};

exports.Prisma.ModelName = {
  Event: 'Event',
  EmailRecord: 'EmailRecord',
  UserSession: 'UserSession',
  Game: 'Game',
  GameConfig: 'GameConfig',
  Task: 'Task',
  TaskConfig: 'TaskConfig',
  TaskSelection: 'TaskSelection',
  TaskResult: 'TaskResult',
  TaskSubmission: 'TaskSubmission',
  VoteContent: 'VoteContent',
  VoteItem: 'VoteItem',
  VoteSubmission: 'VoteSubmission',
  PredictionRound: 'PredictionRound',
  PredictionConfig: 'PredictionConfig',
  PredictionQuestion: 'PredictionQuestion',
  PredictionResult: 'PredictionResult'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
